-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arithm_pro is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src1_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src1_data_stream_0_V_empty_n : IN STD_LOGIC;
    src1_data_stream_0_V_read : OUT STD_LOGIC;
    src1_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src1_data_stream_1_V_empty_n : IN STD_LOGIC;
    src1_data_stream_1_V_read : OUT STD_LOGIC;
    src1_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src1_data_stream_2_V_empty_n : IN STD_LOGIC;
    src1_data_stream_2_V_read : OUT STD_LOGIC;
    src2_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src2_data_stream_0_V_empty_n : IN STD_LOGIC;
    src2_data_stream_0_V_read : OUT STD_LOGIC;
    src2_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src2_data_stream_1_V_empty_n : IN STD_LOGIC;
    src2_data_stream_1_V_read : OUT STD_LOGIC;
    src2_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src2_data_stream_2_V_empty_n : IN STD_LOGIC;
    src2_data_stream_2_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of arithm_pro is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src1_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal src1_data_stream_1_V_blk_n : STD_LOGIC;
    signal src1_data_stream_2_V_blk_n : STD_LOGIC;
    signal src2_data_stream_0_V_blk_n : STD_LOGIC;
    signal src2_data_stream_1_V_blk_n : STD_LOGIC;
    signal src2_data_stream_2_V_blk_n : STD_LOGIC;
    signal dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal exitcond_reg_408_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal t_V_1_reg_250 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_357_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_403 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_408_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_408_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_369_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_46_reg_417 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_reg_422 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_reg_432 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_reg_477 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_reg_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_297_1_reg_487 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_299_1_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_297_2_reg_497 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_299_2_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t1_reg_507 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t2_reg_512 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t1_1_reg_517 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t2_1_reg_522 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t1_2_reg_527 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t2_2_reg_532 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_reg_537 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_300_1_reg_542 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_300_2_reg_547 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_552 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_1_reg_557 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_2_reg_562 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_operator_1_fu_261_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_0_reg_567 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_operator_1_fu_266_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal d_val_1_reg_572 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_operator_1_fu_271_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_577 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal grp_operator_1_fu_261_ap_ce : STD_LOGIC;
    signal grp_operator_1_fu_266_ap_ce : STD_LOGIC;
    signal grp_operator_1_fu_271_ap_ce : STD_LOGIC;
    signal t_V_reg_239 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_276_ce : STD_LOGIC;
    signal grp_fu_280_ce : STD_LOGIC;
    signal grp_fu_284_ce : STD_LOGIC;
    signal grp_fu_288_ce : STD_LOGIC;
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_298_ce : STD_LOGIC;
    signal grp_fu_303_ce : STD_LOGIC;
    signal grp_fu_308_ce : STD_LOGIC;
    signal grp_fu_313_ce : STD_LOGIC;
    signal grp_fu_318_ce : STD_LOGIC;
    signal grp_fu_323_ce : STD_LOGIC;
    signal grp_fu_328_ce : STD_LOGIC;
    signal grp_fu_333_ce : STD_LOGIC;
    signal grp_fu_336_ce : STD_LOGIC;
    signal grp_fu_339_ce : STD_LOGIC;
    signal grp_fu_342_ce : STD_LOGIC;
    signal grp_fu_345_ce : STD_LOGIC;
    signal grp_fu_348_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component operator_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        v : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component SobelFilter_dadd_DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component SobelFilter_dmul_Ee0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component SobelFilter_sitodFfa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_operator_1_fu_261 : component operator_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        v => v_assign_reg_552,
        ap_return => grp_operator_1_fu_261_ap_return,
        ap_ce => grp_operator_1_fu_261_ap_ce);

    grp_operator_1_fu_266 : component operator_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        v => v_assign_1_reg_557,
        ap_return => grp_operator_1_fu_266_ap_return,
        ap_ce => grp_operator_1_fu_266_ap_ce);

    grp_operator_1_fu_271 : component operator_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        v => v_assign_2_reg_562,
        ap_return => grp_operator_1_fu_271_ap_return,
        ap_ce => grp_operator_1_fu_271_ap_ce);

    SobelFilter_dadd_DeQ_U135 : component SobelFilter_dadd_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_reg_507,
        din1 => t2_reg_512,
        ce => grp_fu_276_ce,
        dout => grp_fu_276_p2);

    SobelFilter_dadd_DeQ_U136 : component SobelFilter_dadd_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_1_reg_517,
        din1 => t2_1_reg_522,
        ce => grp_fu_280_ce,
        dout => grp_fu_280_p2);

    SobelFilter_dadd_DeQ_U137 : component SobelFilter_dadd_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_2_reg_527,
        din1 => t2_2_reg_532,
        ce => grp_fu_284_ce,
        dout => grp_fu_284_p2);

    SobelFilter_dadd_DeQ_U138 : component SobelFilter_dadd_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_30_reg_537,
        din1 => ap_const_lv64_0,
        ce => grp_fu_288_ce,
        dout => grp_fu_288_p2);

    SobelFilter_dadd_DeQ_U139 : component SobelFilter_dadd_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_300_1_reg_542,
        din1 => ap_const_lv64_0,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p2);

    SobelFilter_dadd_DeQ_U140 : component SobelFilter_dadd_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_300_2_reg_547,
        din1 => ap_const_lv64_0,
        ce => grp_fu_298_ce,
        dout => grp_fu_298_p2);

    SobelFilter_dmul_Ee0_U141 : component SobelFilter_dmul_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_27_reg_477,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p2);

    SobelFilter_dmul_Ee0_U142 : component SobelFilter_dmul_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_29_reg_482,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_308_ce,
        dout => grp_fu_308_p2);

    SobelFilter_dmul_Ee0_U143 : component SobelFilter_dmul_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_297_1_reg_487,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_313_ce,
        dout => grp_fu_313_p2);

    SobelFilter_dmul_Ee0_U144 : component SobelFilter_dmul_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_299_1_reg_492,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_318_ce,
        dout => grp_fu_318_p2);

    SobelFilter_dmul_Ee0_U145 : component SobelFilter_dmul_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_297_2_reg_497,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_323_ce,
        dout => grp_fu_323_p2);

    SobelFilter_dmul_Ee0_U146 : component SobelFilter_dmul_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_299_2_reg_502,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_328_ce,
        dout => grp_fu_328_p2);

    SobelFilter_sitodFfa_U147 : component SobelFilter_sitodFfa
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p1);

    SobelFilter_sitodFfa_U148 : component SobelFilter_sitodFfa
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_336_p0,
        ce => grp_fu_336_ce,
        dout => grp_fu_336_p1);

    SobelFilter_sitodFfa_U149 : component SobelFilter_sitodFfa
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_339_p0,
        ce => grp_fu_339_ce,
        dout => grp_fu_339_p1);

    SobelFilter_sitodFfa_U150 : component SobelFilter_sitodFfa
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_342_p0,
        ce => grp_fu_342_ce,
        dout => grp_fu_342_p1);

    SobelFilter_sitodFfa_U151 : component SobelFilter_sitodFfa
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_345_p0,
        ce => grp_fu_345_ce,
        dout => grp_fu_345_p1);

    SobelFilter_sitodFfa_U152 : component SobelFilter_sitodFfa
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_348_p0,
        ce => grp_fu_348_ce,
        dout => grp_fu_348_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond4_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                elsif (((exitcond4_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    t_V_1_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_1_reg_250 <= j_V_fu_369_p2;
            elsif (((exitcond4_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_1_reg_250 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                t_V_reg_239 <= i_V_reg_403;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_239 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_408_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                d_val_0_reg_567 <= grp_operator_1_fu_261_ap_return;
                d_val_1_reg_572 <= grp_operator_1_fu_266_ap_return;
                tmp_10_reg_577 <= grp_operator_1_fu_271_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_408 <= exitcond_fu_363_p2;
                exitcond_reg_408_pp0_iter1_reg <= exitcond_reg_408;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_reg_408_pp0_iter10_reg <= exitcond_reg_408_pp0_iter9_reg;
                exitcond_reg_408_pp0_iter11_reg <= exitcond_reg_408_pp0_iter10_reg;
                exitcond_reg_408_pp0_iter12_reg <= exitcond_reg_408_pp0_iter11_reg;
                exitcond_reg_408_pp0_iter13_reg <= exitcond_reg_408_pp0_iter12_reg;
                exitcond_reg_408_pp0_iter14_reg <= exitcond_reg_408_pp0_iter13_reg;
                exitcond_reg_408_pp0_iter15_reg <= exitcond_reg_408_pp0_iter14_reg;
                exitcond_reg_408_pp0_iter16_reg <= exitcond_reg_408_pp0_iter15_reg;
                exitcond_reg_408_pp0_iter17_reg <= exitcond_reg_408_pp0_iter16_reg;
                exitcond_reg_408_pp0_iter18_reg <= exitcond_reg_408_pp0_iter17_reg;
                exitcond_reg_408_pp0_iter19_reg <= exitcond_reg_408_pp0_iter18_reg;
                exitcond_reg_408_pp0_iter20_reg <= exitcond_reg_408_pp0_iter19_reg;
                exitcond_reg_408_pp0_iter21_reg <= exitcond_reg_408_pp0_iter20_reg;
                exitcond_reg_408_pp0_iter22_reg <= exitcond_reg_408_pp0_iter21_reg;
                exitcond_reg_408_pp0_iter23_reg <= exitcond_reg_408_pp0_iter22_reg;
                exitcond_reg_408_pp0_iter24_reg <= exitcond_reg_408_pp0_iter23_reg;
                exitcond_reg_408_pp0_iter25_reg <= exitcond_reg_408_pp0_iter24_reg;
                exitcond_reg_408_pp0_iter26_reg <= exitcond_reg_408_pp0_iter25_reg;
                exitcond_reg_408_pp0_iter27_reg <= exitcond_reg_408_pp0_iter26_reg;
                exitcond_reg_408_pp0_iter28_reg <= exitcond_reg_408_pp0_iter27_reg;
                exitcond_reg_408_pp0_iter29_reg <= exitcond_reg_408_pp0_iter28_reg;
                exitcond_reg_408_pp0_iter2_reg <= exitcond_reg_408_pp0_iter1_reg;
                exitcond_reg_408_pp0_iter3_reg <= exitcond_reg_408_pp0_iter2_reg;
                exitcond_reg_408_pp0_iter4_reg <= exitcond_reg_408_pp0_iter3_reg;
                exitcond_reg_408_pp0_iter5_reg <= exitcond_reg_408_pp0_iter4_reg;
                exitcond_reg_408_pp0_iter6_reg <= exitcond_reg_408_pp0_iter5_reg;
                exitcond_reg_408_pp0_iter7_reg <= exitcond_reg_408_pp0_iter6_reg;
                exitcond_reg_408_pp0_iter8_reg <= exitcond_reg_408_pp0_iter7_reg;
                exitcond_reg_408_pp0_iter9_reg <= exitcond_reg_408_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_403 <= i_V_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_408_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                t1_1_reg_517 <= grp_fu_313_p2;
                t1_2_reg_527 <= grp_fu_323_p2;
                t1_reg_507 <= grp_fu_303_p2;
                t2_1_reg_522 <= grp_fu_318_p2;
                t2_2_reg_532 <= grp_fu_328_p2;
                t2_reg_512 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_408_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_27_reg_477 <= grp_fu_333_p1;
                tmp_297_1_reg_487 <= grp_fu_339_p1;
                tmp_297_2_reg_497 <= grp_fu_345_p1;
                tmp_299_1_reg_492 <= grp_fu_342_p1;
                tmp_299_2_reg_502 <= grp_fu_348_p1;
                tmp_29_reg_482 <= grp_fu_336_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_408_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_300_1_reg_542 <= grp_fu_280_p2;
                tmp_300_2_reg_547 <= grp_fu_284_p2;
                tmp_30_reg_537 <= grp_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_46_reg_417 <= src1_data_stream_0_V_dout;
                tmp_47_reg_422 <= src1_data_stream_1_V_dout;
                tmp_48_reg_427 <= src1_data_stream_2_V_dout;
                tmp_49_reg_432 <= src2_data_stream_0_V_dout;
                tmp_50_reg_437 <= src2_data_stream_1_V_dout;
                tmp_51_reg_442 <= src2_data_stream_2_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_408_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                v_assign_1_reg_557 <= grp_fu_293_p2;
                v_assign_2_reg_562 <= grp_fu_298_p2;
                v_assign_reg_552 <= grp_fu_288_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter30, exitcond4_fu_351_p2, ap_CS_fsm_state2, exitcond_fu_363_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter29)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_363_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_363_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state34 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src1_data_stream_0_V_empty_n, src1_data_stream_1_V_empty_n, src1_data_stream_2_V_empty_n, src2_data_stream_0_V_empty_n, src2_data_stream_1_V_empty_n, src2_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_408, ap_enable_reg_pp0_iter30, exitcond_reg_408_pp0_iter29_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_0_V_full_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_0_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src1_data_stream_0_V_empty_n, src1_data_stream_1_V_empty_n, src1_data_stream_2_V_empty_n, src2_data_stream_0_V_empty_n, src2_data_stream_1_V_empty_n, src2_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_408, ap_enable_reg_pp0_iter30, exitcond_reg_408_pp0_iter29_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_0_V_full_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_0_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src1_data_stream_0_V_empty_n, src1_data_stream_1_V_empty_n, src1_data_stream_2_V_empty_n, src2_data_stream_0_V_empty_n, src2_data_stream_1_V_empty_n, src2_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_408, ap_enable_reg_pp0_iter30, exitcond_reg_408_pp0_iter29_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_0_V_full_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_0_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_0_V_empty_n = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_pp0_stage0_iter30_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, exitcond_reg_408_pp0_iter29_reg)
    begin
                ap_block_state33_pp0_stage0_iter30 <= (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (dst_data_stream_0_V_full_n = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src1_data_stream_0_V_empty_n, src1_data_stream_1_V_empty_n, src1_data_stream_2_V_empty_n, src2_data_stream_0_V_empty_n, src2_data_stream_1_V_empty_n, src2_data_stream_2_V_empty_n, exitcond_reg_408)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src2_data_stream_0_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_408 = ap_const_lv1_0) and (src1_data_stream_0_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_363_p2)
    begin
        if ((exitcond_fu_363_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, exitcond4_fu_351_p2, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond4_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29)
    begin
        if (((ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond4_fu_351_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond4_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_0_V_blk_n_assign_proc : process(dst_data_stream_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter30, exitcond_reg_408_pp0_iter29_reg)
    begin
        if (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            dst_data_stream_0_V_blk_n <= dst_data_stream_0_V_full_n;
        else 
            dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_0_V_din <= d_val_0_reg_567;

    dst_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter30, exitcond_reg_408_pp0_iter29_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_1_V_blk_n_assign_proc : process(dst_data_stream_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter30, exitcond_reg_408_pp0_iter29_reg)
    begin
        if (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            dst_data_stream_1_V_blk_n <= dst_data_stream_1_V_full_n;
        else 
            dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_1_V_din <= d_val_1_reg_572;

    dst_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter30, exitcond_reg_408_pp0_iter29_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_2_V_blk_n_assign_proc : process(dst_data_stream_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter30, exitcond_reg_408_pp0_iter29_reg)
    begin
        if (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            dst_data_stream_2_V_blk_n <= dst_data_stream_2_V_full_n;
        else 
            dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_2_V_din <= tmp_10_reg_577;

    dst_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter30, exitcond_reg_408_pp0_iter29_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_408_pp0_iter29_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_351_p2 <= "1" when (t_V_reg_239 = ap_const_lv11_438) else "0";
    exitcond_fu_363_p2 <= "1" when (t_V_1_reg_250 = ap_const_lv11_780) else "0";

    grp_fu_276_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_276_ce <= ap_const_logic_1;
        else 
            grp_fu_276_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_280_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_280_ce <= ap_const_logic_1;
        else 
            grp_fu_280_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_284_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_284_ce <= ap_const_logic_1;
        else 
            grp_fu_284_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_288_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_288_ce <= ap_const_logic_1;
        else 
            grp_fu_288_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_293_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_293_ce <= ap_const_logic_1;
        else 
            grp_fu_293_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_298_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_298_ce <= ap_const_logic_1;
        else 
            grp_fu_298_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_303_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_303_ce <= ap_const_logic_1;
        else 
            grp_fu_303_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_308_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_308_ce <= ap_const_logic_1;
        else 
            grp_fu_308_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_313_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_313_ce <= ap_const_logic_1;
        else 
            grp_fu_313_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_318_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_318_ce <= ap_const_logic_1;
        else 
            grp_fu_318_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_323_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_323_ce <= ap_const_logic_1;
        else 
            grp_fu_323_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_328_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_328_ce <= ap_const_logic_1;
        else 
            grp_fu_328_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_333_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_333_ce <= ap_const_logic_1;
        else 
            grp_fu_333_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_333_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_reg_417),32));

    grp_fu_336_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_336_ce <= ap_const_logic_1;
        else 
            grp_fu_336_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_336_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_reg_432),32));

    grp_fu_339_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_339_ce <= ap_const_logic_1;
        else 
            grp_fu_339_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_339_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_reg_422),32));

    grp_fu_342_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_342_ce <= ap_const_logic_1;
        else 
            grp_fu_342_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_342_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_reg_437),32));

    grp_fu_345_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_345_ce <= ap_const_logic_1;
        else 
            grp_fu_345_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_345_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_reg_427),32));

    grp_fu_348_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_348_ce <= ap_const_logic_1;
        else 
            grp_fu_348_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_348_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_reg_442),32));

    grp_operator_1_fu_261_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_operator_1_fu_261_ap_ce <= ap_const_logic_1;
        else 
            grp_operator_1_fu_261_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_operator_1_fu_266_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_operator_1_fu_266_ap_ce <= ap_const_logic_1;
        else 
            grp_operator_1_fu_266_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_operator_1_fu_271_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_operator_1_fu_271_ap_ce <= ap_const_logic_1;
        else 
            grp_operator_1_fu_271_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_357_p2 <= std_logic_vector(unsigned(t_V_reg_239) + unsigned(ap_const_lv11_1));
    j_V_fu_369_p2 <= std_logic_vector(unsigned(t_V_1_reg_250) + unsigned(ap_const_lv11_1));

    src1_data_stream_0_V_blk_n_assign_proc : process(src1_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_408)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src1_data_stream_0_V_blk_n <= src1_data_stream_0_V_empty_n;
        else 
            src1_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src1_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_408, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src1_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src1_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src1_data_stream_1_V_blk_n_assign_proc : process(src1_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_408)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src1_data_stream_1_V_blk_n <= src1_data_stream_1_V_empty_n;
        else 
            src1_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src1_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_408, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src1_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src1_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src1_data_stream_2_V_blk_n_assign_proc : process(src1_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_408)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src1_data_stream_2_V_blk_n <= src1_data_stream_2_V_empty_n;
        else 
            src1_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src1_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_408, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src1_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src1_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src2_data_stream_0_V_blk_n_assign_proc : process(src2_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_408)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src2_data_stream_0_V_blk_n <= src2_data_stream_0_V_empty_n;
        else 
            src2_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src2_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_408, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src2_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src2_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src2_data_stream_1_V_blk_n_assign_proc : process(src2_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_408)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src2_data_stream_1_V_blk_n <= src2_data_stream_1_V_empty_n;
        else 
            src2_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src2_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_408, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src2_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src2_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src2_data_stream_2_V_blk_n_assign_proc : process(src2_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_408)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src2_data_stream_2_V_blk_n <= src2_data_stream_2_V_empty_n;
        else 
            src2_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src2_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_408, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src2_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src2_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
