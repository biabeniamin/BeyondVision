-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_proc307309 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Enabled_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    Enabled_V_empty_n : IN STD_LOGIC;
    Enabled_V_read : OUT STD_LOGIC;
    img_0_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_0_data_stream_0_V_read : OUT STD_LOGIC;
    img_0_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_0_data_stream_1_V_read : OUT STD_LOGIC;
    img_0_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_0_data_stream_2_V_read : OUT STD_LOGIC;
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Block_proc307309 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal OUTPUT_STREAM_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal OUTPUT_STREAM_V_data_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal OUTPUT_STREAM_V_data_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal OUTPUT_STREAM_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_data_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal OUTPUT_STREAM_V_keep_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (2 downto 0);
    signal OUTPUT_STREAM_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (2 downto 0);
    signal OUTPUT_STREAM_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_keep_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal OUTPUT_STREAM_V_strb_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (2 downto 0);
    signal OUTPUT_STREAM_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (2 downto 0);
    signal OUTPUT_STREAM_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_strb_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_user_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_user_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_last_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_last_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_id_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_id_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_dest_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_V_dest_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal Enabled_V_blk_n : STD_LOGIC;
    signal grp_AddWeighted_fu_596_ap_start : STD_LOGIC;
    signal grp_AddWeighted_fu_596_ap_done : STD_LOGIC;
    signal grp_AddWeighted_fu_596_ap_idle : STD_LOGIC;
    signal grp_AddWeighted_fu_596_ap_ready : STD_LOGIC;
    signal grp_AddWeighted_fu_596_src1_data_stream_0_V_read : STD_LOGIC;
    signal grp_AddWeighted_fu_596_src1_data_stream_1_V_read : STD_LOGIC;
    signal grp_AddWeighted_fu_596_src1_data_stream_2_V_read : STD_LOGIC;
    signal grp_AddWeighted_fu_596_src2_data_stream_0_V_read : STD_LOGIC;
    signal grp_AddWeighted_fu_596_src2_data_stream_1_V_read : STD_LOGIC;
    signal grp_AddWeighted_fu_596_src2_data_stream_2_V_read : STD_LOGIC;
    signal grp_AddWeighted_fu_596_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddWeighted_fu_596_dst_data_stream_0_V_write : STD_LOGIC;
    signal grp_AddWeighted_fu_596_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddWeighted_fu_596_dst_data_stream_1_V_write : STD_LOGIC;
    signal grp_AddWeighted_fu_596_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddWeighted_fu_596_dst_data_stream_2_V_write : STD_LOGIC;
    signal grp_Sobel_fu_609_ap_start : STD_LOGIC;
    signal grp_Sobel_fu_609_ap_done : STD_LOGIC;
    signal grp_Sobel_fu_609_ap_idle : STD_LOGIC;
    signal grp_Sobel_fu_609_ap_ready : STD_LOGIC;
    signal grp_Sobel_fu_609_p_src_data_stream_0_V_read : STD_LOGIC;
    signal grp_Sobel_fu_609_p_src_data_stream_1_V_read : STD_LOGIC;
    signal grp_Sobel_fu_609_p_src_data_stream_2_V_read : STD_LOGIC;
    signal grp_Sobel_fu_609_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_609_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal grp_Sobel_fu_609_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_609_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal grp_Sobel_fu_609_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_609_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal grp_Sobel_1_fu_619_ap_start : STD_LOGIC;
    signal grp_Sobel_1_fu_619_ap_done : STD_LOGIC;
    signal grp_Sobel_1_fu_619_ap_idle : STD_LOGIC;
    signal grp_Sobel_1_fu_619_ap_ready : STD_LOGIC;
    signal grp_Sobel_1_fu_619_p_src_data_stream_0_V_read : STD_LOGIC;
    signal grp_Sobel_1_fu_619_p_src_data_stream_1_V_read : STD_LOGIC;
    signal grp_Sobel_1_fu_619_p_src_data_stream_2_V_read : STD_LOGIC;
    signal grp_Sobel_1_fu_619_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_1_fu_619_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal grp_Sobel_1_fu_619_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_1_fu_619_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal grp_Sobel_1_fu_619_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_1_fu_619_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_ap_start : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_ap_done : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_ap_idle : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_ap_ready : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_p_src_data_stream_0_V_read : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_p_src_data_stream_1_V_read : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_p_src_data_stream_2_V_read : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_ap_start : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_ap_done : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_ap_idle : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_ap_ready : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_p_src_data_stream_0_V_read : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_p_src_data_stream_1_V_read : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_p_src_data_stream_2_V_read : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_ap_start : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_ap_done : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_ap_idle : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_ap_ready : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TREADY : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Duplicate_fu_676_ap_start : STD_LOGIC;
    signal grp_Duplicate_fu_676_ap_done : STD_LOGIC;
    signal grp_Duplicate_fu_676_ap_idle : STD_LOGIC;
    signal grp_Duplicate_fu_676_ap_ready : STD_LOGIC;
    signal grp_Duplicate_fu_676_src_data_stream_0_V_read : STD_LOGIC;
    signal grp_Duplicate_fu_676_src_data_stream_1_V_read : STD_LOGIC;
    signal grp_Duplicate_fu_676_src_data_stream_2_V_read : STD_LOGIC;
    signal grp_Duplicate_fu_676_dst1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Duplicate_fu_676_dst1_data_stream_0_V_write : STD_LOGIC;
    signal grp_Duplicate_fu_676_dst1_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Duplicate_fu_676_dst1_data_stream_1_V_write : STD_LOGIC;
    signal grp_Duplicate_fu_676_dst1_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Duplicate_fu_676_dst1_data_stream_2_V_write : STD_LOGIC;
    signal grp_Duplicate_fu_676_dst2_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Duplicate_fu_676_dst2_data_stream_0_V_write : STD_LOGIC;
    signal grp_Duplicate_fu_676_dst2_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Duplicate_fu_676_dst2_data_stream_1_V_write : STD_LOGIC;
    signal grp_Duplicate_fu_676_dst2_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Duplicate_fu_676_dst2_data_stream_2_V_write : STD_LOGIC;
    signal grp_CvtColor_fu_689_ap_start : STD_LOGIC;
    signal grp_CvtColor_fu_689_ap_done : STD_LOGIC;
    signal grp_CvtColor_fu_689_ap_idle : STD_LOGIC;
    signal grp_CvtColor_fu_689_ap_ready : STD_LOGIC;
    signal grp_CvtColor_fu_689_p_src_data_stream_0_V_read : STD_LOGIC;
    signal grp_CvtColor_fu_689_p_src_data_stream_1_V_read : STD_LOGIC;
    signal grp_CvtColor_fu_689_p_src_data_stream_2_V_read : STD_LOGIC;
    signal grp_CvtColor_fu_689_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_CvtColor_fu_689_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal grp_CvtColor_fu_689_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_CvtColor_fu_689_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal grp_CvtColor_fu_689_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_CvtColor_fu_689_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal grp_AddWeighted_fu_596_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal img_4_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_stream_0_empty_n : STD_LOGIC;
    signal img_4_data_stream_0_read : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal img_4_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_stream_1_empty_n : STD_LOGIC;
    signal img_4_data_stream_1_read : STD_LOGIC;
    signal img_4_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_stream_2_empty_n : STD_LOGIC;
    signal img_4_data_stream_2_read : STD_LOGIC;
    signal img_3_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_0_empty_n : STD_LOGIC;
    signal img_3_data_stream_0_read : STD_LOGIC;
    signal img_3_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_1_empty_n : STD_LOGIC;
    signal img_3_data_stream_1_read : STD_LOGIC;
    signal img_3_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_2_empty_n : STD_LOGIC;
    signal img_3_data_stream_2_read : STD_LOGIC;
    signal img_5_data_stream_0_full_n : STD_LOGIC;
    signal img_5_data_stream_0_write : STD_LOGIC;
    signal img_5_data_stream_1_full_n : STD_LOGIC;
    signal img_5_data_stream_1_write : STD_LOGIC;
    signal img_5_data_stream_2_full_n : STD_LOGIC;
    signal img_5_data_stream_2_write : STD_LOGIC;
    signal grp_Sobel_fu_609_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal img_2a_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2a_data_stream_0_empty_n : STD_LOGIC;
    signal img_2a_data_stream_0_read : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal img_2a_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2a_data_stream_1_empty_n : STD_LOGIC;
    signal img_2a_data_stream_1_read : STD_LOGIC;
    signal img_2a_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2a_data_stream_2_empty_n : STD_LOGIC;
    signal img_2a_data_stream_2_read : STD_LOGIC;
    signal img_3_data_stream_0_full_n : STD_LOGIC;
    signal img_3_data_stream_0_write : STD_LOGIC;
    signal img_3_data_stream_1_full_n : STD_LOGIC;
    signal img_3_data_stream_1_write : STD_LOGIC;
    signal img_3_data_stream_2_full_n : STD_LOGIC;
    signal img_3_data_stream_2_write : STD_LOGIC;
    signal grp_Sobel_1_fu_619_ap_start_reg : STD_LOGIC := '0';
    signal img_2b_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2b_data_stream_0_empty_n : STD_LOGIC;
    signal img_2b_data_stream_0_read : STD_LOGIC;
    signal img_2b_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2b_data_stream_1_empty_n : STD_LOGIC;
    signal img_2b_data_stream_1_read : STD_LOGIC;
    signal img_2b_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2b_data_stream_2_empty_n : STD_LOGIC;
    signal img_2b_data_stream_2_read : STD_LOGIC;
    signal img_4_data_stream_0_full_n : STD_LOGIC;
    signal img_4_data_stream_0_write : STD_LOGIC;
    signal img_4_data_stream_1_full_n : STD_LOGIC;
    signal img_4_data_stream_1_write : STD_LOGIC;
    signal img_4_data_stream_2_full_n : STD_LOGIC;
    signal img_4_data_stream_2_write : STD_LOGIC;
    signal grp_GaussianBlur_fu_629_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal img_1_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_read : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal img_1_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_read : STD_LOGIC;
    signal img_1_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_empty_n : STD_LOGIC;
    signal img_1_data_stream_2_read : STD_LOGIC;
    signal img_2_data_stream_0_full_n : STD_LOGIC;
    signal img_2_data_stream_0_write : STD_LOGIC;
    signal img_2_data_stream_1_full_n : STD_LOGIC;
    signal img_2_data_stream_1_write : STD_LOGIC;
    signal img_2_data_stream_2_full_n : STD_LOGIC;
    signal img_2_data_stream_2_write : STD_LOGIC;
    signal grp_CvtColor_1_fu_639_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call0 : BOOLEAN;
    signal Enabled_V_read_read_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal img_1_data_stream_0_full_n : STD_LOGIC;
    signal img_1_data_stream_0_write : STD_LOGIC;
    signal img_1_data_stream_1_full_n : STD_LOGIC;
    signal img_1_data_stream_1_write : STD_LOGIC;
    signal img_1_data_stream_2_full_n : STD_LOGIC;
    signal img_1_data_stream_2_write : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_652_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal img_6_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_6_data_stream_0_empty_n : STD_LOGIC;
    signal img_6_data_stream_0_read : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal img_6_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_6_data_stream_1_empty_n : STD_LOGIC;
    signal img_6_data_stream_1_read : STD_LOGIC;
    signal img_6_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_6_data_stream_2_empty_n : STD_LOGIC;
    signal img_6_data_stream_2_read : STD_LOGIC;
    signal grp_Duplicate_fu_676_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal img_2_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_read : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal img_2_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_1_empty_n : STD_LOGIC;
    signal img_2_data_stream_1_read : STD_LOGIC;
    signal img_2_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_2_empty_n : STD_LOGIC;
    signal img_2_data_stream_2_read : STD_LOGIC;
    signal img_2a_data_stream_0_full_n : STD_LOGIC;
    signal img_2a_data_stream_0_write : STD_LOGIC;
    signal img_2a_data_stream_1_full_n : STD_LOGIC;
    signal img_2a_data_stream_1_write : STD_LOGIC;
    signal img_2a_data_stream_2_full_n : STD_LOGIC;
    signal img_2a_data_stream_2_write : STD_LOGIC;
    signal img_2b_data_stream_0_full_n : STD_LOGIC;
    signal img_2b_data_stream_0_write : STD_LOGIC;
    signal img_2b_data_stream_1_full_n : STD_LOGIC;
    signal img_2b_data_stream_1_write : STD_LOGIC;
    signal img_2b_data_stream_2_full_n : STD_LOGIC;
    signal img_2b_data_stream_2_write : STD_LOGIC;
    signal grp_CvtColor_fu_689_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal img_5_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_5_data_stream_0_empty_n : STD_LOGIC;
    signal img_5_data_stream_0_read : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal img_5_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_5_data_stream_1_empty_n : STD_LOGIC;
    signal img_5_data_stream_1_read : STD_LOGIC;
    signal img_5_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_5_data_stream_2_empty_n : STD_LOGIC;
    signal img_5_data_stream_2_read : STD_LOGIC;
    signal img_6_data_stream_0_full_n : STD_LOGIC;
    signal img_6_data_stream_0_write : STD_LOGIC;
    signal img_6_data_stream_1_full_n : STD_LOGIC;
    signal img_6_data_stream_1_write : STD_LOGIC;
    signal img_6_data_stream_2_full_n : STD_LOGIC;
    signal img_6_data_stream_2_write : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_state16 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state8_on_subcall_done : BOOLEAN;

    component AddWeighted IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src1_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src1_data_stream_0_V_empty_n : IN STD_LOGIC;
        src1_data_stream_0_V_read : OUT STD_LOGIC;
        src1_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src1_data_stream_1_V_empty_n : IN STD_LOGIC;
        src1_data_stream_1_V_read : OUT STD_LOGIC;
        src1_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src1_data_stream_2_V_empty_n : IN STD_LOGIC;
        src1_data_stream_2_V_read : OUT STD_LOGIC;
        src2_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src2_data_stream_0_V_empty_n : IN STD_LOGIC;
        src2_data_stream_0_V_read : OUT STD_LOGIC;
        src2_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src2_data_stream_1_V_empty_n : IN STD_LOGIC;
        src2_data_stream_1_V_read : OUT STD_LOGIC;
        src2_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src2_data_stream_2_V_empty_n : IN STD_LOGIC;
        src2_data_stream_2_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Sobel_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component GaussianBlur IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component CvtColor_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst1_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_0_V_full_n : IN STD_LOGIC;
        dst1_data_stream_0_V_write : OUT STD_LOGIC;
        dst1_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_1_V_full_n : IN STD_LOGIC;
        dst1_data_stream_1_V_write : OUT STD_LOGIC;
        dst1_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_2_V_full_n : IN STD_LOGIC;
        dst1_data_stream_2_V_write : OUT STD_LOGIC;
        dst2_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_0_V_full_n : IN STD_LOGIC;
        dst2_data_stream_0_V_write : OUT STD_LOGIC;
        dst2_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_1_V_full_n : IN STD_LOGIC;
        dst2_data_stream_1_V_write : OUT STD_LOGIC;
        dst2_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_2_V_full_n : IN STD_LOGIC;
        dst2_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_AddWeighted_fu_596 : component AddWeighted
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddWeighted_fu_596_ap_start,
        ap_done => grp_AddWeighted_fu_596_ap_done,
        ap_idle => grp_AddWeighted_fu_596_ap_idle,
        ap_ready => grp_AddWeighted_fu_596_ap_ready,
        src1_data_stream_0_V_dout => img_4_data_stream_0_dout,
        src1_data_stream_0_V_empty_n => img_4_data_stream_0_empty_n,
        src1_data_stream_0_V_read => grp_AddWeighted_fu_596_src1_data_stream_0_V_read,
        src1_data_stream_1_V_dout => img_4_data_stream_1_dout,
        src1_data_stream_1_V_empty_n => img_4_data_stream_1_empty_n,
        src1_data_stream_1_V_read => grp_AddWeighted_fu_596_src1_data_stream_1_V_read,
        src1_data_stream_2_V_dout => img_4_data_stream_2_dout,
        src1_data_stream_2_V_empty_n => img_4_data_stream_2_empty_n,
        src1_data_stream_2_V_read => grp_AddWeighted_fu_596_src1_data_stream_2_V_read,
        src2_data_stream_0_V_dout => img_3_data_stream_0_dout,
        src2_data_stream_0_V_empty_n => img_3_data_stream_0_empty_n,
        src2_data_stream_0_V_read => grp_AddWeighted_fu_596_src2_data_stream_0_V_read,
        src2_data_stream_1_V_dout => img_3_data_stream_1_dout,
        src2_data_stream_1_V_empty_n => img_3_data_stream_1_empty_n,
        src2_data_stream_1_V_read => grp_AddWeighted_fu_596_src2_data_stream_1_V_read,
        src2_data_stream_2_V_dout => img_3_data_stream_2_dout,
        src2_data_stream_2_V_empty_n => img_3_data_stream_2_empty_n,
        src2_data_stream_2_V_read => grp_AddWeighted_fu_596_src2_data_stream_2_V_read,
        dst_data_stream_0_V_din => grp_AddWeighted_fu_596_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => img_5_data_stream_0_full_n,
        dst_data_stream_0_V_write => grp_AddWeighted_fu_596_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => grp_AddWeighted_fu_596_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => img_5_data_stream_1_full_n,
        dst_data_stream_1_V_write => grp_AddWeighted_fu_596_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => grp_AddWeighted_fu_596_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => img_5_data_stream_2_full_n,
        dst_data_stream_2_V_write => grp_AddWeighted_fu_596_dst_data_stream_2_V_write);

    grp_Sobel_fu_609 : component Sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Sobel_fu_609_ap_start,
        ap_done => grp_Sobel_fu_609_ap_done,
        ap_idle => grp_Sobel_fu_609_ap_idle,
        ap_ready => grp_Sobel_fu_609_ap_ready,
        p_src_data_stream_0_V_dout => img_2a_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_2a_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => grp_Sobel_fu_609_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_2a_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_2a_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => grp_Sobel_fu_609_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_2a_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_2a_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => grp_Sobel_fu_609_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => grp_Sobel_fu_609_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_3_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => grp_Sobel_fu_609_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => grp_Sobel_fu_609_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_3_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => grp_Sobel_fu_609_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => grp_Sobel_fu_609_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_3_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => grp_Sobel_fu_609_p_dst_data_stream_2_V_write);

    grp_Sobel_1_fu_619 : component Sobel_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Sobel_1_fu_619_ap_start,
        ap_done => grp_Sobel_1_fu_619_ap_done,
        ap_idle => grp_Sobel_1_fu_619_ap_idle,
        ap_ready => grp_Sobel_1_fu_619_ap_ready,
        p_src_data_stream_0_V_dout => img_2b_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_2b_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => grp_Sobel_1_fu_619_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_2b_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_2b_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => grp_Sobel_1_fu_619_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_2b_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_2b_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => grp_Sobel_1_fu_619_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => grp_Sobel_1_fu_619_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_4_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => grp_Sobel_1_fu_619_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => grp_Sobel_1_fu_619_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_4_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => grp_Sobel_1_fu_619_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => grp_Sobel_1_fu_619_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_4_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => grp_Sobel_1_fu_619_p_dst_data_stream_2_V_write);

    grp_GaussianBlur_fu_629 : component GaussianBlur
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_GaussianBlur_fu_629_ap_start,
        ap_done => grp_GaussianBlur_fu_629_ap_done,
        ap_idle => grp_GaussianBlur_fu_629_ap_idle,
        ap_ready => grp_GaussianBlur_fu_629_ap_ready,
        p_src_data_stream_0_V_dout => img_1_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_1_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => grp_GaussianBlur_fu_629_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_1_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_1_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => grp_GaussianBlur_fu_629_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_1_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_1_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => grp_GaussianBlur_fu_629_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_2_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_2_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_2_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_write);

    grp_CvtColor_1_fu_639 : component CvtColor_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_CvtColor_1_fu_639_ap_start,
        ap_done => grp_CvtColor_1_fu_639_ap_done,
        ap_idle => grp_CvtColor_1_fu_639_ap_idle,
        ap_ready => grp_CvtColor_1_fu_639_ap_ready,
        p_src_data_stream_0_V_dout => img_0_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n => img_0_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read => grp_CvtColor_1_fu_639_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_0_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n => img_0_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read => grp_CvtColor_1_fu_639_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_0_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n => img_0_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read => grp_CvtColor_1_fu_639_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_1_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_1_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_1_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_write);

    grp_Mat2AXIvideo_fu_652 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Mat2AXIvideo_fu_652_ap_start,
        ap_done => grp_Mat2AXIvideo_fu_652_ap_done,
        ap_idle => grp_Mat2AXIvideo_fu_652_ap_idle,
        ap_ready => grp_Mat2AXIvideo_fu_652_ap_ready,
        img_data_stream_0_V_dout => grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read,
        OUTPUT_STREAM_TDATA => grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDEST);

    grp_Duplicate_fu_676 : component Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Duplicate_fu_676_ap_start,
        ap_done => grp_Duplicate_fu_676_ap_done,
        ap_idle => grp_Duplicate_fu_676_ap_idle,
        ap_ready => grp_Duplicate_fu_676_ap_ready,
        src_data_stream_0_V_dout => img_2_data_stream_0_dout,
        src_data_stream_0_V_empty_n => img_2_data_stream_0_empty_n,
        src_data_stream_0_V_read => grp_Duplicate_fu_676_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_2_data_stream_1_dout,
        src_data_stream_1_V_empty_n => img_2_data_stream_1_empty_n,
        src_data_stream_1_V_read => grp_Duplicate_fu_676_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => img_2_data_stream_2_dout,
        src_data_stream_2_V_empty_n => img_2_data_stream_2_empty_n,
        src_data_stream_2_V_read => grp_Duplicate_fu_676_src_data_stream_2_V_read,
        dst1_data_stream_0_V_din => grp_Duplicate_fu_676_dst1_data_stream_0_V_din,
        dst1_data_stream_0_V_full_n => img_2a_data_stream_0_full_n,
        dst1_data_stream_0_V_write => grp_Duplicate_fu_676_dst1_data_stream_0_V_write,
        dst1_data_stream_1_V_din => grp_Duplicate_fu_676_dst1_data_stream_1_V_din,
        dst1_data_stream_1_V_full_n => img_2a_data_stream_1_full_n,
        dst1_data_stream_1_V_write => grp_Duplicate_fu_676_dst1_data_stream_1_V_write,
        dst1_data_stream_2_V_din => grp_Duplicate_fu_676_dst1_data_stream_2_V_din,
        dst1_data_stream_2_V_full_n => img_2a_data_stream_2_full_n,
        dst1_data_stream_2_V_write => grp_Duplicate_fu_676_dst1_data_stream_2_V_write,
        dst2_data_stream_0_V_din => grp_Duplicate_fu_676_dst2_data_stream_0_V_din,
        dst2_data_stream_0_V_full_n => img_2b_data_stream_0_full_n,
        dst2_data_stream_0_V_write => grp_Duplicate_fu_676_dst2_data_stream_0_V_write,
        dst2_data_stream_1_V_din => grp_Duplicate_fu_676_dst2_data_stream_1_V_din,
        dst2_data_stream_1_V_full_n => img_2b_data_stream_1_full_n,
        dst2_data_stream_1_V_write => grp_Duplicate_fu_676_dst2_data_stream_1_V_write,
        dst2_data_stream_2_V_din => grp_Duplicate_fu_676_dst2_data_stream_2_V_din,
        dst2_data_stream_2_V_full_n => img_2b_data_stream_2_full_n,
        dst2_data_stream_2_V_write => grp_Duplicate_fu_676_dst2_data_stream_2_V_write);

    grp_CvtColor_fu_689 : component CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_CvtColor_fu_689_ap_start,
        ap_done => grp_CvtColor_fu_689_ap_done,
        ap_idle => grp_CvtColor_fu_689_ap_idle,
        ap_ready => grp_CvtColor_fu_689_ap_ready,
        p_src_data_stream_0_V_dout => img_5_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_5_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => grp_CvtColor_fu_689_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_5_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_5_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => grp_CvtColor_fu_689_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_5_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_5_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => grp_CvtColor_fu_689_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => grp_CvtColor_fu_689_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_6_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => grp_CvtColor_fu_689_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => grp_CvtColor_fu_689_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_6_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => grp_CvtColor_fu_689_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => grp_CvtColor_fu_689_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_6_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => grp_CvtColor_fu_689_p_dst_data_stream_2_V_write);

    img_1_data_stream_0_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_full_n,
        if_write => img_1_data_stream_0_write,
        if_dout => img_1_data_stream_0_dout,
        if_empty_n => img_1_data_stream_0_empty_n,
        if_read => img_1_data_stream_0_read);

    img_1_data_stream_1_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_full_n,
        if_write => img_1_data_stream_1_write,
        if_dout => img_1_data_stream_1_dout,
        if_empty_n => img_1_data_stream_1_empty_n,
        if_read => img_1_data_stream_1_read);

    img_1_data_stream_2_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_din,
        if_full_n => img_1_data_stream_2_full_n,
        if_write => img_1_data_stream_2_write,
        if_dout => img_1_data_stream_2_dout,
        if_empty_n => img_1_data_stream_2_empty_n,
        if_read => img_1_data_stream_2_read);

    img_2_data_stream_0_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_din,
        if_full_n => img_2_data_stream_0_full_n,
        if_write => img_2_data_stream_0_write,
        if_dout => img_2_data_stream_0_dout,
        if_empty_n => img_2_data_stream_0_empty_n,
        if_read => img_2_data_stream_0_read);

    img_2_data_stream_1_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_din,
        if_full_n => img_2_data_stream_1_full_n,
        if_write => img_2_data_stream_1_write,
        if_dout => img_2_data_stream_1_dout,
        if_empty_n => img_2_data_stream_1_empty_n,
        if_read => img_2_data_stream_1_read);

    img_2_data_stream_2_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_din,
        if_full_n => img_2_data_stream_2_full_n,
        if_write => img_2_data_stream_2_write,
        if_dout => img_2_data_stream_2_dout,
        if_empty_n => img_2_data_stream_2_empty_n,
        if_read => img_2_data_stream_2_read);

    img_2a_data_stream_0_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Duplicate_fu_676_dst1_data_stream_0_V_din,
        if_full_n => img_2a_data_stream_0_full_n,
        if_write => img_2a_data_stream_0_write,
        if_dout => img_2a_data_stream_0_dout,
        if_empty_n => img_2a_data_stream_0_empty_n,
        if_read => img_2a_data_stream_0_read);

    img_2a_data_stream_1_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Duplicate_fu_676_dst1_data_stream_1_V_din,
        if_full_n => img_2a_data_stream_1_full_n,
        if_write => img_2a_data_stream_1_write,
        if_dout => img_2a_data_stream_1_dout,
        if_empty_n => img_2a_data_stream_1_empty_n,
        if_read => img_2a_data_stream_1_read);

    img_2a_data_stream_2_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Duplicate_fu_676_dst1_data_stream_2_V_din,
        if_full_n => img_2a_data_stream_2_full_n,
        if_write => img_2a_data_stream_2_write,
        if_dout => img_2a_data_stream_2_dout,
        if_empty_n => img_2a_data_stream_2_empty_n,
        if_read => img_2a_data_stream_2_read);

    img_2b_data_stream_0_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Duplicate_fu_676_dst2_data_stream_0_V_din,
        if_full_n => img_2b_data_stream_0_full_n,
        if_write => img_2b_data_stream_0_write,
        if_dout => img_2b_data_stream_0_dout,
        if_empty_n => img_2b_data_stream_0_empty_n,
        if_read => img_2b_data_stream_0_read);

    img_2b_data_stream_1_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Duplicate_fu_676_dst2_data_stream_1_V_din,
        if_full_n => img_2b_data_stream_1_full_n,
        if_write => img_2b_data_stream_1_write,
        if_dout => img_2b_data_stream_1_dout,
        if_empty_n => img_2b_data_stream_1_empty_n,
        if_read => img_2b_data_stream_1_read);

    img_2b_data_stream_2_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Duplicate_fu_676_dst2_data_stream_2_V_din,
        if_full_n => img_2b_data_stream_2_full_n,
        if_write => img_2b_data_stream_2_write,
        if_dout => img_2b_data_stream_2_dout,
        if_empty_n => img_2b_data_stream_2_empty_n,
        if_read => img_2b_data_stream_2_read);

    img_3_data_stream_0_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Sobel_fu_609_p_dst_data_stream_0_V_din,
        if_full_n => img_3_data_stream_0_full_n,
        if_write => img_3_data_stream_0_write,
        if_dout => img_3_data_stream_0_dout,
        if_empty_n => img_3_data_stream_0_empty_n,
        if_read => img_3_data_stream_0_read);

    img_3_data_stream_1_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Sobel_fu_609_p_dst_data_stream_1_V_din,
        if_full_n => img_3_data_stream_1_full_n,
        if_write => img_3_data_stream_1_write,
        if_dout => img_3_data_stream_1_dout,
        if_empty_n => img_3_data_stream_1_empty_n,
        if_read => img_3_data_stream_1_read);

    img_3_data_stream_2_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Sobel_fu_609_p_dst_data_stream_2_V_din,
        if_full_n => img_3_data_stream_2_full_n,
        if_write => img_3_data_stream_2_write,
        if_dout => img_3_data_stream_2_dout,
        if_empty_n => img_3_data_stream_2_empty_n,
        if_read => img_3_data_stream_2_read);

    img_4_data_stream_0_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Sobel_1_fu_619_p_dst_data_stream_0_V_din,
        if_full_n => img_4_data_stream_0_full_n,
        if_write => img_4_data_stream_0_write,
        if_dout => img_4_data_stream_0_dout,
        if_empty_n => img_4_data_stream_0_empty_n,
        if_read => img_4_data_stream_0_read);

    img_4_data_stream_1_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Sobel_1_fu_619_p_dst_data_stream_1_V_din,
        if_full_n => img_4_data_stream_1_full_n,
        if_write => img_4_data_stream_1_write,
        if_dout => img_4_data_stream_1_dout,
        if_empty_n => img_4_data_stream_1_empty_n,
        if_read => img_4_data_stream_1_read);

    img_4_data_stream_2_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_Sobel_1_fu_619_p_dst_data_stream_2_V_din,
        if_full_n => img_4_data_stream_2_full_n,
        if_write => img_4_data_stream_2_write,
        if_dout => img_4_data_stream_2_dout,
        if_empty_n => img_4_data_stream_2_empty_n,
        if_read => img_4_data_stream_2_read);

    img_5_data_stream_0_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_AddWeighted_fu_596_dst_data_stream_0_V_din,
        if_full_n => img_5_data_stream_0_full_n,
        if_write => img_5_data_stream_0_write,
        if_dout => img_5_data_stream_0_dout,
        if_empty_n => img_5_data_stream_0_empty_n,
        if_read => img_5_data_stream_0_read);

    img_5_data_stream_1_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_AddWeighted_fu_596_dst_data_stream_1_V_din,
        if_full_n => img_5_data_stream_1_full_n,
        if_write => img_5_data_stream_1_write,
        if_dout => img_5_data_stream_1_dout,
        if_empty_n => img_5_data_stream_1_empty_n,
        if_read => img_5_data_stream_1_read);

    img_5_data_stream_2_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_AddWeighted_fu_596_dst_data_stream_2_V_din,
        if_full_n => img_5_data_stream_2_full_n,
        if_write => img_5_data_stream_2_write,
        if_dout => img_5_data_stream_2_dout,
        if_empty_n => img_5_data_stream_2_empty_n,
        if_read => img_5_data_stream_2_read);

    img_6_data_stream_0_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_CvtColor_fu_689_p_dst_data_stream_0_V_din,
        if_full_n => img_6_data_stream_0_full_n,
        if_write => img_6_data_stream_0_write,
        if_dout => img_6_data_stream_0_dout,
        if_empty_n => img_6_data_stream_0_empty_n,
        if_read => img_6_data_stream_0_read);

    img_6_data_stream_1_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_CvtColor_fu_689_p_dst_data_stream_1_V_din,
        if_full_n => img_6_data_stream_1_full_n,
        if_write => img_6_data_stream_1_write,
        if_dout => img_6_data_stream_1_dout,
        if_empty_n => img_6_data_stream_1_empty_n,
        if_read => img_6_data_stream_1_read);

    img_6_data_stream_2_fifo_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_CvtColor_fu_689_p_dst_data_stream_2_V_din,
        if_full_n => img_6_data_stream_2_full_n,
        if_write => img_6_data_stream_2_write,
        if_dout => img_6_data_stream_2_dout,
        if_empty_n => img_6_data_stream_2_empty_n,
        if_read => img_6_data_stream_2_read);





    OUTPUT_STREAM_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_data_V_1_sel_rd <= not(OUTPUT_STREAM_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_data_V_1_sel_wr <= not(OUTPUT_STREAM_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_out)))) then 
                    OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_data_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_V_data_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_V_data_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_dest_V_1_sel_rd <= not(OUTPUT_STREAM_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_dest_V_1_sel_wr <= not(OUTPUT_STREAM_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_out)))) then 
                    OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_dest_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_V_dest_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_V_dest_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_id_V_1_sel_rd <= not(OUTPUT_STREAM_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_id_V_1_sel_wr <= not(OUTPUT_STREAM_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_out)))) then 
                    OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_id_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_V_id_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_V_id_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_keep_V_1_sel_rd <= not(OUTPUT_STREAM_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_keep_V_1_sel_wr <= not(OUTPUT_STREAM_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_out)))) then 
                    OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_keep_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_V_keep_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_V_keep_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_last_V_1_sel_rd <= not(OUTPUT_STREAM_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_last_V_1_sel_wr <= not(OUTPUT_STREAM_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_out)))) then 
                    OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_last_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_V_last_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_V_last_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_strb_V_1_sel_rd <= not(OUTPUT_STREAM_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_strb_V_1_sel_wr <= not(OUTPUT_STREAM_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_out)))) then 
                    OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_strb_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_V_strb_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_V_strb_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_out))) then 
                                        OUTPUT_STREAM_V_user_V_1_sel_rd <= not(OUTPUT_STREAM_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_in))) then 
                                        OUTPUT_STREAM_V_user_V_1_sel_wr <= not(OUTPUT_STREAM_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_out)))) then 
                    OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_V_user_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_V_user_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_V_user_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_vld_in)))) then 
                    OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_AddWeighted_fu_596_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AddWeighted_fu_596_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_AddWeighted_fu_596_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddWeighted_fu_596_ap_ready = ap_const_logic_1)) then 
                    grp_AddWeighted_fu_596_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_CvtColor_1_fu_639_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_CvtColor_1_fu_639_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = Enabled_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_lv1_0 = Enabled_V_read_read_fu_590_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_CvtColor_1_fu_639_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_CvtColor_1_fu_639_ap_ready = ap_const_logic_1)) then 
                    grp_CvtColor_1_fu_639_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_CvtColor_fu_689_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_CvtColor_fu_689_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_CvtColor_fu_689_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_CvtColor_fu_689_ap_ready = ap_const_logic_1)) then 
                    grp_CvtColor_fu_689_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Duplicate_fu_676_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Duplicate_fu_676_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_Duplicate_fu_676_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Duplicate_fu_676_ap_ready = ap_const_logic_1)) then 
                    grp_Duplicate_fu_676_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_GaussianBlur_fu_629_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_GaussianBlur_fu_629_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_GaussianBlur_fu_629_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_GaussianBlur_fu_629_ap_ready = ap_const_logic_1)) then 
                    grp_GaussianBlur_fu_629_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Mat2AXIvideo_fu_652_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Mat2AXIvideo_fu_652_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or (not(((ap_const_logic_0 = Enabled_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_lv1_1 = Enabled_V_read_read_fu_590_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_Mat2AXIvideo_fu_652_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Mat2AXIvideo_fu_652_ap_ready = ap_const_logic_1)) then 
                    grp_Mat2AXIvideo_fu_652_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Sobel_1_fu_619_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Sobel_1_fu_619_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_Sobel_1_fu_619_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Sobel_1_fu_619_ap_ready = ap_const_logic_1)) then 
                    grp_Sobel_1_fu_619_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Sobel_fu_609_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Sobel_fu_609_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_Sobel_fu_609_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Sobel_fu_609_ap_ready = ap_const_logic_1)) then 
                    grp_Sobel_fu_609_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_load_A)) then
                OUTPUT_STREAM_V_data_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_load_B)) then
                OUTPUT_STREAM_V_data_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_load_A)) then
                OUTPUT_STREAM_V_dest_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_load_B)) then
                OUTPUT_STREAM_V_dest_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_load_A)) then
                OUTPUT_STREAM_V_id_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_load_B)) then
                OUTPUT_STREAM_V_id_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_load_A)) then
                OUTPUT_STREAM_V_keep_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_load_B)) then
                OUTPUT_STREAM_V_keep_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_load_A)) then
                OUTPUT_STREAM_V_last_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_load_B)) then
                OUTPUT_STREAM_V_last_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_load_A)) then
                OUTPUT_STREAM_V_strb_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_load_B)) then
                OUTPUT_STREAM_V_strb_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_load_A)) then
                OUTPUT_STREAM_V_user_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_load_B)) then
                OUTPUT_STREAM_V_user_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, Enabled_V_empty_n, OUTPUT_STREAM_V_data_V_1_ack_in, OUTPUT_STREAM_V_keep_V_1_ack_in, OUTPUT_STREAM_V_strb_V_1_ack_in, OUTPUT_STREAM_V_user_V_1_ack_in, OUTPUT_STREAM_V_last_V_1_ack_in, OUTPUT_STREAM_V_id_V_1_ack_in, OUTPUT_STREAM_V_dest_V_1_ack_in, grp_AddWeighted_fu_596_ap_done, grp_GaussianBlur_fu_629_ap_done, grp_CvtColor_1_fu_639_ap_done, grp_Mat2AXIvideo_fu_652_ap_done, grp_Duplicate_fu_676_ap_done, grp_CvtColor_fu_689_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state4, Enabled_V_read_read_fu_590_p2, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = Enabled_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_lv1_1 = Enabled_V_read_read_fu_590_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif ((not(((ap_const_logic_0 = Enabled_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_lv1_0 = Enabled_V_read_read_fu_590_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_CvtColor_1_fu_639_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_GaussianBlur_fu_629_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_Duplicate_fu_676_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_AddWeighted_fu_596_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_CvtColor_fu_689_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_Mat2AXIvideo_fu_652_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((grp_Mat2AXIvideo_fu_652_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    Enabled_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, Enabled_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Enabled_V_blk_n <= Enabled_V_empty_n;
        else 
            Enabled_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Enabled_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, Enabled_V_empty_n)
    begin
        if ((not(((ap_const_logic_0 = Enabled_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Enabled_V_read <= ap_const_logic_1;
        else 
            Enabled_V_read <= ap_const_logic_0;
        end if; 
    end process;

    Enabled_V_read_read_fu_590_p2 <= Enabled_V_dout;
    OUTPUT_STREAM_TDATA <= OUTPUT_STREAM_V_data_V_1_data_out;
    OUTPUT_STREAM_TDEST <= OUTPUT_STREAM_V_dest_V_1_data_out;
    OUTPUT_STREAM_TID <= OUTPUT_STREAM_V_id_V_1_data_out;
    OUTPUT_STREAM_TKEEP <= OUTPUT_STREAM_V_keep_V_1_data_out;
    OUTPUT_STREAM_TLAST <= OUTPUT_STREAM_V_last_V_1_data_out;
    OUTPUT_STREAM_TSTRB <= OUTPUT_STREAM_V_strb_V_1_data_out;
    OUTPUT_STREAM_TUSER <= OUTPUT_STREAM_V_user_V_1_data_out;
    OUTPUT_STREAM_TVALID <= OUTPUT_STREAM_V_dest_V_1_state(0);
    OUTPUT_STREAM_V_data_V_1_ack_in <= OUTPUT_STREAM_V_data_V_1_state(1);
    OUTPUT_STREAM_V_data_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_data_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_data_V_1_payload_A, OUTPUT_STREAM_V_data_V_1_payload_B, OUTPUT_STREAM_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_data_V_1_sel)) then 
            OUTPUT_STREAM_V_data_V_1_data_out <= OUTPUT_STREAM_V_data_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_data_V_1_data_out <= OUTPUT_STREAM_V_data_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_data_V_1_load_A <= (not(OUTPUT_STREAM_V_data_V_1_sel_wr) and OUTPUT_STREAM_V_data_V_1_state_cmp_full);
    OUTPUT_STREAM_V_data_V_1_load_B <= (OUTPUT_STREAM_V_data_V_1_state_cmp_full and OUTPUT_STREAM_V_data_V_1_sel_wr);
    OUTPUT_STREAM_V_data_V_1_sel <= OUTPUT_STREAM_V_data_V_1_sel_rd;
    OUTPUT_STREAM_V_data_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_data_V_1_vld_in_assign_proc : process(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            OUTPUT_STREAM_V_data_V_1_vld_in <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
        else 
            OUTPUT_STREAM_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_data_V_1_vld_out <= OUTPUT_STREAM_V_data_V_1_state(0);
    OUTPUT_STREAM_V_dest_V_1_ack_in <= OUTPUT_STREAM_V_dest_V_1_state(1);
    OUTPUT_STREAM_V_dest_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_dest_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_dest_V_1_payload_A, OUTPUT_STREAM_V_dest_V_1_payload_B, OUTPUT_STREAM_V_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_dest_V_1_sel)) then 
            OUTPUT_STREAM_V_dest_V_1_data_out <= OUTPUT_STREAM_V_dest_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_dest_V_1_data_out <= OUTPUT_STREAM_V_dest_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_dest_V_1_load_A <= (not(OUTPUT_STREAM_V_dest_V_1_sel_wr) and OUTPUT_STREAM_V_dest_V_1_state_cmp_full);
    OUTPUT_STREAM_V_dest_V_1_load_B <= (OUTPUT_STREAM_V_dest_V_1_state_cmp_full and OUTPUT_STREAM_V_dest_V_1_sel_wr);
    OUTPUT_STREAM_V_dest_V_1_sel <= OUTPUT_STREAM_V_dest_V_1_sel_rd;
    OUTPUT_STREAM_V_dest_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_dest_V_1_vld_in_assign_proc : process(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            OUTPUT_STREAM_V_dest_V_1_vld_in <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
        else 
            OUTPUT_STREAM_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_dest_V_1_vld_out <= OUTPUT_STREAM_V_dest_V_1_state(0);
    OUTPUT_STREAM_V_id_V_1_ack_in <= OUTPUT_STREAM_V_id_V_1_state(1);
    OUTPUT_STREAM_V_id_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_id_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_id_V_1_payload_A, OUTPUT_STREAM_V_id_V_1_payload_B, OUTPUT_STREAM_V_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_id_V_1_sel)) then 
            OUTPUT_STREAM_V_id_V_1_data_out <= OUTPUT_STREAM_V_id_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_id_V_1_data_out <= OUTPUT_STREAM_V_id_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_id_V_1_load_A <= (not(OUTPUT_STREAM_V_id_V_1_sel_wr) and OUTPUT_STREAM_V_id_V_1_state_cmp_full);
    OUTPUT_STREAM_V_id_V_1_load_B <= (OUTPUT_STREAM_V_id_V_1_state_cmp_full and OUTPUT_STREAM_V_id_V_1_sel_wr);
    OUTPUT_STREAM_V_id_V_1_sel <= OUTPUT_STREAM_V_id_V_1_sel_rd;
    OUTPUT_STREAM_V_id_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_id_V_1_vld_in_assign_proc : process(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            OUTPUT_STREAM_V_id_V_1_vld_in <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
        else 
            OUTPUT_STREAM_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_id_V_1_vld_out <= OUTPUT_STREAM_V_id_V_1_state(0);
    OUTPUT_STREAM_V_keep_V_1_ack_in <= OUTPUT_STREAM_V_keep_V_1_state(1);
    OUTPUT_STREAM_V_keep_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_keep_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_keep_V_1_payload_A, OUTPUT_STREAM_V_keep_V_1_payload_B, OUTPUT_STREAM_V_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_keep_V_1_sel)) then 
            OUTPUT_STREAM_V_keep_V_1_data_out <= OUTPUT_STREAM_V_keep_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_keep_V_1_data_out <= OUTPUT_STREAM_V_keep_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_keep_V_1_load_A <= (not(OUTPUT_STREAM_V_keep_V_1_sel_wr) and OUTPUT_STREAM_V_keep_V_1_state_cmp_full);
    OUTPUT_STREAM_V_keep_V_1_load_B <= (OUTPUT_STREAM_V_keep_V_1_state_cmp_full and OUTPUT_STREAM_V_keep_V_1_sel_wr);
    OUTPUT_STREAM_V_keep_V_1_sel <= OUTPUT_STREAM_V_keep_V_1_sel_rd;
    OUTPUT_STREAM_V_keep_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_keep_V_1_vld_in_assign_proc : process(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            OUTPUT_STREAM_V_keep_V_1_vld_in <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
        else 
            OUTPUT_STREAM_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_keep_V_1_vld_out <= OUTPUT_STREAM_V_keep_V_1_state(0);
    OUTPUT_STREAM_V_last_V_1_ack_in <= OUTPUT_STREAM_V_last_V_1_state(1);
    OUTPUT_STREAM_V_last_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_last_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_last_V_1_payload_A, OUTPUT_STREAM_V_last_V_1_payload_B, OUTPUT_STREAM_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_last_V_1_sel)) then 
            OUTPUT_STREAM_V_last_V_1_data_out <= OUTPUT_STREAM_V_last_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_last_V_1_data_out <= OUTPUT_STREAM_V_last_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_last_V_1_load_A <= (not(OUTPUT_STREAM_V_last_V_1_sel_wr) and OUTPUT_STREAM_V_last_V_1_state_cmp_full);
    OUTPUT_STREAM_V_last_V_1_load_B <= (OUTPUT_STREAM_V_last_V_1_state_cmp_full and OUTPUT_STREAM_V_last_V_1_sel_wr);
    OUTPUT_STREAM_V_last_V_1_sel <= OUTPUT_STREAM_V_last_V_1_sel_rd;
    OUTPUT_STREAM_V_last_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_last_V_1_vld_in_assign_proc : process(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            OUTPUT_STREAM_V_last_V_1_vld_in <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
        else 
            OUTPUT_STREAM_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_last_V_1_vld_out <= OUTPUT_STREAM_V_last_V_1_state(0);
    OUTPUT_STREAM_V_strb_V_1_ack_in <= OUTPUT_STREAM_V_strb_V_1_state(1);
    OUTPUT_STREAM_V_strb_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_strb_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_strb_V_1_payload_A, OUTPUT_STREAM_V_strb_V_1_payload_B, OUTPUT_STREAM_V_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_strb_V_1_sel)) then 
            OUTPUT_STREAM_V_strb_V_1_data_out <= OUTPUT_STREAM_V_strb_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_strb_V_1_data_out <= OUTPUT_STREAM_V_strb_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_strb_V_1_load_A <= (not(OUTPUT_STREAM_V_strb_V_1_sel_wr) and OUTPUT_STREAM_V_strb_V_1_state_cmp_full);
    OUTPUT_STREAM_V_strb_V_1_load_B <= (OUTPUT_STREAM_V_strb_V_1_state_cmp_full and OUTPUT_STREAM_V_strb_V_1_sel_wr);
    OUTPUT_STREAM_V_strb_V_1_sel <= OUTPUT_STREAM_V_strb_V_1_sel_rd;
    OUTPUT_STREAM_V_strb_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_strb_V_1_vld_in_assign_proc : process(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            OUTPUT_STREAM_V_strb_V_1_vld_in <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
        else 
            OUTPUT_STREAM_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_strb_V_1_vld_out <= OUTPUT_STREAM_V_strb_V_1_state(0);
    OUTPUT_STREAM_V_user_V_1_ack_in <= OUTPUT_STREAM_V_user_V_1_state(1);
    OUTPUT_STREAM_V_user_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_V_user_V_1_data_out_assign_proc : process(OUTPUT_STREAM_V_user_V_1_payload_A, OUTPUT_STREAM_V_user_V_1_payload_B, OUTPUT_STREAM_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_V_user_V_1_sel)) then 
            OUTPUT_STREAM_V_user_V_1_data_out <= OUTPUT_STREAM_V_user_V_1_payload_B;
        else 
            OUTPUT_STREAM_V_user_V_1_data_out <= OUTPUT_STREAM_V_user_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_V_user_V_1_load_A <= (not(OUTPUT_STREAM_V_user_V_1_sel_wr) and OUTPUT_STREAM_V_user_V_1_state_cmp_full);
    OUTPUT_STREAM_V_user_V_1_load_B <= (OUTPUT_STREAM_V_user_V_1_state_cmp_full and OUTPUT_STREAM_V_user_V_1_sel_wr);
    OUTPUT_STREAM_V_user_V_1_sel <= OUTPUT_STREAM_V_user_V_1_sel_rd;
    OUTPUT_STREAM_V_user_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_V_user_V_1_vld_in_assign_proc : process(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            OUTPUT_STREAM_V_user_V_1_vld_in <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
        else 
            OUTPUT_STREAM_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_V_user_V_1_vld_out <= OUTPUT_STREAM_V_user_V_1_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, Enabled_V_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = Enabled_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state16_assign_proc : process(OUTPUT_STREAM_V_data_V_1_ack_in, OUTPUT_STREAM_V_keep_V_1_ack_in, OUTPUT_STREAM_V_strb_V_1_ack_in, OUTPUT_STREAM_V_user_V_1_ack_in, OUTPUT_STREAM_V_last_V_1_ack_in, OUTPUT_STREAM_V_id_V_1_ack_in, OUTPUT_STREAM_V_dest_V_1_ack_in)
    begin
                ap_block_state16 <= ((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in));
    end process;


    ap_block_state1_ignore_call0_assign_proc : process(ap_start, ap_done_reg, Enabled_V_empty_n)
    begin
                ap_block_state1_ignore_call0 <= ((ap_const_logic_0 = Enabled_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(grp_Sobel_fu_609_ap_done, grp_Sobel_1_fu_619_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_Sobel_1_fu_619_ap_done = ap_const_logic_0) or (grp_Sobel_fu_609_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, OUTPUT_STREAM_V_data_V_1_ack_in, OUTPUT_STREAM_V_keep_V_1_ack_in, OUTPUT_STREAM_V_strb_V_1_ack_in, OUTPUT_STREAM_V_user_V_1_ack_in, OUTPUT_STREAM_V_last_V_1_ack_in, OUTPUT_STREAM_V_id_V_1_ack_in, OUTPUT_STREAM_V_dest_V_1_ack_in, ap_CS_fsm_state16)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(OUTPUT_STREAM_V_data_V_1_ack_in, OUTPUT_STREAM_V_keep_V_1_ack_in, OUTPUT_STREAM_V_strb_V_1_ack_in, OUTPUT_STREAM_V_user_V_1_ack_in, OUTPUT_STREAM_V_last_V_1_ack_in, OUTPUT_STREAM_V_id_V_1_ack_in, OUTPUT_STREAM_V_dest_V_1_ack_in, ap_CS_fsm_state16)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_STREAM_V_data_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_V_keep_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_AddWeighted_fu_596_ap_start <= grp_AddWeighted_fu_596_ap_start_reg;
    grp_CvtColor_1_fu_639_ap_start <= grp_CvtColor_1_fu_639_ap_start_reg;
    grp_CvtColor_fu_689_ap_start <= grp_CvtColor_fu_689_ap_start_reg;
    grp_Duplicate_fu_676_ap_start <= grp_Duplicate_fu_676_ap_start_reg;
    grp_GaussianBlur_fu_629_ap_start <= grp_GaussianBlur_fu_629_ap_start_reg;
    grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TREADY <= OUTPUT_STREAM_V_dest_V_1_state(1);
    grp_Mat2AXIvideo_fu_652_ap_start <= grp_Mat2AXIvideo_fu_652_ap_start_reg;

    grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout_assign_proc : process(img_0_data_stream_0_V_dout, ap_CS_fsm_state15, img_6_data_stream_0_dout, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout <= img_6_data_stream_0_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout <= img_0_data_stream_0_V_dout;
        else 
            grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout <= img_6_data_stream_0_dout;
        end if; 
    end process;


    grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n_assign_proc : process(img_0_data_stream_0_V_empty_n, ap_CS_fsm_state15, img_6_data_stream_0_empty_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n <= img_6_data_stream_0_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n <= img_0_data_stream_0_V_empty_n;
        else 
            grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n <= img_6_data_stream_0_empty_n;
        end if; 
    end process;


    grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout_assign_proc : process(img_0_data_stream_1_V_dout, ap_CS_fsm_state15, ap_CS_fsm_state14, img_6_data_stream_1_dout)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout <= img_6_data_stream_1_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout <= img_0_data_stream_1_V_dout;
        else 
            grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout <= img_6_data_stream_1_dout;
        end if; 
    end process;


    grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n_assign_proc : process(img_0_data_stream_1_V_empty_n, ap_CS_fsm_state15, ap_CS_fsm_state14, img_6_data_stream_1_empty_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n <= img_6_data_stream_1_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n <= img_0_data_stream_1_V_empty_n;
        else 
            grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n <= img_6_data_stream_1_empty_n;
        end if; 
    end process;


    grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout_assign_proc : process(img_0_data_stream_2_V_dout, ap_CS_fsm_state15, ap_CS_fsm_state14, img_6_data_stream_2_dout)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout <= img_6_data_stream_2_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout <= img_0_data_stream_2_V_dout;
        else 
            grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout <= img_6_data_stream_2_dout;
        end if; 
    end process;


    grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n_assign_proc : process(img_0_data_stream_2_V_empty_n, ap_CS_fsm_state15, ap_CS_fsm_state14, img_6_data_stream_2_empty_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n <= img_6_data_stream_2_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n <= img_0_data_stream_2_V_empty_n;
        else 
            grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n <= img_6_data_stream_2_empty_n;
        end if; 
    end process;

    grp_Sobel_1_fu_619_ap_start <= grp_Sobel_1_fu_619_ap_start_reg;
    grp_Sobel_fu_609_ap_start <= grp_Sobel_fu_609_ap_start_reg;

    img_0_data_stream_0_V_read_assign_proc : process(grp_CvtColor_1_fu_639_p_src_data_stream_0_V_read, grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read, ap_CS_fsm_state2, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            img_0_data_stream_0_V_read <= grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_0_data_stream_0_V_read <= grp_CvtColor_1_fu_639_p_src_data_stream_0_V_read;
        else 
            img_0_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_1_V_read_assign_proc : process(grp_CvtColor_1_fu_639_p_src_data_stream_1_V_read, grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read, ap_CS_fsm_state2, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            img_0_data_stream_1_V_read <= grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_0_data_stream_1_V_read <= grp_CvtColor_1_fu_639_p_src_data_stream_1_V_read;
        else 
            img_0_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_2_V_read_assign_proc : process(grp_CvtColor_1_fu_639_p_src_data_stream_2_V_read, grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read, ap_CS_fsm_state2, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            img_0_data_stream_2_V_read <= grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_0_data_stream_2_V_read <= grp_CvtColor_1_fu_639_p_src_data_stream_2_V_read;
        else 
            img_0_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_0_read_assign_proc : process(grp_GaussianBlur_fu_629_p_src_data_stream_0_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_1_data_stream_0_read <= grp_GaussianBlur_fu_629_p_src_data_stream_0_V_read;
        else 
            img_1_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_0_write_assign_proc : process(grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_1_data_stream_0_write <= grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_write;
        else 
            img_1_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_1_read_assign_proc : process(grp_GaussianBlur_fu_629_p_src_data_stream_1_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_1_data_stream_1_read <= grp_GaussianBlur_fu_629_p_src_data_stream_1_V_read;
        else 
            img_1_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_1_write_assign_proc : process(grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_1_data_stream_1_write <= grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_write;
        else 
            img_1_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_2_read_assign_proc : process(grp_GaussianBlur_fu_629_p_src_data_stream_2_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_1_data_stream_2_read <= grp_GaussianBlur_fu_629_p_src_data_stream_2_V_read;
        else 
            img_1_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_2_write_assign_proc : process(grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_1_data_stream_2_write <= grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_write;
        else 
            img_1_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2_data_stream_0_read_assign_proc : process(grp_Duplicate_fu_676_src_data_stream_0_V_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_2_data_stream_0_read <= grp_Duplicate_fu_676_src_data_stream_0_V_read;
        else 
            img_2_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2_data_stream_0_write_assign_proc : process(grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_2_data_stream_0_write <= grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_write;
        else 
            img_2_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2_data_stream_1_read_assign_proc : process(grp_Duplicate_fu_676_src_data_stream_1_V_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_2_data_stream_1_read <= grp_Duplicate_fu_676_src_data_stream_1_V_read;
        else 
            img_2_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2_data_stream_1_write_assign_proc : process(grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_2_data_stream_1_write <= grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_write;
        else 
            img_2_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2_data_stream_2_read_assign_proc : process(grp_Duplicate_fu_676_src_data_stream_2_V_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_2_data_stream_2_read <= grp_Duplicate_fu_676_src_data_stream_2_V_read;
        else 
            img_2_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2_data_stream_2_write_assign_proc : process(grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_2_data_stream_2_write <= grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_write;
        else 
            img_2_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2a_data_stream_0_read_assign_proc : process(grp_Sobel_fu_609_p_src_data_stream_0_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_2a_data_stream_0_read <= grp_Sobel_fu_609_p_src_data_stream_0_V_read;
        else 
            img_2a_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2a_data_stream_0_write_assign_proc : process(grp_Duplicate_fu_676_dst1_data_stream_0_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_2a_data_stream_0_write <= grp_Duplicate_fu_676_dst1_data_stream_0_V_write;
        else 
            img_2a_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2a_data_stream_1_read_assign_proc : process(grp_Sobel_fu_609_p_src_data_stream_1_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_2a_data_stream_1_read <= grp_Sobel_fu_609_p_src_data_stream_1_V_read;
        else 
            img_2a_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2a_data_stream_1_write_assign_proc : process(grp_Duplicate_fu_676_dst1_data_stream_1_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_2a_data_stream_1_write <= grp_Duplicate_fu_676_dst1_data_stream_1_V_write;
        else 
            img_2a_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2a_data_stream_2_read_assign_proc : process(grp_Sobel_fu_609_p_src_data_stream_2_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_2a_data_stream_2_read <= grp_Sobel_fu_609_p_src_data_stream_2_V_read;
        else 
            img_2a_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2a_data_stream_2_write_assign_proc : process(grp_Duplicate_fu_676_dst1_data_stream_2_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_2a_data_stream_2_write <= grp_Duplicate_fu_676_dst1_data_stream_2_V_write;
        else 
            img_2a_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2b_data_stream_0_read_assign_proc : process(grp_Sobel_1_fu_619_p_src_data_stream_0_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_2b_data_stream_0_read <= grp_Sobel_1_fu_619_p_src_data_stream_0_V_read;
        else 
            img_2b_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2b_data_stream_0_write_assign_proc : process(grp_Duplicate_fu_676_dst2_data_stream_0_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_2b_data_stream_0_write <= grp_Duplicate_fu_676_dst2_data_stream_0_V_write;
        else 
            img_2b_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2b_data_stream_1_read_assign_proc : process(grp_Sobel_1_fu_619_p_src_data_stream_1_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_2b_data_stream_1_read <= grp_Sobel_1_fu_619_p_src_data_stream_1_V_read;
        else 
            img_2b_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2b_data_stream_1_write_assign_proc : process(grp_Duplicate_fu_676_dst2_data_stream_1_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_2b_data_stream_1_write <= grp_Duplicate_fu_676_dst2_data_stream_1_V_write;
        else 
            img_2b_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    img_2b_data_stream_2_read_assign_proc : process(grp_Sobel_1_fu_619_p_src_data_stream_2_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_2b_data_stream_2_read <= grp_Sobel_1_fu_619_p_src_data_stream_2_V_read;
        else 
            img_2b_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_2b_data_stream_2_write_assign_proc : process(grp_Duplicate_fu_676_dst2_data_stream_2_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_2b_data_stream_2_write <= grp_Duplicate_fu_676_dst2_data_stream_2_V_write;
        else 
            img_2b_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;


    img_3_data_stream_0_read_assign_proc : process(grp_AddWeighted_fu_596_src2_data_stream_0_V_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_3_data_stream_0_read <= grp_AddWeighted_fu_596_src2_data_stream_0_V_read;
        else 
            img_3_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_3_data_stream_0_write_assign_proc : process(grp_Sobel_fu_609_p_dst_data_stream_0_V_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_3_data_stream_0_write <= grp_Sobel_fu_609_p_dst_data_stream_0_V_write;
        else 
            img_3_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    img_3_data_stream_1_read_assign_proc : process(grp_AddWeighted_fu_596_src2_data_stream_1_V_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_3_data_stream_1_read <= grp_AddWeighted_fu_596_src2_data_stream_1_V_read;
        else 
            img_3_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_3_data_stream_1_write_assign_proc : process(grp_Sobel_fu_609_p_dst_data_stream_1_V_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_3_data_stream_1_write <= grp_Sobel_fu_609_p_dst_data_stream_1_V_write;
        else 
            img_3_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    img_3_data_stream_2_read_assign_proc : process(grp_AddWeighted_fu_596_src2_data_stream_2_V_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_3_data_stream_2_read <= grp_AddWeighted_fu_596_src2_data_stream_2_V_read;
        else 
            img_3_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_3_data_stream_2_write_assign_proc : process(grp_Sobel_fu_609_p_dst_data_stream_2_V_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_3_data_stream_2_write <= grp_Sobel_fu_609_p_dst_data_stream_2_V_write;
        else 
            img_3_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;


    img_4_data_stream_0_read_assign_proc : process(grp_AddWeighted_fu_596_src1_data_stream_0_V_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_4_data_stream_0_read <= grp_AddWeighted_fu_596_src1_data_stream_0_V_read;
        else 
            img_4_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_4_data_stream_0_write_assign_proc : process(grp_Sobel_1_fu_619_p_dst_data_stream_0_V_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_4_data_stream_0_write <= grp_Sobel_1_fu_619_p_dst_data_stream_0_V_write;
        else 
            img_4_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    img_4_data_stream_1_read_assign_proc : process(grp_AddWeighted_fu_596_src1_data_stream_1_V_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_4_data_stream_1_read <= grp_AddWeighted_fu_596_src1_data_stream_1_V_read;
        else 
            img_4_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_4_data_stream_1_write_assign_proc : process(grp_Sobel_1_fu_619_p_dst_data_stream_1_V_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_4_data_stream_1_write <= grp_Sobel_1_fu_619_p_dst_data_stream_1_V_write;
        else 
            img_4_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    img_4_data_stream_2_read_assign_proc : process(grp_AddWeighted_fu_596_src1_data_stream_2_V_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_4_data_stream_2_read <= grp_AddWeighted_fu_596_src1_data_stream_2_V_read;
        else 
            img_4_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_4_data_stream_2_write_assign_proc : process(grp_Sobel_1_fu_619_p_dst_data_stream_2_V_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_4_data_stream_2_write <= grp_Sobel_1_fu_619_p_dst_data_stream_2_V_write;
        else 
            img_4_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;


    img_5_data_stream_0_read_assign_proc : process(grp_CvtColor_fu_689_p_src_data_stream_0_V_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_5_data_stream_0_read <= grp_CvtColor_fu_689_p_src_data_stream_0_V_read;
        else 
            img_5_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_5_data_stream_0_write_assign_proc : process(grp_AddWeighted_fu_596_dst_data_stream_0_V_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_5_data_stream_0_write <= grp_AddWeighted_fu_596_dst_data_stream_0_V_write;
        else 
            img_5_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    img_5_data_stream_1_read_assign_proc : process(grp_CvtColor_fu_689_p_src_data_stream_1_V_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_5_data_stream_1_read <= grp_CvtColor_fu_689_p_src_data_stream_1_V_read;
        else 
            img_5_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_5_data_stream_1_write_assign_proc : process(grp_AddWeighted_fu_596_dst_data_stream_1_V_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_5_data_stream_1_write <= grp_AddWeighted_fu_596_dst_data_stream_1_V_write;
        else 
            img_5_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    img_5_data_stream_2_read_assign_proc : process(grp_CvtColor_fu_689_p_src_data_stream_2_V_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_5_data_stream_2_read <= grp_CvtColor_fu_689_p_src_data_stream_2_V_read;
        else 
            img_5_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_5_data_stream_2_write_assign_proc : process(grp_AddWeighted_fu_596_dst_data_stream_2_V_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_5_data_stream_2_write <= grp_AddWeighted_fu_596_dst_data_stream_2_V_write;
        else 
            img_5_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;


    img_6_data_stream_0_read_assign_proc : process(grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            img_6_data_stream_0_read <= grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read;
        else 
            img_6_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_6_data_stream_0_write_assign_proc : process(grp_CvtColor_fu_689_p_dst_data_stream_0_V_write, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_6_data_stream_0_write <= grp_CvtColor_fu_689_p_dst_data_stream_0_V_write;
        else 
            img_6_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    img_6_data_stream_1_read_assign_proc : process(grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            img_6_data_stream_1_read <= grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read;
        else 
            img_6_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_6_data_stream_1_write_assign_proc : process(grp_CvtColor_fu_689_p_dst_data_stream_1_V_write, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_6_data_stream_1_write <= grp_CvtColor_fu_689_p_dst_data_stream_1_V_write;
        else 
            img_6_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    img_6_data_stream_2_read_assign_proc : process(grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            img_6_data_stream_2_read <= grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read;
        else 
            img_6_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_6_data_stream_2_write_assign_proc : process(grp_CvtColor_fu_689_p_dst_data_stream_2_V_write, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_6_data_stream_2_write <= grp_CvtColor_fu_689_p_dst_data_stream_2_V_write;
        else 
            img_6_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
