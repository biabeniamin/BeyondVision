// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc307309 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Enabled_V_dout,
        Enabled_V_empty_n,
        Enabled_V_read,
        img_0_data_stream_0_V_dout,
        img_0_data_stream_0_V_empty_n,
        img_0_data_stream_0_V_read,
        img_0_data_stream_1_V_dout,
        img_0_data_stream_1_V_empty_n,
        img_0_data_stream_1_V_read,
        img_0_data_stream_2_V_dout,
        img_0_data_stream_2_V_empty_n,
        img_0_data_stream_2_V_read,
        OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] Enabled_V_dout;
input   Enabled_V_empty_n;
output   Enabled_V_read;
input  [7:0] img_0_data_stream_0_V_dout;
input   img_0_data_stream_0_V_empty_n;
output   img_0_data_stream_0_V_read;
input  [7:0] img_0_data_stream_1_V_dout;
input   img_0_data_stream_1_V_empty_n;
output   img_0_data_stream_1_V_read;
input  [7:0] img_0_data_stream_2_V_dout;
input   img_0_data_stream_2_V_empty_n;
output   img_0_data_stream_2_V_read;
output  [23:0] OUTPUT_STREAM_TDATA;
output   OUTPUT_STREAM_TVALID;
input   OUTPUT_STREAM_TREADY;
output  [2:0] OUTPUT_STREAM_TKEEP;
output  [2:0] OUTPUT_STREAM_TSTRB;
output  [0:0] OUTPUT_STREAM_TUSER;
output  [0:0] OUTPUT_STREAM_TLAST;
output  [0:0] OUTPUT_STREAM_TID;
output  [0:0] OUTPUT_STREAM_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Enabled_V_read;
reg img_0_data_stream_0_V_read;
reg img_0_data_stream_1_V_read;
reg img_0_data_stream_2_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] OUTPUT_STREAM_V_data_V_1_data_out;
reg    OUTPUT_STREAM_V_data_V_1_vld_in;
wire    OUTPUT_STREAM_V_data_V_1_vld_out;
wire    OUTPUT_STREAM_V_data_V_1_ack_in;
wire    OUTPUT_STREAM_V_data_V_1_ack_out;
reg   [23:0] OUTPUT_STREAM_V_data_V_1_payload_A;
reg   [23:0] OUTPUT_STREAM_V_data_V_1_payload_B;
reg    OUTPUT_STREAM_V_data_V_1_sel_rd;
reg    OUTPUT_STREAM_V_data_V_1_sel_wr;
wire    OUTPUT_STREAM_V_data_V_1_sel;
wire    OUTPUT_STREAM_V_data_V_1_load_A;
wire    OUTPUT_STREAM_V_data_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_data_V_1_state;
wire    OUTPUT_STREAM_V_data_V_1_state_cmp_full;
reg   [2:0] OUTPUT_STREAM_V_keep_V_1_data_out;
reg    OUTPUT_STREAM_V_keep_V_1_vld_in;
wire    OUTPUT_STREAM_V_keep_V_1_vld_out;
wire    OUTPUT_STREAM_V_keep_V_1_ack_in;
wire    OUTPUT_STREAM_V_keep_V_1_ack_out;
reg   [2:0] OUTPUT_STREAM_V_keep_V_1_payload_A;
reg   [2:0] OUTPUT_STREAM_V_keep_V_1_payload_B;
reg    OUTPUT_STREAM_V_keep_V_1_sel_rd;
reg    OUTPUT_STREAM_V_keep_V_1_sel_wr;
wire    OUTPUT_STREAM_V_keep_V_1_sel;
wire    OUTPUT_STREAM_V_keep_V_1_load_A;
wire    OUTPUT_STREAM_V_keep_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_keep_V_1_state;
wire    OUTPUT_STREAM_V_keep_V_1_state_cmp_full;
reg   [2:0] OUTPUT_STREAM_V_strb_V_1_data_out;
reg    OUTPUT_STREAM_V_strb_V_1_vld_in;
wire    OUTPUT_STREAM_V_strb_V_1_vld_out;
wire    OUTPUT_STREAM_V_strb_V_1_ack_in;
wire    OUTPUT_STREAM_V_strb_V_1_ack_out;
reg   [2:0] OUTPUT_STREAM_V_strb_V_1_payload_A;
reg   [2:0] OUTPUT_STREAM_V_strb_V_1_payload_B;
reg    OUTPUT_STREAM_V_strb_V_1_sel_rd;
reg    OUTPUT_STREAM_V_strb_V_1_sel_wr;
wire    OUTPUT_STREAM_V_strb_V_1_sel;
wire    OUTPUT_STREAM_V_strb_V_1_load_A;
wire    OUTPUT_STREAM_V_strb_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_strb_V_1_state;
wire    OUTPUT_STREAM_V_strb_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_user_V_1_data_out;
reg    OUTPUT_STREAM_V_user_V_1_vld_in;
wire    OUTPUT_STREAM_V_user_V_1_vld_out;
wire    OUTPUT_STREAM_V_user_V_1_ack_in;
wire    OUTPUT_STREAM_V_user_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_user_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_user_V_1_payload_B;
reg    OUTPUT_STREAM_V_user_V_1_sel_rd;
reg    OUTPUT_STREAM_V_user_V_1_sel_wr;
wire    OUTPUT_STREAM_V_user_V_1_sel;
wire    OUTPUT_STREAM_V_user_V_1_load_A;
wire    OUTPUT_STREAM_V_user_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_user_V_1_state;
wire    OUTPUT_STREAM_V_user_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_data_out;
reg    OUTPUT_STREAM_V_last_V_1_vld_in;
wire    OUTPUT_STREAM_V_last_V_1_vld_out;
wire    OUTPUT_STREAM_V_last_V_1_ack_in;
wire    OUTPUT_STREAM_V_last_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_payload_B;
reg    OUTPUT_STREAM_V_last_V_1_sel_rd;
reg    OUTPUT_STREAM_V_last_V_1_sel_wr;
wire    OUTPUT_STREAM_V_last_V_1_sel;
wire    OUTPUT_STREAM_V_last_V_1_load_A;
wire    OUTPUT_STREAM_V_last_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_last_V_1_state;
wire    OUTPUT_STREAM_V_last_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_id_V_1_data_out;
reg    OUTPUT_STREAM_V_id_V_1_vld_in;
wire    OUTPUT_STREAM_V_id_V_1_vld_out;
wire    OUTPUT_STREAM_V_id_V_1_ack_in;
wire    OUTPUT_STREAM_V_id_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_id_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_id_V_1_payload_B;
reg    OUTPUT_STREAM_V_id_V_1_sel_rd;
reg    OUTPUT_STREAM_V_id_V_1_sel_wr;
wire    OUTPUT_STREAM_V_id_V_1_sel;
wire    OUTPUT_STREAM_V_id_V_1_load_A;
wire    OUTPUT_STREAM_V_id_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_id_V_1_state;
wire    OUTPUT_STREAM_V_id_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_dest_V_1_data_out;
reg    OUTPUT_STREAM_V_dest_V_1_vld_in;
wire    OUTPUT_STREAM_V_dest_V_1_vld_out;
wire    OUTPUT_STREAM_V_dest_V_1_ack_in;
wire    OUTPUT_STREAM_V_dest_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_dest_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_dest_V_1_payload_B;
reg    OUTPUT_STREAM_V_dest_V_1_sel_rd;
reg    OUTPUT_STREAM_V_dest_V_1_sel_wr;
wire    OUTPUT_STREAM_V_dest_V_1_sel;
wire    OUTPUT_STREAM_V_dest_V_1_load_A;
wire    OUTPUT_STREAM_V_dest_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_dest_V_1_state;
wire    OUTPUT_STREAM_V_dest_V_1_state_cmp_full;
reg    Enabled_V_blk_n;
wire    grp_AddWeighted_fu_596_ap_start;
wire    grp_AddWeighted_fu_596_ap_done;
wire    grp_AddWeighted_fu_596_ap_idle;
wire    grp_AddWeighted_fu_596_ap_ready;
wire    grp_AddWeighted_fu_596_src1_data_stream_0_V_read;
wire    grp_AddWeighted_fu_596_src1_data_stream_1_V_read;
wire    grp_AddWeighted_fu_596_src1_data_stream_2_V_read;
wire    grp_AddWeighted_fu_596_src2_data_stream_0_V_read;
wire    grp_AddWeighted_fu_596_src2_data_stream_1_V_read;
wire    grp_AddWeighted_fu_596_src2_data_stream_2_V_read;
wire   [7:0] grp_AddWeighted_fu_596_dst_data_stream_0_V_din;
wire    grp_AddWeighted_fu_596_dst_data_stream_0_V_write;
wire   [7:0] grp_AddWeighted_fu_596_dst_data_stream_1_V_din;
wire    grp_AddWeighted_fu_596_dst_data_stream_1_V_write;
wire   [7:0] grp_AddWeighted_fu_596_dst_data_stream_2_V_din;
wire    grp_AddWeighted_fu_596_dst_data_stream_2_V_write;
wire    grp_Sobel_fu_609_ap_start;
wire    grp_Sobel_fu_609_ap_done;
wire    grp_Sobel_fu_609_ap_idle;
wire    grp_Sobel_fu_609_ap_ready;
wire    grp_Sobel_fu_609_p_src_data_stream_0_V_read;
wire    grp_Sobel_fu_609_p_src_data_stream_1_V_read;
wire    grp_Sobel_fu_609_p_src_data_stream_2_V_read;
wire   [7:0] grp_Sobel_fu_609_p_dst_data_stream_0_V_din;
wire    grp_Sobel_fu_609_p_dst_data_stream_0_V_write;
wire   [7:0] grp_Sobel_fu_609_p_dst_data_stream_1_V_din;
wire    grp_Sobel_fu_609_p_dst_data_stream_1_V_write;
wire   [7:0] grp_Sobel_fu_609_p_dst_data_stream_2_V_din;
wire    grp_Sobel_fu_609_p_dst_data_stream_2_V_write;
wire    grp_Sobel_1_fu_619_ap_start;
wire    grp_Sobel_1_fu_619_ap_done;
wire    grp_Sobel_1_fu_619_ap_idle;
wire    grp_Sobel_1_fu_619_ap_ready;
wire    grp_Sobel_1_fu_619_p_src_data_stream_0_V_read;
wire    grp_Sobel_1_fu_619_p_src_data_stream_1_V_read;
wire    grp_Sobel_1_fu_619_p_src_data_stream_2_V_read;
wire   [7:0] grp_Sobel_1_fu_619_p_dst_data_stream_0_V_din;
wire    grp_Sobel_1_fu_619_p_dst_data_stream_0_V_write;
wire   [7:0] grp_Sobel_1_fu_619_p_dst_data_stream_1_V_din;
wire    grp_Sobel_1_fu_619_p_dst_data_stream_1_V_write;
wire   [7:0] grp_Sobel_1_fu_619_p_dst_data_stream_2_V_din;
wire    grp_Sobel_1_fu_619_p_dst_data_stream_2_V_write;
wire    grp_GaussianBlur_fu_629_ap_start;
wire    grp_GaussianBlur_fu_629_ap_done;
wire    grp_GaussianBlur_fu_629_ap_idle;
wire    grp_GaussianBlur_fu_629_ap_ready;
wire    grp_GaussianBlur_fu_629_p_src_data_stream_0_V_read;
wire    grp_GaussianBlur_fu_629_p_src_data_stream_1_V_read;
wire    grp_GaussianBlur_fu_629_p_src_data_stream_2_V_read;
wire   [7:0] grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_din;
wire    grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_write;
wire   [7:0] grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_din;
wire    grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_write;
wire   [7:0] grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_din;
wire    grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_write;
wire    grp_CvtColor_1_fu_639_ap_start;
wire    grp_CvtColor_1_fu_639_ap_done;
wire    grp_CvtColor_1_fu_639_ap_idle;
wire    grp_CvtColor_1_fu_639_ap_ready;
wire    grp_CvtColor_1_fu_639_p_src_data_stream_0_V_read;
wire    grp_CvtColor_1_fu_639_p_src_data_stream_1_V_read;
wire    grp_CvtColor_1_fu_639_p_src_data_stream_2_V_read;
wire   [7:0] grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_din;
wire    grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_write;
wire   [7:0] grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_din;
wire    grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_write;
wire   [7:0] grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_din;
wire    grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_write;
wire    grp_Mat2AXIvideo_fu_652_ap_start;
wire    grp_Mat2AXIvideo_fu_652_ap_done;
wire    grp_Mat2AXIvideo_fu_652_ap_idle;
wire    grp_Mat2AXIvideo_fu_652_ap_ready;
reg   [7:0] grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout;
reg    grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n;
wire    grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read;
reg   [7:0] grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout;
reg    grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n;
wire    grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read;
reg   [7:0] grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout;
reg    grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n;
wire    grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read;
wire   [23:0] grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDATA;
wire    grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
wire    grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TREADY;
wire   [2:0] grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TKEEP;
wire   [2:0] grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TSTRB;
wire   [0:0] grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TUSER;
wire   [0:0] grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TLAST;
wire   [0:0] grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TID;
wire   [0:0] grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDEST;
wire    grp_Duplicate_fu_676_ap_start;
wire    grp_Duplicate_fu_676_ap_done;
wire    grp_Duplicate_fu_676_ap_idle;
wire    grp_Duplicate_fu_676_ap_ready;
wire    grp_Duplicate_fu_676_src_data_stream_0_V_read;
wire    grp_Duplicate_fu_676_src_data_stream_1_V_read;
wire    grp_Duplicate_fu_676_src_data_stream_2_V_read;
wire   [7:0] grp_Duplicate_fu_676_dst1_data_stream_0_V_din;
wire    grp_Duplicate_fu_676_dst1_data_stream_0_V_write;
wire   [7:0] grp_Duplicate_fu_676_dst1_data_stream_1_V_din;
wire    grp_Duplicate_fu_676_dst1_data_stream_1_V_write;
wire   [7:0] grp_Duplicate_fu_676_dst1_data_stream_2_V_din;
wire    grp_Duplicate_fu_676_dst1_data_stream_2_V_write;
wire   [7:0] grp_Duplicate_fu_676_dst2_data_stream_0_V_din;
wire    grp_Duplicate_fu_676_dst2_data_stream_0_V_write;
wire   [7:0] grp_Duplicate_fu_676_dst2_data_stream_1_V_din;
wire    grp_Duplicate_fu_676_dst2_data_stream_1_V_write;
wire   [7:0] grp_Duplicate_fu_676_dst2_data_stream_2_V_din;
wire    grp_Duplicate_fu_676_dst2_data_stream_2_V_write;
wire    grp_CvtColor_fu_689_ap_start;
wire    grp_CvtColor_fu_689_ap_done;
wire    grp_CvtColor_fu_689_ap_idle;
wire    grp_CvtColor_fu_689_ap_ready;
wire    grp_CvtColor_fu_689_p_src_data_stream_0_V_read;
wire    grp_CvtColor_fu_689_p_src_data_stream_1_V_read;
wire    grp_CvtColor_fu_689_p_src_data_stream_2_V_read;
wire   [7:0] grp_CvtColor_fu_689_p_dst_data_stream_0_V_din;
wire    grp_CvtColor_fu_689_p_dst_data_stream_0_V_write;
wire   [7:0] grp_CvtColor_fu_689_p_dst_data_stream_1_V_din;
wire    grp_CvtColor_fu_689_p_dst_data_stream_1_V_write;
wire   [7:0] grp_CvtColor_fu_689_p_dst_data_stream_2_V_din;
wire    grp_CvtColor_fu_689_p_dst_data_stream_2_V_write;
reg    grp_AddWeighted_fu_596_ap_start_reg;
wire    ap_CS_fsm_state9;
wire   [7:0] img_4_data_stream_0_dout;
wire    img_4_data_stream_0_empty_n;
reg    img_4_data_stream_0_read;
wire    ap_CS_fsm_state10;
wire   [7:0] img_4_data_stream_1_dout;
wire    img_4_data_stream_1_empty_n;
reg    img_4_data_stream_1_read;
wire   [7:0] img_4_data_stream_2_dout;
wire    img_4_data_stream_2_empty_n;
reg    img_4_data_stream_2_read;
wire   [7:0] img_3_data_stream_0_dout;
wire    img_3_data_stream_0_empty_n;
reg    img_3_data_stream_0_read;
wire   [7:0] img_3_data_stream_1_dout;
wire    img_3_data_stream_1_empty_n;
reg    img_3_data_stream_1_read;
wire   [7:0] img_3_data_stream_2_dout;
wire    img_3_data_stream_2_empty_n;
reg    img_3_data_stream_2_read;
wire    img_5_data_stream_0_full_n;
reg    img_5_data_stream_0_write;
wire    img_5_data_stream_1_full_n;
reg    img_5_data_stream_1_write;
wire    img_5_data_stream_2_full_n;
reg    img_5_data_stream_2_write;
reg    grp_Sobel_fu_609_ap_start_reg;
wire    ap_CS_fsm_state7;
wire   [7:0] img_2a_data_stream_0_dout;
wire    img_2a_data_stream_0_empty_n;
reg    img_2a_data_stream_0_read;
wire    ap_CS_fsm_state8;
wire   [7:0] img_2a_data_stream_1_dout;
wire    img_2a_data_stream_1_empty_n;
reg    img_2a_data_stream_1_read;
wire   [7:0] img_2a_data_stream_2_dout;
wire    img_2a_data_stream_2_empty_n;
reg    img_2a_data_stream_2_read;
wire    img_3_data_stream_0_full_n;
reg    img_3_data_stream_0_write;
wire    img_3_data_stream_1_full_n;
reg    img_3_data_stream_1_write;
wire    img_3_data_stream_2_full_n;
reg    img_3_data_stream_2_write;
reg    grp_Sobel_1_fu_619_ap_start_reg;
wire   [7:0] img_2b_data_stream_0_dout;
wire    img_2b_data_stream_0_empty_n;
reg    img_2b_data_stream_0_read;
wire   [7:0] img_2b_data_stream_1_dout;
wire    img_2b_data_stream_1_empty_n;
reg    img_2b_data_stream_1_read;
wire   [7:0] img_2b_data_stream_2_dout;
wire    img_2b_data_stream_2_empty_n;
reg    img_2b_data_stream_2_read;
wire    img_4_data_stream_0_full_n;
reg    img_4_data_stream_0_write;
wire    img_4_data_stream_1_full_n;
reg    img_4_data_stream_1_write;
wire    img_4_data_stream_2_full_n;
reg    img_4_data_stream_2_write;
reg    grp_GaussianBlur_fu_629_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [7:0] img_1_data_stream_0_dout;
wire    img_1_data_stream_0_empty_n;
reg    img_1_data_stream_0_read;
wire    ap_CS_fsm_state4;
wire   [7:0] img_1_data_stream_1_dout;
wire    img_1_data_stream_1_empty_n;
reg    img_1_data_stream_1_read;
wire   [7:0] img_1_data_stream_2_dout;
wire    img_1_data_stream_2_empty_n;
reg    img_1_data_stream_2_read;
wire    img_2_data_stream_0_full_n;
reg    img_2_data_stream_0_write;
wire    img_2_data_stream_1_full_n;
reg    img_2_data_stream_1_write;
wire    img_2_data_stream_2_full_n;
reg    img_2_data_stream_2_write;
reg    grp_CvtColor_1_fu_639_ap_start_reg;
reg    ap_block_state1_ignore_call0;
wire   [0:0] Enabled_V_read_read_fu_590_p2;
wire    ap_CS_fsm_state2;
wire    img_1_data_stream_0_full_n;
reg    img_1_data_stream_0_write;
wire    img_1_data_stream_1_full_n;
reg    img_1_data_stream_1_write;
wire    img_1_data_stream_2_full_n;
reg    img_1_data_stream_2_write;
reg    grp_Mat2AXIvideo_fu_652_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire   [7:0] img_6_data_stream_0_dout;
wire    img_6_data_stream_0_empty_n;
reg    img_6_data_stream_0_read;
wire    ap_CS_fsm_state14;
wire   [7:0] img_6_data_stream_1_dout;
wire    img_6_data_stream_1_empty_n;
reg    img_6_data_stream_1_read;
wire   [7:0] img_6_data_stream_2_dout;
wire    img_6_data_stream_2_empty_n;
reg    img_6_data_stream_2_read;
reg    grp_Duplicate_fu_676_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [7:0] img_2_data_stream_0_dout;
wire    img_2_data_stream_0_empty_n;
reg    img_2_data_stream_0_read;
wire    ap_CS_fsm_state6;
wire   [7:0] img_2_data_stream_1_dout;
wire    img_2_data_stream_1_empty_n;
reg    img_2_data_stream_1_read;
wire   [7:0] img_2_data_stream_2_dout;
wire    img_2_data_stream_2_empty_n;
reg    img_2_data_stream_2_read;
wire    img_2a_data_stream_0_full_n;
reg    img_2a_data_stream_0_write;
wire    img_2a_data_stream_1_full_n;
reg    img_2a_data_stream_1_write;
wire    img_2a_data_stream_2_full_n;
reg    img_2a_data_stream_2_write;
wire    img_2b_data_stream_0_full_n;
reg    img_2b_data_stream_0_write;
wire    img_2b_data_stream_1_full_n;
reg    img_2b_data_stream_1_write;
wire    img_2b_data_stream_2_full_n;
reg    img_2b_data_stream_2_write;
reg    grp_CvtColor_fu_689_ap_start_reg;
wire    ap_CS_fsm_state11;
wire   [7:0] img_5_data_stream_0_dout;
wire    img_5_data_stream_0_empty_n;
reg    img_5_data_stream_0_read;
wire    ap_CS_fsm_state12;
wire   [7:0] img_5_data_stream_1_dout;
wire    img_5_data_stream_1_empty_n;
reg    img_5_data_stream_1_read;
wire   [7:0] img_5_data_stream_2_dout;
wire    img_5_data_stream_2_empty_n;
reg    img_5_data_stream_2_read;
wire    img_6_data_stream_0_full_n;
reg    img_6_data_stream_0_write;
wire    img_6_data_stream_1_full_n;
reg    img_6_data_stream_1_write;
wire    img_6_data_stream_2_full_n;
reg    img_6_data_stream_2_write;
reg    ap_block_state1;
wire    ap_CS_fsm_state16;
reg    ap_block_state16;
reg   [15:0] ap_NS_fsm;
reg    ap_block_state8_on_subcall_done;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
#0 OUTPUT_STREAM_V_data_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_data_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_data_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_keep_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_keep_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_keep_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_strb_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_strb_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_strb_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_user_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_user_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_user_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_last_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_last_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_last_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_id_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_id_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_id_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_dest_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_dest_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_dest_V_1_state = 2'd0;
#0 grp_AddWeighted_fu_596_ap_start_reg = 1'b0;
#0 grp_Sobel_fu_609_ap_start_reg = 1'b0;
#0 grp_Sobel_1_fu_619_ap_start_reg = 1'b0;
#0 grp_GaussianBlur_fu_629_ap_start_reg = 1'b0;
#0 grp_CvtColor_1_fu_639_ap_start_reg = 1'b0;
#0 grp_Mat2AXIvideo_fu_652_ap_start_reg = 1'b0;
#0 grp_Duplicate_fu_676_ap_start_reg = 1'b0;
#0 grp_CvtColor_fu_689_ap_start_reg = 1'b0;
end

AddWeighted grp_AddWeighted_fu_596(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddWeighted_fu_596_ap_start),
    .ap_done(grp_AddWeighted_fu_596_ap_done),
    .ap_idle(grp_AddWeighted_fu_596_ap_idle),
    .ap_ready(grp_AddWeighted_fu_596_ap_ready),
    .src1_data_stream_0_V_dout(img_4_data_stream_0_dout),
    .src1_data_stream_0_V_empty_n(img_4_data_stream_0_empty_n),
    .src1_data_stream_0_V_read(grp_AddWeighted_fu_596_src1_data_stream_0_V_read),
    .src1_data_stream_1_V_dout(img_4_data_stream_1_dout),
    .src1_data_stream_1_V_empty_n(img_4_data_stream_1_empty_n),
    .src1_data_stream_1_V_read(grp_AddWeighted_fu_596_src1_data_stream_1_V_read),
    .src1_data_stream_2_V_dout(img_4_data_stream_2_dout),
    .src1_data_stream_2_V_empty_n(img_4_data_stream_2_empty_n),
    .src1_data_stream_2_V_read(grp_AddWeighted_fu_596_src1_data_stream_2_V_read),
    .src2_data_stream_0_V_dout(img_3_data_stream_0_dout),
    .src2_data_stream_0_V_empty_n(img_3_data_stream_0_empty_n),
    .src2_data_stream_0_V_read(grp_AddWeighted_fu_596_src2_data_stream_0_V_read),
    .src2_data_stream_1_V_dout(img_3_data_stream_1_dout),
    .src2_data_stream_1_V_empty_n(img_3_data_stream_1_empty_n),
    .src2_data_stream_1_V_read(grp_AddWeighted_fu_596_src2_data_stream_1_V_read),
    .src2_data_stream_2_V_dout(img_3_data_stream_2_dout),
    .src2_data_stream_2_V_empty_n(img_3_data_stream_2_empty_n),
    .src2_data_stream_2_V_read(grp_AddWeighted_fu_596_src2_data_stream_2_V_read),
    .dst_data_stream_0_V_din(grp_AddWeighted_fu_596_dst_data_stream_0_V_din),
    .dst_data_stream_0_V_full_n(img_5_data_stream_0_full_n),
    .dst_data_stream_0_V_write(grp_AddWeighted_fu_596_dst_data_stream_0_V_write),
    .dst_data_stream_1_V_din(grp_AddWeighted_fu_596_dst_data_stream_1_V_din),
    .dst_data_stream_1_V_full_n(img_5_data_stream_1_full_n),
    .dst_data_stream_1_V_write(grp_AddWeighted_fu_596_dst_data_stream_1_V_write),
    .dst_data_stream_2_V_din(grp_AddWeighted_fu_596_dst_data_stream_2_V_din),
    .dst_data_stream_2_V_full_n(img_5_data_stream_2_full_n),
    .dst_data_stream_2_V_write(grp_AddWeighted_fu_596_dst_data_stream_2_V_write)
);

Sobel grp_Sobel_fu_609(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Sobel_fu_609_ap_start),
    .ap_done(grp_Sobel_fu_609_ap_done),
    .ap_idle(grp_Sobel_fu_609_ap_idle),
    .ap_ready(grp_Sobel_fu_609_ap_ready),
    .p_src_data_stream_0_V_dout(img_2a_data_stream_0_dout),
    .p_src_data_stream_0_V_empty_n(img_2a_data_stream_0_empty_n),
    .p_src_data_stream_0_V_read(grp_Sobel_fu_609_p_src_data_stream_0_V_read),
    .p_src_data_stream_1_V_dout(img_2a_data_stream_1_dout),
    .p_src_data_stream_1_V_empty_n(img_2a_data_stream_1_empty_n),
    .p_src_data_stream_1_V_read(grp_Sobel_fu_609_p_src_data_stream_1_V_read),
    .p_src_data_stream_2_V_dout(img_2a_data_stream_2_dout),
    .p_src_data_stream_2_V_empty_n(img_2a_data_stream_2_empty_n),
    .p_src_data_stream_2_V_read(grp_Sobel_fu_609_p_src_data_stream_2_V_read),
    .p_dst_data_stream_0_V_din(grp_Sobel_fu_609_p_dst_data_stream_0_V_din),
    .p_dst_data_stream_0_V_full_n(img_3_data_stream_0_full_n),
    .p_dst_data_stream_0_V_write(grp_Sobel_fu_609_p_dst_data_stream_0_V_write),
    .p_dst_data_stream_1_V_din(grp_Sobel_fu_609_p_dst_data_stream_1_V_din),
    .p_dst_data_stream_1_V_full_n(img_3_data_stream_1_full_n),
    .p_dst_data_stream_1_V_write(grp_Sobel_fu_609_p_dst_data_stream_1_V_write),
    .p_dst_data_stream_2_V_din(grp_Sobel_fu_609_p_dst_data_stream_2_V_din),
    .p_dst_data_stream_2_V_full_n(img_3_data_stream_2_full_n),
    .p_dst_data_stream_2_V_write(grp_Sobel_fu_609_p_dst_data_stream_2_V_write)
);

Sobel_1 grp_Sobel_1_fu_619(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Sobel_1_fu_619_ap_start),
    .ap_done(grp_Sobel_1_fu_619_ap_done),
    .ap_idle(grp_Sobel_1_fu_619_ap_idle),
    .ap_ready(grp_Sobel_1_fu_619_ap_ready),
    .p_src_data_stream_0_V_dout(img_2b_data_stream_0_dout),
    .p_src_data_stream_0_V_empty_n(img_2b_data_stream_0_empty_n),
    .p_src_data_stream_0_V_read(grp_Sobel_1_fu_619_p_src_data_stream_0_V_read),
    .p_src_data_stream_1_V_dout(img_2b_data_stream_1_dout),
    .p_src_data_stream_1_V_empty_n(img_2b_data_stream_1_empty_n),
    .p_src_data_stream_1_V_read(grp_Sobel_1_fu_619_p_src_data_stream_1_V_read),
    .p_src_data_stream_2_V_dout(img_2b_data_stream_2_dout),
    .p_src_data_stream_2_V_empty_n(img_2b_data_stream_2_empty_n),
    .p_src_data_stream_2_V_read(grp_Sobel_1_fu_619_p_src_data_stream_2_V_read),
    .p_dst_data_stream_0_V_din(grp_Sobel_1_fu_619_p_dst_data_stream_0_V_din),
    .p_dst_data_stream_0_V_full_n(img_4_data_stream_0_full_n),
    .p_dst_data_stream_0_V_write(grp_Sobel_1_fu_619_p_dst_data_stream_0_V_write),
    .p_dst_data_stream_1_V_din(grp_Sobel_1_fu_619_p_dst_data_stream_1_V_din),
    .p_dst_data_stream_1_V_full_n(img_4_data_stream_1_full_n),
    .p_dst_data_stream_1_V_write(grp_Sobel_1_fu_619_p_dst_data_stream_1_V_write),
    .p_dst_data_stream_2_V_din(grp_Sobel_1_fu_619_p_dst_data_stream_2_V_din),
    .p_dst_data_stream_2_V_full_n(img_4_data_stream_2_full_n),
    .p_dst_data_stream_2_V_write(grp_Sobel_1_fu_619_p_dst_data_stream_2_V_write)
);

GaussianBlur grp_GaussianBlur_fu_629(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_GaussianBlur_fu_629_ap_start),
    .ap_done(grp_GaussianBlur_fu_629_ap_done),
    .ap_idle(grp_GaussianBlur_fu_629_ap_idle),
    .ap_ready(grp_GaussianBlur_fu_629_ap_ready),
    .p_src_data_stream_0_V_dout(img_1_data_stream_0_dout),
    .p_src_data_stream_0_V_empty_n(img_1_data_stream_0_empty_n),
    .p_src_data_stream_0_V_read(grp_GaussianBlur_fu_629_p_src_data_stream_0_V_read),
    .p_src_data_stream_1_V_dout(img_1_data_stream_1_dout),
    .p_src_data_stream_1_V_empty_n(img_1_data_stream_1_empty_n),
    .p_src_data_stream_1_V_read(grp_GaussianBlur_fu_629_p_src_data_stream_1_V_read),
    .p_src_data_stream_2_V_dout(img_1_data_stream_2_dout),
    .p_src_data_stream_2_V_empty_n(img_1_data_stream_2_empty_n),
    .p_src_data_stream_2_V_read(grp_GaussianBlur_fu_629_p_src_data_stream_2_V_read),
    .p_dst_data_stream_0_V_din(grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_din),
    .p_dst_data_stream_0_V_full_n(img_2_data_stream_0_full_n),
    .p_dst_data_stream_0_V_write(grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_write),
    .p_dst_data_stream_1_V_din(grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_din),
    .p_dst_data_stream_1_V_full_n(img_2_data_stream_1_full_n),
    .p_dst_data_stream_1_V_write(grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_write),
    .p_dst_data_stream_2_V_din(grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_din),
    .p_dst_data_stream_2_V_full_n(img_2_data_stream_2_full_n),
    .p_dst_data_stream_2_V_write(grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_write)
);

CvtColor_1 grp_CvtColor_1_fu_639(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_CvtColor_1_fu_639_ap_start),
    .ap_done(grp_CvtColor_1_fu_639_ap_done),
    .ap_idle(grp_CvtColor_1_fu_639_ap_idle),
    .ap_ready(grp_CvtColor_1_fu_639_ap_ready),
    .p_src_data_stream_0_V_dout(img_0_data_stream_0_V_dout),
    .p_src_data_stream_0_V_empty_n(img_0_data_stream_0_V_empty_n),
    .p_src_data_stream_0_V_read(grp_CvtColor_1_fu_639_p_src_data_stream_0_V_read),
    .p_src_data_stream_1_V_dout(img_0_data_stream_1_V_dout),
    .p_src_data_stream_1_V_empty_n(img_0_data_stream_1_V_empty_n),
    .p_src_data_stream_1_V_read(grp_CvtColor_1_fu_639_p_src_data_stream_1_V_read),
    .p_src_data_stream_2_V_dout(img_0_data_stream_2_V_dout),
    .p_src_data_stream_2_V_empty_n(img_0_data_stream_2_V_empty_n),
    .p_src_data_stream_2_V_read(grp_CvtColor_1_fu_639_p_src_data_stream_2_V_read),
    .p_dst_data_stream_0_V_din(grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_din),
    .p_dst_data_stream_0_V_full_n(img_1_data_stream_0_full_n),
    .p_dst_data_stream_0_V_write(grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_write),
    .p_dst_data_stream_1_V_din(grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_din),
    .p_dst_data_stream_1_V_full_n(img_1_data_stream_1_full_n),
    .p_dst_data_stream_1_V_write(grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_write),
    .p_dst_data_stream_2_V_din(grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_din),
    .p_dst_data_stream_2_V_full_n(img_1_data_stream_2_full_n),
    .p_dst_data_stream_2_V_write(grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_write)
);

Mat2AXIvideo grp_Mat2AXIvideo_fu_652(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Mat2AXIvideo_fu_652_ap_start),
    .ap_done(grp_Mat2AXIvideo_fu_652_ap_done),
    .ap_idle(grp_Mat2AXIvideo_fu_652_ap_idle),
    .ap_ready(grp_Mat2AXIvideo_fu_652_ap_ready),
    .img_data_stream_0_V_dout(grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout),
    .img_data_stream_0_V_empty_n(grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n),
    .img_data_stream_0_V_read(grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read),
    .img_data_stream_1_V_dout(grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout),
    .img_data_stream_1_V_empty_n(grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n),
    .img_data_stream_1_V_read(grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read),
    .img_data_stream_2_V_dout(grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout),
    .img_data_stream_2_V_empty_n(grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n),
    .img_data_stream_2_V_read(grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read),
    .OUTPUT_STREAM_TDATA(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDATA),
    .OUTPUT_STREAM_TVALID(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID),
    .OUTPUT_STREAM_TREADY(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TREADY),
    .OUTPUT_STREAM_TKEEP(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TKEEP),
    .OUTPUT_STREAM_TSTRB(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TSTRB),
    .OUTPUT_STREAM_TUSER(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TUSER),
    .OUTPUT_STREAM_TLAST(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TLAST),
    .OUTPUT_STREAM_TID(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TID),
    .OUTPUT_STREAM_TDEST(grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDEST)
);

Duplicate grp_Duplicate_fu_676(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Duplicate_fu_676_ap_start),
    .ap_done(grp_Duplicate_fu_676_ap_done),
    .ap_idle(grp_Duplicate_fu_676_ap_idle),
    .ap_ready(grp_Duplicate_fu_676_ap_ready),
    .src_data_stream_0_V_dout(img_2_data_stream_0_dout),
    .src_data_stream_0_V_empty_n(img_2_data_stream_0_empty_n),
    .src_data_stream_0_V_read(grp_Duplicate_fu_676_src_data_stream_0_V_read),
    .src_data_stream_1_V_dout(img_2_data_stream_1_dout),
    .src_data_stream_1_V_empty_n(img_2_data_stream_1_empty_n),
    .src_data_stream_1_V_read(grp_Duplicate_fu_676_src_data_stream_1_V_read),
    .src_data_stream_2_V_dout(img_2_data_stream_2_dout),
    .src_data_stream_2_V_empty_n(img_2_data_stream_2_empty_n),
    .src_data_stream_2_V_read(grp_Duplicate_fu_676_src_data_stream_2_V_read),
    .dst1_data_stream_0_V_din(grp_Duplicate_fu_676_dst1_data_stream_0_V_din),
    .dst1_data_stream_0_V_full_n(img_2a_data_stream_0_full_n),
    .dst1_data_stream_0_V_write(grp_Duplicate_fu_676_dst1_data_stream_0_V_write),
    .dst1_data_stream_1_V_din(grp_Duplicate_fu_676_dst1_data_stream_1_V_din),
    .dst1_data_stream_1_V_full_n(img_2a_data_stream_1_full_n),
    .dst1_data_stream_1_V_write(grp_Duplicate_fu_676_dst1_data_stream_1_V_write),
    .dst1_data_stream_2_V_din(grp_Duplicate_fu_676_dst1_data_stream_2_V_din),
    .dst1_data_stream_2_V_full_n(img_2a_data_stream_2_full_n),
    .dst1_data_stream_2_V_write(grp_Duplicate_fu_676_dst1_data_stream_2_V_write),
    .dst2_data_stream_0_V_din(grp_Duplicate_fu_676_dst2_data_stream_0_V_din),
    .dst2_data_stream_0_V_full_n(img_2b_data_stream_0_full_n),
    .dst2_data_stream_0_V_write(grp_Duplicate_fu_676_dst2_data_stream_0_V_write),
    .dst2_data_stream_1_V_din(grp_Duplicate_fu_676_dst2_data_stream_1_V_din),
    .dst2_data_stream_1_V_full_n(img_2b_data_stream_1_full_n),
    .dst2_data_stream_1_V_write(grp_Duplicate_fu_676_dst2_data_stream_1_V_write),
    .dst2_data_stream_2_V_din(grp_Duplicate_fu_676_dst2_data_stream_2_V_din),
    .dst2_data_stream_2_V_full_n(img_2b_data_stream_2_full_n),
    .dst2_data_stream_2_V_write(grp_Duplicate_fu_676_dst2_data_stream_2_V_write)
);

CvtColor grp_CvtColor_fu_689(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_CvtColor_fu_689_ap_start),
    .ap_done(grp_CvtColor_fu_689_ap_done),
    .ap_idle(grp_CvtColor_fu_689_ap_idle),
    .ap_ready(grp_CvtColor_fu_689_ap_ready),
    .p_src_data_stream_0_V_dout(img_5_data_stream_0_dout),
    .p_src_data_stream_0_V_empty_n(img_5_data_stream_0_empty_n),
    .p_src_data_stream_0_V_read(grp_CvtColor_fu_689_p_src_data_stream_0_V_read),
    .p_src_data_stream_1_V_dout(img_5_data_stream_1_dout),
    .p_src_data_stream_1_V_empty_n(img_5_data_stream_1_empty_n),
    .p_src_data_stream_1_V_read(grp_CvtColor_fu_689_p_src_data_stream_1_V_read),
    .p_src_data_stream_2_V_dout(img_5_data_stream_2_dout),
    .p_src_data_stream_2_V_empty_n(img_5_data_stream_2_empty_n),
    .p_src_data_stream_2_V_read(grp_CvtColor_fu_689_p_src_data_stream_2_V_read),
    .p_dst_data_stream_0_V_din(grp_CvtColor_fu_689_p_dst_data_stream_0_V_din),
    .p_dst_data_stream_0_V_full_n(img_6_data_stream_0_full_n),
    .p_dst_data_stream_0_V_write(grp_CvtColor_fu_689_p_dst_data_stream_0_V_write),
    .p_dst_data_stream_1_V_din(grp_CvtColor_fu_689_p_dst_data_stream_1_V_din),
    .p_dst_data_stream_1_V_full_n(img_6_data_stream_1_full_n),
    .p_dst_data_stream_1_V_write(grp_CvtColor_fu_689_p_dst_data_stream_1_V_write),
    .p_dst_data_stream_2_V_din(grp_CvtColor_fu_689_p_dst_data_stream_2_V_din),
    .p_dst_data_stream_2_V_full_n(img_6_data_stream_2_full_n),
    .p_dst_data_stream_2_V_write(grp_CvtColor_fu_689_p_dst_data_stream_2_V_write)
);

fifo_w8_d1_A img_1_data_stream_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_din),
    .if_full_n(img_1_data_stream_0_full_n),
    .if_write(img_1_data_stream_0_write),
    .if_dout(img_1_data_stream_0_dout),
    .if_empty_n(img_1_data_stream_0_empty_n),
    .if_read(img_1_data_stream_0_read)
);

fifo_w8_d1_A img_1_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_din),
    .if_full_n(img_1_data_stream_1_full_n),
    .if_write(img_1_data_stream_1_write),
    .if_dout(img_1_data_stream_1_dout),
    .if_empty_n(img_1_data_stream_1_empty_n),
    .if_read(img_1_data_stream_1_read)
);

fifo_w8_d1_A img_1_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_din),
    .if_full_n(img_1_data_stream_2_full_n),
    .if_write(img_1_data_stream_2_write),
    .if_dout(img_1_data_stream_2_dout),
    .if_empty_n(img_1_data_stream_2_empty_n),
    .if_read(img_1_data_stream_2_read)
);

fifo_w8_d1_A img_2_data_stream_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_din),
    .if_full_n(img_2_data_stream_0_full_n),
    .if_write(img_2_data_stream_0_write),
    .if_dout(img_2_data_stream_0_dout),
    .if_empty_n(img_2_data_stream_0_empty_n),
    .if_read(img_2_data_stream_0_read)
);

fifo_w8_d1_A img_2_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_din),
    .if_full_n(img_2_data_stream_1_full_n),
    .if_write(img_2_data_stream_1_write),
    .if_dout(img_2_data_stream_1_dout),
    .if_empty_n(img_2_data_stream_1_empty_n),
    .if_read(img_2_data_stream_1_read)
);

fifo_w8_d1_A img_2_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_din),
    .if_full_n(img_2_data_stream_2_full_n),
    .if_write(img_2_data_stream_2_write),
    .if_dout(img_2_data_stream_2_dout),
    .if_empty_n(img_2_data_stream_2_empty_n),
    .if_read(img_2_data_stream_2_read)
);

fifo_w8_d1_A img_2a_data_stream_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Duplicate_fu_676_dst1_data_stream_0_V_din),
    .if_full_n(img_2a_data_stream_0_full_n),
    .if_write(img_2a_data_stream_0_write),
    .if_dout(img_2a_data_stream_0_dout),
    .if_empty_n(img_2a_data_stream_0_empty_n),
    .if_read(img_2a_data_stream_0_read)
);

fifo_w8_d1_A img_2a_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Duplicate_fu_676_dst1_data_stream_1_V_din),
    .if_full_n(img_2a_data_stream_1_full_n),
    .if_write(img_2a_data_stream_1_write),
    .if_dout(img_2a_data_stream_1_dout),
    .if_empty_n(img_2a_data_stream_1_empty_n),
    .if_read(img_2a_data_stream_1_read)
);

fifo_w8_d1_A img_2a_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Duplicate_fu_676_dst1_data_stream_2_V_din),
    .if_full_n(img_2a_data_stream_2_full_n),
    .if_write(img_2a_data_stream_2_write),
    .if_dout(img_2a_data_stream_2_dout),
    .if_empty_n(img_2a_data_stream_2_empty_n),
    .if_read(img_2a_data_stream_2_read)
);

fifo_w8_d1_A img_2b_data_stream_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Duplicate_fu_676_dst2_data_stream_0_V_din),
    .if_full_n(img_2b_data_stream_0_full_n),
    .if_write(img_2b_data_stream_0_write),
    .if_dout(img_2b_data_stream_0_dout),
    .if_empty_n(img_2b_data_stream_0_empty_n),
    .if_read(img_2b_data_stream_0_read)
);

fifo_w8_d1_A img_2b_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Duplicate_fu_676_dst2_data_stream_1_V_din),
    .if_full_n(img_2b_data_stream_1_full_n),
    .if_write(img_2b_data_stream_1_write),
    .if_dout(img_2b_data_stream_1_dout),
    .if_empty_n(img_2b_data_stream_1_empty_n),
    .if_read(img_2b_data_stream_1_read)
);

fifo_w8_d1_A img_2b_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Duplicate_fu_676_dst2_data_stream_2_V_din),
    .if_full_n(img_2b_data_stream_2_full_n),
    .if_write(img_2b_data_stream_2_write),
    .if_dout(img_2b_data_stream_2_dout),
    .if_empty_n(img_2b_data_stream_2_empty_n),
    .if_read(img_2b_data_stream_2_read)
);

fifo_w8_d1_A img_3_data_stream_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Sobel_fu_609_p_dst_data_stream_0_V_din),
    .if_full_n(img_3_data_stream_0_full_n),
    .if_write(img_3_data_stream_0_write),
    .if_dout(img_3_data_stream_0_dout),
    .if_empty_n(img_3_data_stream_0_empty_n),
    .if_read(img_3_data_stream_0_read)
);

fifo_w8_d1_A img_3_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Sobel_fu_609_p_dst_data_stream_1_V_din),
    .if_full_n(img_3_data_stream_1_full_n),
    .if_write(img_3_data_stream_1_write),
    .if_dout(img_3_data_stream_1_dout),
    .if_empty_n(img_3_data_stream_1_empty_n),
    .if_read(img_3_data_stream_1_read)
);

fifo_w8_d1_A img_3_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Sobel_fu_609_p_dst_data_stream_2_V_din),
    .if_full_n(img_3_data_stream_2_full_n),
    .if_write(img_3_data_stream_2_write),
    .if_dout(img_3_data_stream_2_dout),
    .if_empty_n(img_3_data_stream_2_empty_n),
    .if_read(img_3_data_stream_2_read)
);

fifo_w8_d1_A img_4_data_stream_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Sobel_1_fu_619_p_dst_data_stream_0_V_din),
    .if_full_n(img_4_data_stream_0_full_n),
    .if_write(img_4_data_stream_0_write),
    .if_dout(img_4_data_stream_0_dout),
    .if_empty_n(img_4_data_stream_0_empty_n),
    .if_read(img_4_data_stream_0_read)
);

fifo_w8_d1_A img_4_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Sobel_1_fu_619_p_dst_data_stream_1_V_din),
    .if_full_n(img_4_data_stream_1_full_n),
    .if_write(img_4_data_stream_1_write),
    .if_dout(img_4_data_stream_1_dout),
    .if_empty_n(img_4_data_stream_1_empty_n),
    .if_read(img_4_data_stream_1_read)
);

fifo_w8_d1_A img_4_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_Sobel_1_fu_619_p_dst_data_stream_2_V_din),
    .if_full_n(img_4_data_stream_2_full_n),
    .if_write(img_4_data_stream_2_write),
    .if_dout(img_4_data_stream_2_dout),
    .if_empty_n(img_4_data_stream_2_empty_n),
    .if_read(img_4_data_stream_2_read)
);

fifo_w8_d1_A img_5_data_stream_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AddWeighted_fu_596_dst_data_stream_0_V_din),
    .if_full_n(img_5_data_stream_0_full_n),
    .if_write(img_5_data_stream_0_write),
    .if_dout(img_5_data_stream_0_dout),
    .if_empty_n(img_5_data_stream_0_empty_n),
    .if_read(img_5_data_stream_0_read)
);

fifo_w8_d1_A img_5_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AddWeighted_fu_596_dst_data_stream_1_V_din),
    .if_full_n(img_5_data_stream_1_full_n),
    .if_write(img_5_data_stream_1_write),
    .if_dout(img_5_data_stream_1_dout),
    .if_empty_n(img_5_data_stream_1_empty_n),
    .if_read(img_5_data_stream_1_read)
);

fifo_w8_d1_A img_5_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AddWeighted_fu_596_dst_data_stream_2_V_din),
    .if_full_n(img_5_data_stream_2_full_n),
    .if_write(img_5_data_stream_2_write),
    .if_dout(img_5_data_stream_2_dout),
    .if_empty_n(img_5_data_stream_2_empty_n),
    .if_read(img_5_data_stream_2_read)
);

fifo_w8_d1_A img_6_data_stream_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_CvtColor_fu_689_p_dst_data_stream_0_V_din),
    .if_full_n(img_6_data_stream_0_full_n),
    .if_write(img_6_data_stream_0_write),
    .if_dout(img_6_data_stream_0_dout),
    .if_empty_n(img_6_data_stream_0_empty_n),
    .if_read(img_6_data_stream_0_read)
);

fifo_w8_d1_A img_6_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_CvtColor_fu_689_p_dst_data_stream_1_V_din),
    .if_full_n(img_6_data_stream_1_full_n),
    .if_write(img_6_data_stream_1_write),
    .if_dout(img_6_data_stream_1_dout),
    .if_empty_n(img_6_data_stream_1_empty_n),
    .if_read(img_6_data_stream_1_read)
);

fifo_w8_d1_A img_6_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_CvtColor_fu_689_p_dst_data_stream_2_V_din),
    .if_full_n(img_6_data_stream_2_full_n),
    .if_write(img_6_data_stream_2_write),
    .if_dout(img_6_data_stream_2_dout),
    .if_empty_n(img_6_data_stream_2_empty_n),
    .if_read(img_6_data_stream_2_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_out))) begin
            OUTPUT_STREAM_V_data_V_1_sel_rd <= ~OUTPUT_STREAM_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in))) begin
            OUTPUT_STREAM_V_data_V_1_sel_wr <= ~OUTPUT_STREAM_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_data_V_1_state) & (1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_data_V_1_state) & (1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_data_V_1_state) & (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_data_V_1_state) & (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_data_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_data_V_1_state) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_data_V_1_state) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_out))) begin
            OUTPUT_STREAM_V_dest_V_1_sel_rd <= ~OUTPUT_STREAM_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in))) begin
            OUTPUT_STREAM_V_dest_V_1_sel_wr <= ~OUTPUT_STREAM_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_dest_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_dest_V_1_state) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_out))) begin
            OUTPUT_STREAM_V_id_V_1_sel_rd <= ~OUTPUT_STREAM_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in))) begin
            OUTPUT_STREAM_V_id_V_1_sel_wr <= ~OUTPUT_STREAM_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_id_V_1_state) & (1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_id_V_1_state) & (1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_id_V_1_state) & (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_id_V_1_state) & (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_id_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_id_V_1_state) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_id_V_1_state) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_out))) begin
            OUTPUT_STREAM_V_keep_V_1_sel_rd <= ~OUTPUT_STREAM_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in))) begin
            OUTPUT_STREAM_V_keep_V_1_sel_wr <= ~OUTPUT_STREAM_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_keep_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_keep_V_1_state) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_out))) begin
            OUTPUT_STREAM_V_last_V_1_sel_rd <= ~OUTPUT_STREAM_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in))) begin
            OUTPUT_STREAM_V_last_V_1_sel_wr <= ~OUTPUT_STREAM_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_last_V_1_state) & (1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_last_V_1_state) & (1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_last_V_1_state) & (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_last_V_1_state) & (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_last_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_last_V_1_state) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_last_V_1_state) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_out))) begin
            OUTPUT_STREAM_V_strb_V_1_sel_rd <= ~OUTPUT_STREAM_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in))) begin
            OUTPUT_STREAM_V_strb_V_1_sel_wr <= ~OUTPUT_STREAM_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_strb_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_strb_V_1_state) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_out))) begin
            OUTPUT_STREAM_V_user_V_1_sel_rd <= ~OUTPUT_STREAM_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in))) begin
            OUTPUT_STREAM_V_user_V_1_sel_wr <= ~OUTPUT_STREAM_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_STREAM_V_user_V_1_state) & (1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in)) | ((2'd3 == OUTPUT_STREAM_V_user_V_1_state) & (1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_STREAM_V_user_V_1_state) & (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out)) | ((2'd3 == OUTPUT_STREAM_V_user_V_1_state) & (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_user_V_1_state)) | ((2'd1 == OUTPUT_STREAM_V_user_V_1_state) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out)) | ((2'd2 == OUTPUT_STREAM_V_user_V_1_state) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddWeighted_fu_596_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_AddWeighted_fu_596_ap_start_reg <= 1'b1;
        end else if ((grp_AddWeighted_fu_596_ap_ready == 1'b1)) begin
            grp_AddWeighted_fu_596_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_CvtColor_1_fu_639_ap_start_reg <= 1'b0;
    end else begin
        if ((~((1'b0 == Enabled_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'd0 == Enabled_V_read_read_fu_590_p2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_CvtColor_1_fu_639_ap_start_reg <= 1'b1;
        end else if ((grp_CvtColor_1_fu_639_ap_ready == 1'b1)) begin
            grp_CvtColor_1_fu_639_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_CvtColor_fu_689_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_CvtColor_fu_689_ap_start_reg <= 1'b1;
        end else if ((grp_CvtColor_fu_689_ap_ready == 1'b1)) begin
            grp_CvtColor_fu_689_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Duplicate_fu_676_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_Duplicate_fu_676_ap_start_reg <= 1'b1;
        end else if ((grp_Duplicate_fu_676_ap_ready == 1'b1)) begin
            grp_Duplicate_fu_676_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_GaussianBlur_fu_629_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_GaussianBlur_fu_629_ap_start_reg <= 1'b1;
        end else if ((grp_GaussianBlur_fu_629_ap_ready == 1'b1)) begin
            grp_GaussianBlur_fu_629_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Mat2AXIvideo_fu_652_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state13) | (~((1'b0 == Enabled_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'd1 == Enabled_V_read_read_fu_590_p2) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_Mat2AXIvideo_fu_652_ap_start_reg <= 1'b1;
        end else if ((grp_Mat2AXIvideo_fu_652_ap_ready == 1'b1)) begin
            grp_Mat2AXIvideo_fu_652_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Sobel_1_fu_619_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_Sobel_1_fu_619_ap_start_reg <= 1'b1;
        end else if ((grp_Sobel_1_fu_619_ap_ready == 1'b1)) begin
            grp_Sobel_1_fu_619_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Sobel_fu_609_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_Sobel_fu_609_ap_start_reg <= 1'b1;
        end else if ((grp_Sobel_fu_609_ap_ready == 1'b1)) begin
            grp_Sobel_fu_609_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_load_A)) begin
        OUTPUT_STREAM_V_data_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_load_B)) begin
        OUTPUT_STREAM_V_data_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_load_A)) begin
        OUTPUT_STREAM_V_dest_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_load_B)) begin
        OUTPUT_STREAM_V_dest_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_load_A)) begin
        OUTPUT_STREAM_V_id_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_load_B)) begin
        OUTPUT_STREAM_V_id_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_load_A)) begin
        OUTPUT_STREAM_V_keep_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_load_B)) begin
        OUTPUT_STREAM_V_keep_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_load_A)) begin
        OUTPUT_STREAM_V_last_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_load_B)) begin
        OUTPUT_STREAM_V_last_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_load_A)) begin
        OUTPUT_STREAM_V_strb_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_load_B)) begin
        OUTPUT_STREAM_V_strb_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_load_A)) begin
        OUTPUT_STREAM_V_user_V_1_payload_A <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_load_B)) begin
        OUTPUT_STREAM_V_user_V_1_payload_B <= grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TUSER;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Enabled_V_blk_n = Enabled_V_empty_n;
    end else begin
        Enabled_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == Enabled_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        Enabled_V_read = 1'b1;
    end else begin
        Enabled_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_sel)) begin
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        OUTPUT_STREAM_V_data_V_1_vld_in = grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
    end else begin
        OUTPUT_STREAM_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_sel)) begin
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        OUTPUT_STREAM_V_dest_V_1_vld_in = grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
    end else begin
        OUTPUT_STREAM_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_sel)) begin
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        OUTPUT_STREAM_V_id_V_1_vld_in = grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
    end else begin
        OUTPUT_STREAM_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_sel)) begin
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        OUTPUT_STREAM_V_keep_V_1_vld_in = grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
    end else begin
        OUTPUT_STREAM_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_sel)) begin
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        OUTPUT_STREAM_V_last_V_1_vld_in = grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
    end else begin
        OUTPUT_STREAM_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_sel)) begin
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        OUTPUT_STREAM_V_strb_V_1_vld_in = grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
    end else begin
        OUTPUT_STREAM_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_sel)) begin
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        OUTPUT_STREAM_V_user_V_1_vld_in = grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TVALID;
    end else begin
        OUTPUT_STREAM_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout = img_6_data_stream_0_dout;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout = img_0_data_stream_0_V_dout;
    end else begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_dout = img_6_data_stream_0_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n = img_6_data_stream_0_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n = img_0_data_stream_0_V_empty_n;
    end else begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_empty_n = img_6_data_stream_0_empty_n;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout = img_6_data_stream_1_dout;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout = img_0_data_stream_1_V_dout;
    end else begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_dout = img_6_data_stream_1_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n = img_6_data_stream_1_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n = img_0_data_stream_1_V_empty_n;
    end else begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_empty_n = img_6_data_stream_1_empty_n;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout = img_6_data_stream_2_dout;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout = img_0_data_stream_2_V_dout;
    end else begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_dout = img_6_data_stream_2_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n = img_6_data_stream_2_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n = img_0_data_stream_2_V_empty_n;
    end else begin
        grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_empty_n = img_6_data_stream_2_empty_n;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        img_0_data_stream_0_V_read = grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        img_0_data_stream_0_V_read = grp_CvtColor_1_fu_639_p_src_data_stream_0_V_read;
    end else begin
        img_0_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        img_0_data_stream_1_V_read = grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        img_0_data_stream_1_V_read = grp_CvtColor_1_fu_639_p_src_data_stream_1_V_read;
    end else begin
        img_0_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        img_0_data_stream_2_V_read = grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        img_0_data_stream_2_V_read = grp_CvtColor_1_fu_639_p_src_data_stream_2_V_read;
    end else begin
        img_0_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_1_data_stream_0_read = grp_GaussianBlur_fu_629_p_src_data_stream_0_V_read;
    end else begin
        img_1_data_stream_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_1_data_stream_0_write = grp_CvtColor_1_fu_639_p_dst_data_stream_0_V_write;
    end else begin
        img_1_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_1_data_stream_1_read = grp_GaussianBlur_fu_629_p_src_data_stream_1_V_read;
    end else begin
        img_1_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_1_data_stream_1_write = grp_CvtColor_1_fu_639_p_dst_data_stream_1_V_write;
    end else begin
        img_1_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_1_data_stream_2_read = grp_GaussianBlur_fu_629_p_src_data_stream_2_V_read;
    end else begin
        img_1_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_1_data_stream_2_write = grp_CvtColor_1_fu_639_p_dst_data_stream_2_V_write;
    end else begin
        img_1_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_2_data_stream_0_read = grp_Duplicate_fu_676_src_data_stream_0_V_read;
    end else begin
        img_2_data_stream_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_2_data_stream_0_write = grp_GaussianBlur_fu_629_p_dst_data_stream_0_V_write;
    end else begin
        img_2_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_2_data_stream_1_read = grp_Duplicate_fu_676_src_data_stream_1_V_read;
    end else begin
        img_2_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_2_data_stream_1_write = grp_GaussianBlur_fu_629_p_dst_data_stream_1_V_write;
    end else begin
        img_2_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_2_data_stream_2_read = grp_Duplicate_fu_676_src_data_stream_2_V_read;
    end else begin
        img_2_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_2_data_stream_2_write = grp_GaussianBlur_fu_629_p_dst_data_stream_2_V_write;
    end else begin
        img_2_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_2a_data_stream_0_read = grp_Sobel_fu_609_p_src_data_stream_0_V_read;
    end else begin
        img_2a_data_stream_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_2a_data_stream_0_write = grp_Duplicate_fu_676_dst1_data_stream_0_V_write;
    end else begin
        img_2a_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_2a_data_stream_1_read = grp_Sobel_fu_609_p_src_data_stream_1_V_read;
    end else begin
        img_2a_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_2a_data_stream_1_write = grp_Duplicate_fu_676_dst1_data_stream_1_V_write;
    end else begin
        img_2a_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_2a_data_stream_2_read = grp_Sobel_fu_609_p_src_data_stream_2_V_read;
    end else begin
        img_2a_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_2a_data_stream_2_write = grp_Duplicate_fu_676_dst1_data_stream_2_V_write;
    end else begin
        img_2a_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_2b_data_stream_0_read = grp_Sobel_1_fu_619_p_src_data_stream_0_V_read;
    end else begin
        img_2b_data_stream_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_2b_data_stream_0_write = grp_Duplicate_fu_676_dst2_data_stream_0_V_write;
    end else begin
        img_2b_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_2b_data_stream_1_read = grp_Sobel_1_fu_619_p_src_data_stream_1_V_read;
    end else begin
        img_2b_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_2b_data_stream_1_write = grp_Duplicate_fu_676_dst2_data_stream_1_V_write;
    end else begin
        img_2b_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_2b_data_stream_2_read = grp_Sobel_1_fu_619_p_src_data_stream_2_V_read;
    end else begin
        img_2b_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        img_2b_data_stream_2_write = grp_Duplicate_fu_676_dst2_data_stream_2_V_write;
    end else begin
        img_2b_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_3_data_stream_0_read = grp_AddWeighted_fu_596_src2_data_stream_0_V_read;
    end else begin
        img_3_data_stream_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_3_data_stream_0_write = grp_Sobel_fu_609_p_dst_data_stream_0_V_write;
    end else begin
        img_3_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_3_data_stream_1_read = grp_AddWeighted_fu_596_src2_data_stream_1_V_read;
    end else begin
        img_3_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_3_data_stream_1_write = grp_Sobel_fu_609_p_dst_data_stream_1_V_write;
    end else begin
        img_3_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_3_data_stream_2_read = grp_AddWeighted_fu_596_src2_data_stream_2_V_read;
    end else begin
        img_3_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_3_data_stream_2_write = grp_Sobel_fu_609_p_dst_data_stream_2_V_write;
    end else begin
        img_3_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_4_data_stream_0_read = grp_AddWeighted_fu_596_src1_data_stream_0_V_read;
    end else begin
        img_4_data_stream_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_4_data_stream_0_write = grp_Sobel_1_fu_619_p_dst_data_stream_0_V_write;
    end else begin
        img_4_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_4_data_stream_1_read = grp_AddWeighted_fu_596_src1_data_stream_1_V_read;
    end else begin
        img_4_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_4_data_stream_1_write = grp_Sobel_1_fu_619_p_dst_data_stream_1_V_write;
    end else begin
        img_4_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_4_data_stream_2_read = grp_AddWeighted_fu_596_src1_data_stream_2_V_read;
    end else begin
        img_4_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_4_data_stream_2_write = grp_Sobel_1_fu_619_p_dst_data_stream_2_V_write;
    end else begin
        img_4_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_5_data_stream_0_read = grp_CvtColor_fu_689_p_src_data_stream_0_V_read;
    end else begin
        img_5_data_stream_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_5_data_stream_0_write = grp_AddWeighted_fu_596_dst_data_stream_0_V_write;
    end else begin
        img_5_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_5_data_stream_1_read = grp_CvtColor_fu_689_p_src_data_stream_1_V_read;
    end else begin
        img_5_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_5_data_stream_1_write = grp_AddWeighted_fu_596_dst_data_stream_1_V_write;
    end else begin
        img_5_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_5_data_stream_2_read = grp_CvtColor_fu_689_p_src_data_stream_2_V_read;
    end else begin
        img_5_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_5_data_stream_2_write = grp_AddWeighted_fu_596_dst_data_stream_2_V_write;
    end else begin
        img_5_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        img_6_data_stream_0_read = grp_Mat2AXIvideo_fu_652_img_data_stream_0_V_read;
    end else begin
        img_6_data_stream_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_6_data_stream_0_write = grp_CvtColor_fu_689_p_dst_data_stream_0_V_write;
    end else begin
        img_6_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        img_6_data_stream_1_read = grp_Mat2AXIvideo_fu_652_img_data_stream_1_V_read;
    end else begin
        img_6_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_6_data_stream_1_write = grp_CvtColor_fu_689_p_dst_data_stream_1_V_write;
    end else begin
        img_6_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        img_6_data_stream_2_read = grp_Mat2AXIvideo_fu_652_img_data_stream_2_V_read;
    end else begin
        img_6_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_6_data_stream_2_write = grp_CvtColor_fu_689_p_dst_data_stream_2_V_write;
    end else begin
        img_6_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == Enabled_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'd1 == Enabled_V_read_read_fu_590_p2) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if ((~((1'b0 == Enabled_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'd0 == Enabled_V_read_read_fu_590_p2) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_CvtColor_1_fu_639_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_GaussianBlur_fu_629_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_Duplicate_fu_676_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_AddWeighted_fu_596_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_CvtColor_fu_689_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_Mat2AXIvideo_fu_652_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((grp_Mat2AXIvideo_fu_652_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Enabled_V_read_read_fu_590_p2 = Enabled_V_dout;

assign OUTPUT_STREAM_TDATA = OUTPUT_STREAM_V_data_V_1_data_out;

assign OUTPUT_STREAM_TDEST = OUTPUT_STREAM_V_dest_V_1_data_out;

assign OUTPUT_STREAM_TID = OUTPUT_STREAM_V_id_V_1_data_out;

assign OUTPUT_STREAM_TKEEP = OUTPUT_STREAM_V_keep_V_1_data_out;

assign OUTPUT_STREAM_TLAST = OUTPUT_STREAM_V_last_V_1_data_out;

assign OUTPUT_STREAM_TSTRB = OUTPUT_STREAM_V_strb_V_1_data_out;

assign OUTPUT_STREAM_TUSER = OUTPUT_STREAM_V_user_V_1_data_out;

assign OUTPUT_STREAM_TVALID = OUTPUT_STREAM_V_dest_V_1_state[1'd0];

assign OUTPUT_STREAM_V_data_V_1_ack_in = OUTPUT_STREAM_V_data_V_1_state[1'd1];

assign OUTPUT_STREAM_V_data_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_data_V_1_load_A = (~OUTPUT_STREAM_V_data_V_1_sel_wr & OUTPUT_STREAM_V_data_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_data_V_1_load_B = (OUTPUT_STREAM_V_data_V_1_state_cmp_full & OUTPUT_STREAM_V_data_V_1_sel_wr);

assign OUTPUT_STREAM_V_data_V_1_sel = OUTPUT_STREAM_V_data_V_1_sel_rd;

assign OUTPUT_STREAM_V_data_V_1_state_cmp_full = ((OUTPUT_STREAM_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_data_V_1_vld_out = OUTPUT_STREAM_V_data_V_1_state[1'd0];

assign OUTPUT_STREAM_V_dest_V_1_ack_in = OUTPUT_STREAM_V_dest_V_1_state[1'd1];

assign OUTPUT_STREAM_V_dest_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_dest_V_1_load_A = (~OUTPUT_STREAM_V_dest_V_1_sel_wr & OUTPUT_STREAM_V_dest_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_dest_V_1_load_B = (OUTPUT_STREAM_V_dest_V_1_state_cmp_full & OUTPUT_STREAM_V_dest_V_1_sel_wr);

assign OUTPUT_STREAM_V_dest_V_1_sel = OUTPUT_STREAM_V_dest_V_1_sel_rd;

assign OUTPUT_STREAM_V_dest_V_1_state_cmp_full = ((OUTPUT_STREAM_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_dest_V_1_vld_out = OUTPUT_STREAM_V_dest_V_1_state[1'd0];

assign OUTPUT_STREAM_V_id_V_1_ack_in = OUTPUT_STREAM_V_id_V_1_state[1'd1];

assign OUTPUT_STREAM_V_id_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_id_V_1_load_A = (~OUTPUT_STREAM_V_id_V_1_sel_wr & OUTPUT_STREAM_V_id_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_id_V_1_load_B = (OUTPUT_STREAM_V_id_V_1_state_cmp_full & OUTPUT_STREAM_V_id_V_1_sel_wr);

assign OUTPUT_STREAM_V_id_V_1_sel = OUTPUT_STREAM_V_id_V_1_sel_rd;

assign OUTPUT_STREAM_V_id_V_1_state_cmp_full = ((OUTPUT_STREAM_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_id_V_1_vld_out = OUTPUT_STREAM_V_id_V_1_state[1'd0];

assign OUTPUT_STREAM_V_keep_V_1_ack_in = OUTPUT_STREAM_V_keep_V_1_state[1'd1];

assign OUTPUT_STREAM_V_keep_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_keep_V_1_load_A = (~OUTPUT_STREAM_V_keep_V_1_sel_wr & OUTPUT_STREAM_V_keep_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_keep_V_1_load_B = (OUTPUT_STREAM_V_keep_V_1_state_cmp_full & OUTPUT_STREAM_V_keep_V_1_sel_wr);

assign OUTPUT_STREAM_V_keep_V_1_sel = OUTPUT_STREAM_V_keep_V_1_sel_rd;

assign OUTPUT_STREAM_V_keep_V_1_state_cmp_full = ((OUTPUT_STREAM_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_keep_V_1_vld_out = OUTPUT_STREAM_V_keep_V_1_state[1'd0];

assign OUTPUT_STREAM_V_last_V_1_ack_in = OUTPUT_STREAM_V_last_V_1_state[1'd1];

assign OUTPUT_STREAM_V_last_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_last_V_1_load_A = (~OUTPUT_STREAM_V_last_V_1_sel_wr & OUTPUT_STREAM_V_last_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_last_V_1_load_B = (OUTPUT_STREAM_V_last_V_1_state_cmp_full & OUTPUT_STREAM_V_last_V_1_sel_wr);

assign OUTPUT_STREAM_V_last_V_1_sel = OUTPUT_STREAM_V_last_V_1_sel_rd;

assign OUTPUT_STREAM_V_last_V_1_state_cmp_full = ((OUTPUT_STREAM_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_last_V_1_vld_out = OUTPUT_STREAM_V_last_V_1_state[1'd0];

assign OUTPUT_STREAM_V_strb_V_1_ack_in = OUTPUT_STREAM_V_strb_V_1_state[1'd1];

assign OUTPUT_STREAM_V_strb_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_strb_V_1_load_A = (~OUTPUT_STREAM_V_strb_V_1_sel_wr & OUTPUT_STREAM_V_strb_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_strb_V_1_load_B = (OUTPUT_STREAM_V_strb_V_1_state_cmp_full & OUTPUT_STREAM_V_strb_V_1_sel_wr);

assign OUTPUT_STREAM_V_strb_V_1_sel = OUTPUT_STREAM_V_strb_V_1_sel_rd;

assign OUTPUT_STREAM_V_strb_V_1_state_cmp_full = ((OUTPUT_STREAM_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_strb_V_1_vld_out = OUTPUT_STREAM_V_strb_V_1_state[1'd0];

assign OUTPUT_STREAM_V_user_V_1_ack_in = OUTPUT_STREAM_V_user_V_1_state[1'd1];

assign OUTPUT_STREAM_V_user_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_user_V_1_load_A = (~OUTPUT_STREAM_V_user_V_1_sel_wr & OUTPUT_STREAM_V_user_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_user_V_1_load_B = (OUTPUT_STREAM_V_user_V_1_state_cmp_full & OUTPUT_STREAM_V_user_V_1_sel_wr);

assign OUTPUT_STREAM_V_user_V_1_sel = OUTPUT_STREAM_V_user_V_1_sel_rd;

assign OUTPUT_STREAM_V_user_V_1_state_cmp_full = ((OUTPUT_STREAM_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_user_V_1_vld_out = OUTPUT_STREAM_V_user_V_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == Enabled_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state16 = ((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in));
end

always @ (*) begin
    ap_block_state1_ignore_call0 = ((1'b0 == Enabled_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state8_on_subcall_done = ((grp_Sobel_1_fu_619_ap_done == 1'b0) | (grp_Sobel_fu_609_ap_done == 1'b0));
end

assign grp_AddWeighted_fu_596_ap_start = grp_AddWeighted_fu_596_ap_start_reg;

assign grp_CvtColor_1_fu_639_ap_start = grp_CvtColor_1_fu_639_ap_start_reg;

assign grp_CvtColor_fu_689_ap_start = grp_CvtColor_fu_689_ap_start_reg;

assign grp_Duplicate_fu_676_ap_start = grp_Duplicate_fu_676_ap_start_reg;

assign grp_GaussianBlur_fu_629_ap_start = grp_GaussianBlur_fu_629_ap_start_reg;

assign grp_Mat2AXIvideo_fu_652_OUTPUT_STREAM_TREADY = OUTPUT_STREAM_V_dest_V_1_state[1'd1];

assign grp_Mat2AXIvideo_fu_652_ap_start = grp_Mat2AXIvideo_fu_652_ap_start_reg;

assign grp_Sobel_1_fu_619_ap_start = grp_Sobel_1_fu_619_ap_start_reg;

assign grp_Sobel_fu_609_ap_start = grp_Sobel_fu_609_ap_start_reg;

endmodule //Block_proc307309
