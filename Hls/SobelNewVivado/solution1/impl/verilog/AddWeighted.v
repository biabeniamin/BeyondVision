// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddWeighted (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src1_data_stream_0_V_dout,
        src1_data_stream_0_V_empty_n,
        src1_data_stream_0_V_read,
        src1_data_stream_1_V_dout,
        src1_data_stream_1_V_empty_n,
        src1_data_stream_1_V_read,
        src1_data_stream_2_V_dout,
        src1_data_stream_2_V_empty_n,
        src1_data_stream_2_V_read,
        src2_data_stream_0_V_dout,
        src2_data_stream_0_V_empty_n,
        src2_data_stream_0_V_read,
        src2_data_stream_1_V_dout,
        src2_data_stream_1_V_empty_n,
        src2_data_stream_1_V_read,
        src2_data_stream_2_V_dout,
        src2_data_stream_2_V_empty_n,
        src2_data_stream_2_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] src1_data_stream_0_V_dout;
input   src1_data_stream_0_V_empty_n;
output   src1_data_stream_0_V_read;
input  [7:0] src1_data_stream_1_V_dout;
input   src1_data_stream_1_V_empty_n;
output   src1_data_stream_1_V_read;
input  [7:0] src1_data_stream_2_V_dout;
input   src1_data_stream_2_V_empty_n;
output   src1_data_stream_2_V_read;
input  [7:0] src2_data_stream_0_V_dout;
input   src2_data_stream_0_V_empty_n;
output   src2_data_stream_0_V_read;
input  [7:0] src2_data_stream_1_V_dout;
input   src2_data_stream_1_V_empty_n;
output   src2_data_stream_1_V_read;
input  [7:0] src2_data_stream_2_V_dout;
input   src2_data_stream_2_V_empty_n;
output   src2_data_stream_2_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src1_data_stream_0_V_read;
reg src1_data_stream_1_V_read;
reg src1_data_stream_2_V_read;
reg src2_data_stream_0_V_read;
reg src2_data_stream_1_V_read;
reg src2_data_stream_2_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_arithm_pro_fu_138_ap_start;
wire    grp_arithm_pro_fu_138_ap_done;
wire    grp_arithm_pro_fu_138_ap_idle;
wire    grp_arithm_pro_fu_138_ap_ready;
wire    grp_arithm_pro_fu_138_src1_data_stream_0_V_read;
wire    grp_arithm_pro_fu_138_src1_data_stream_1_V_read;
wire    grp_arithm_pro_fu_138_src1_data_stream_2_V_read;
wire    grp_arithm_pro_fu_138_src2_data_stream_0_V_read;
wire    grp_arithm_pro_fu_138_src2_data_stream_1_V_read;
wire    grp_arithm_pro_fu_138_src2_data_stream_2_V_read;
wire   [7:0] grp_arithm_pro_fu_138_dst_data_stream_0_V_din;
wire    grp_arithm_pro_fu_138_dst_data_stream_0_V_write;
wire   [7:0] grp_arithm_pro_fu_138_dst_data_stream_1_V_din;
wire    grp_arithm_pro_fu_138_dst_data_stream_1_V_write;
wire   [7:0] grp_arithm_pro_fu_138_dst_data_stream_2_V_din;
wire    grp_arithm_pro_fu_138_dst_data_stream_2_V_write;
reg    grp_arithm_pro_fu_138_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_arithm_pro_fu_138_ap_start_reg = 1'b0;
end

arithm_pro grp_arithm_pro_fu_138(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_arithm_pro_fu_138_ap_start),
    .ap_done(grp_arithm_pro_fu_138_ap_done),
    .ap_idle(grp_arithm_pro_fu_138_ap_idle),
    .ap_ready(grp_arithm_pro_fu_138_ap_ready),
    .src1_data_stream_0_V_dout(src1_data_stream_0_V_dout),
    .src1_data_stream_0_V_empty_n(src1_data_stream_0_V_empty_n),
    .src1_data_stream_0_V_read(grp_arithm_pro_fu_138_src1_data_stream_0_V_read),
    .src1_data_stream_1_V_dout(src1_data_stream_1_V_dout),
    .src1_data_stream_1_V_empty_n(src1_data_stream_1_V_empty_n),
    .src1_data_stream_1_V_read(grp_arithm_pro_fu_138_src1_data_stream_1_V_read),
    .src1_data_stream_2_V_dout(src1_data_stream_2_V_dout),
    .src1_data_stream_2_V_empty_n(src1_data_stream_2_V_empty_n),
    .src1_data_stream_2_V_read(grp_arithm_pro_fu_138_src1_data_stream_2_V_read),
    .src2_data_stream_0_V_dout(src2_data_stream_0_V_dout),
    .src2_data_stream_0_V_empty_n(src2_data_stream_0_V_empty_n),
    .src2_data_stream_0_V_read(grp_arithm_pro_fu_138_src2_data_stream_0_V_read),
    .src2_data_stream_1_V_dout(src2_data_stream_1_V_dout),
    .src2_data_stream_1_V_empty_n(src2_data_stream_1_V_empty_n),
    .src2_data_stream_1_V_read(grp_arithm_pro_fu_138_src2_data_stream_1_V_read),
    .src2_data_stream_2_V_dout(src2_data_stream_2_V_dout),
    .src2_data_stream_2_V_empty_n(src2_data_stream_2_V_empty_n),
    .src2_data_stream_2_V_read(grp_arithm_pro_fu_138_src2_data_stream_2_V_read),
    .dst_data_stream_0_V_din(grp_arithm_pro_fu_138_dst_data_stream_0_V_din),
    .dst_data_stream_0_V_full_n(dst_data_stream_0_V_full_n),
    .dst_data_stream_0_V_write(grp_arithm_pro_fu_138_dst_data_stream_0_V_write),
    .dst_data_stream_1_V_din(grp_arithm_pro_fu_138_dst_data_stream_1_V_din),
    .dst_data_stream_1_V_full_n(dst_data_stream_1_V_full_n),
    .dst_data_stream_1_V_write(grp_arithm_pro_fu_138_dst_data_stream_1_V_write),
    .dst_data_stream_2_V_din(grp_arithm_pro_fu_138_dst_data_stream_2_V_din),
    .dst_data_stream_2_V_full_n(dst_data_stream_2_V_full_n),
    .dst_data_stream_2_V_write(grp_arithm_pro_fu_138_dst_data_stream_2_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_arithm_pro_fu_138_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_arithm_pro_fu_138_ap_start_reg <= 1'b1;
        end else if ((grp_arithm_pro_fu_138_ap_ready == 1'b1)) begin
            grp_arithm_pro_fu_138_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_arithm_pro_fu_138_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_arithm_pro_fu_138_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_data_stream_0_V_write = grp_arithm_pro_fu_138_dst_data_stream_0_V_write;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_data_stream_1_V_write = grp_arithm_pro_fu_138_dst_data_stream_1_V_write;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_data_stream_2_V_write = grp_arithm_pro_fu_138_dst_data_stream_2_V_write;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src1_data_stream_0_V_read = grp_arithm_pro_fu_138_src1_data_stream_0_V_read;
    end else begin
        src1_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src1_data_stream_1_V_read = grp_arithm_pro_fu_138_src1_data_stream_1_V_read;
    end else begin
        src1_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src1_data_stream_2_V_read = grp_arithm_pro_fu_138_src1_data_stream_2_V_read;
    end else begin
        src1_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src2_data_stream_0_V_read = grp_arithm_pro_fu_138_src2_data_stream_0_V_read;
    end else begin
        src2_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src2_data_stream_1_V_read = grp_arithm_pro_fu_138_src2_data_stream_1_V_read;
    end else begin
        src2_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src2_data_stream_2_V_read = grp_arithm_pro_fu_138_src2_data_stream_2_V_read;
    end else begin
        src2_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_arithm_pro_fu_138_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign dst_data_stream_0_V_din = grp_arithm_pro_fu_138_dst_data_stream_0_V_din;

assign dst_data_stream_1_V_din = grp_arithm_pro_fu_138_dst_data_stream_1_V_din;

assign dst_data_stream_2_V_din = grp_arithm_pro_fu_138_dst_data_stream_2_V_din;

assign grp_arithm_pro_fu_138_ap_start = grp_arithm_pro_fu_138_ap_start_reg;

endmodule //AddWeighted
