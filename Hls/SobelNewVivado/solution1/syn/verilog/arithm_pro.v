// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module arithm_pro (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src1_data_stream_0_V_dout,
        src1_data_stream_0_V_empty_n,
        src1_data_stream_0_V_read,
        src1_data_stream_1_V_dout,
        src1_data_stream_1_V_empty_n,
        src1_data_stream_1_V_read,
        src1_data_stream_2_V_dout,
        src1_data_stream_2_V_empty_n,
        src1_data_stream_2_V_read,
        src2_data_stream_0_V_dout,
        src2_data_stream_0_V_empty_n,
        src2_data_stream_0_V_read,
        src2_data_stream_1_V_dout,
        src2_data_stream_1_V_empty_n,
        src2_data_stream_1_V_read,
        src2_data_stream_2_V_dout,
        src2_data_stream_2_V_empty_n,
        src2_data_stream_2_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state34 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] src1_data_stream_0_V_dout;
input   src1_data_stream_0_V_empty_n;
output   src1_data_stream_0_V_read;
input  [7:0] src1_data_stream_1_V_dout;
input   src1_data_stream_1_V_empty_n;
output   src1_data_stream_1_V_read;
input  [7:0] src1_data_stream_2_V_dout;
input   src1_data_stream_2_V_empty_n;
output   src1_data_stream_2_V_read;
input  [7:0] src2_data_stream_0_V_dout;
input   src2_data_stream_0_V_empty_n;
output   src2_data_stream_0_V_read;
input  [7:0] src2_data_stream_1_V_dout;
input   src2_data_stream_1_V_empty_n;
output   src2_data_stream_1_V_read;
input  [7:0] src2_data_stream_2_V_dout;
input   src2_data_stream_2_V_empty_n;
output   src2_data_stream_2_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src1_data_stream_0_V_read;
reg src1_data_stream_1_V_read;
reg src1_data_stream_2_V_read;
reg src2_data_stream_0_V_read;
reg src2_data_stream_1_V_read;
reg src2_data_stream_2_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src1_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_408;
reg    src1_data_stream_1_V_blk_n;
reg    src1_data_stream_2_V_blk_n;
reg    src2_data_stream_0_V_blk_n;
reg    src2_data_stream_1_V_blk_n;
reg    src2_data_stream_2_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter30;
reg   [0:0] exitcond_reg_408_pp0_iter29_reg;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg   [10:0] t_V_1_reg_250;
wire   [0:0] exitcond4_fu_351_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] i_V_fu_357_p2;
reg   [10:0] i_V_reg_403;
wire   [0:0] exitcond_fu_363_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
wire    ap_block_state22_pp0_stage0_iter19;
wire    ap_block_state23_pp0_stage0_iter20;
wire    ap_block_state24_pp0_stage0_iter21;
wire    ap_block_state25_pp0_stage0_iter22;
wire    ap_block_state26_pp0_stage0_iter23;
wire    ap_block_state27_pp0_stage0_iter24;
wire    ap_block_state28_pp0_stage0_iter25;
wire    ap_block_state29_pp0_stage0_iter26;
wire    ap_block_state30_pp0_stage0_iter27;
wire    ap_block_state31_pp0_stage0_iter28;
wire    ap_block_state32_pp0_stage0_iter29;
reg    ap_block_state33_pp0_stage0_iter30;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_408_pp0_iter1_reg;
reg   [0:0] exitcond_reg_408_pp0_iter2_reg;
reg   [0:0] exitcond_reg_408_pp0_iter3_reg;
reg   [0:0] exitcond_reg_408_pp0_iter4_reg;
reg   [0:0] exitcond_reg_408_pp0_iter5_reg;
reg   [0:0] exitcond_reg_408_pp0_iter6_reg;
reg   [0:0] exitcond_reg_408_pp0_iter7_reg;
reg   [0:0] exitcond_reg_408_pp0_iter8_reg;
reg   [0:0] exitcond_reg_408_pp0_iter9_reg;
reg   [0:0] exitcond_reg_408_pp0_iter10_reg;
reg   [0:0] exitcond_reg_408_pp0_iter11_reg;
reg   [0:0] exitcond_reg_408_pp0_iter12_reg;
reg   [0:0] exitcond_reg_408_pp0_iter13_reg;
reg   [0:0] exitcond_reg_408_pp0_iter14_reg;
reg   [0:0] exitcond_reg_408_pp0_iter15_reg;
reg   [0:0] exitcond_reg_408_pp0_iter16_reg;
reg   [0:0] exitcond_reg_408_pp0_iter17_reg;
reg   [0:0] exitcond_reg_408_pp0_iter18_reg;
reg   [0:0] exitcond_reg_408_pp0_iter19_reg;
reg   [0:0] exitcond_reg_408_pp0_iter20_reg;
reg   [0:0] exitcond_reg_408_pp0_iter21_reg;
reg   [0:0] exitcond_reg_408_pp0_iter22_reg;
reg   [0:0] exitcond_reg_408_pp0_iter23_reg;
reg   [0:0] exitcond_reg_408_pp0_iter24_reg;
reg   [0:0] exitcond_reg_408_pp0_iter25_reg;
reg   [0:0] exitcond_reg_408_pp0_iter26_reg;
reg   [0:0] exitcond_reg_408_pp0_iter27_reg;
reg   [0:0] exitcond_reg_408_pp0_iter28_reg;
wire   [10:0] j_V_fu_369_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_46_reg_417;
reg   [7:0] tmp_47_reg_422;
reg   [7:0] tmp_48_reg_427;
reg   [7:0] tmp_49_reg_432;
reg   [7:0] tmp_50_reg_437;
reg   [7:0] tmp_51_reg_442;
wire   [63:0] grp_fu_333_p1;
reg   [63:0] tmp_27_reg_477;
wire   [63:0] grp_fu_336_p1;
reg   [63:0] tmp_29_reg_482;
wire   [63:0] grp_fu_339_p1;
reg   [63:0] tmp_297_1_reg_487;
wire   [63:0] grp_fu_342_p1;
reg   [63:0] tmp_299_1_reg_492;
wire   [63:0] grp_fu_345_p1;
reg   [63:0] tmp_297_2_reg_497;
wire   [63:0] grp_fu_348_p1;
reg   [63:0] tmp_299_2_reg_502;
wire   [63:0] grp_fu_303_p2;
reg   [63:0] t1_reg_507;
wire   [63:0] grp_fu_308_p2;
reg   [63:0] t2_reg_512;
wire   [63:0] grp_fu_313_p2;
reg   [63:0] t1_1_reg_517;
wire   [63:0] grp_fu_318_p2;
reg   [63:0] t2_1_reg_522;
wire   [63:0] grp_fu_323_p2;
reg   [63:0] t1_2_reg_527;
wire   [63:0] grp_fu_328_p2;
reg   [63:0] t2_2_reg_532;
wire   [63:0] grp_fu_276_p2;
reg   [63:0] tmp_30_reg_537;
wire   [63:0] grp_fu_280_p2;
reg   [63:0] tmp_300_1_reg_542;
wire   [63:0] grp_fu_284_p2;
reg   [63:0] tmp_300_2_reg_547;
wire   [63:0] grp_fu_288_p2;
reg   [63:0] v_assign_reg_552;
wire   [63:0] grp_fu_293_p2;
reg   [63:0] v_assign_1_reg_557;
wire   [63:0] grp_fu_298_p2;
reg   [63:0] v_assign_2_reg_562;
wire   [7:0] grp_operator_1_fu_261_ap_return;
reg   [7:0] d_val_0_reg_567;
wire   [7:0] grp_operator_1_fu_266_ap_return;
reg   [7:0] d_val_1_reg_572;
wire   [7:0] grp_operator_1_fu_271_ap_return;
reg   [7:0] tmp_10_reg_577;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    grp_operator_1_fu_261_ap_ce;
reg    grp_operator_1_fu_266_ap_ce;
reg    grp_operator_1_fu_271_ap_ce;
reg   [10:0] t_V_reg_239;
wire    ap_CS_fsm_state34;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_333_p0;
wire   [31:0] grp_fu_336_p0;
wire   [31:0] grp_fu_339_p0;
wire   [31:0] grp_fu_342_p0;
wire   [31:0] grp_fu_345_p0;
wire   [31:0] grp_fu_348_p0;
reg    grp_fu_276_ce;
reg    grp_fu_280_ce;
reg    grp_fu_284_ce;
reg    grp_fu_288_ce;
reg    grp_fu_293_ce;
reg    grp_fu_298_ce;
reg    grp_fu_303_ce;
reg    grp_fu_308_ce;
reg    grp_fu_313_ce;
reg    grp_fu_318_ce;
reg    grp_fu_323_ce;
reg    grp_fu_328_ce;
reg    grp_fu_333_ce;
reg    grp_fu_336_ce;
reg    grp_fu_339_ce;
reg    grp_fu_342_ce;
reg    grp_fu_345_ce;
reg    grp_fu_348_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
end

operator_1 grp_operator_1_fu_261(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .v(v_assign_reg_552),
    .ap_return(grp_operator_1_fu_261_ap_return),
    .ap_ce(grp_operator_1_fu_261_ap_ce)
);

operator_1 grp_operator_1_fu_266(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .v(v_assign_1_reg_557),
    .ap_return(grp_operator_1_fu_266_ap_return),
    .ap_ce(grp_operator_1_fu_266_ap_ce)
);

operator_1 grp_operator_1_fu_271(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .v(v_assign_2_reg_562),
    .ap_return(grp_operator_1_fu_271_ap_return),
    .ap_ce(grp_operator_1_fu_271_ap_ce)
);

SobelFilter_dadd_DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dadd_DeQ_U135(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_reg_507),
    .din1(t2_reg_512),
    .ce(grp_fu_276_ce),
    .dout(grp_fu_276_p2)
);

SobelFilter_dadd_DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dadd_DeQ_U136(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_1_reg_517),
    .din1(t2_1_reg_522),
    .ce(grp_fu_280_ce),
    .dout(grp_fu_280_p2)
);

SobelFilter_dadd_DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dadd_DeQ_U137(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_2_reg_527),
    .din1(t2_2_reg_532),
    .ce(grp_fu_284_ce),
    .dout(grp_fu_284_p2)
);

SobelFilter_dadd_DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dadd_DeQ_U138(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_30_reg_537),
    .din1(64'd0),
    .ce(grp_fu_288_ce),
    .dout(grp_fu_288_p2)
);

SobelFilter_dadd_DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dadd_DeQ_U139(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_300_1_reg_542),
    .din1(64'd0),
    .ce(grp_fu_293_ce),
    .dout(grp_fu_293_p2)
);

SobelFilter_dadd_DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dadd_DeQ_U140(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_300_2_reg_547),
    .din1(64'd0),
    .ce(grp_fu_298_ce),
    .dout(grp_fu_298_p2)
);

SobelFilter_dmul_Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dmul_Ee0_U141(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_27_reg_477),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_303_ce),
    .dout(grp_fu_303_p2)
);

SobelFilter_dmul_Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dmul_Ee0_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_29_reg_482),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_308_ce),
    .dout(grp_fu_308_p2)
);

SobelFilter_dmul_Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dmul_Ee0_U143(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_297_1_reg_487),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_313_ce),
    .dout(grp_fu_313_p2)
);

SobelFilter_dmul_Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dmul_Ee0_U144(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_299_1_reg_492),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_318_ce),
    .dout(grp_fu_318_p2)
);

SobelFilter_dmul_Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dmul_Ee0_U145(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_297_2_reg_497),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_323_ce),
    .dout(grp_fu_323_p2)
);

SobelFilter_dmul_Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
SobelFilter_dmul_Ee0_U146(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_299_2_reg_502),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_328_ce),
    .dout(grp_fu_328_p2)
);

SobelFilter_sitodFfa #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
SobelFilter_sitodFfa_U147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .ce(grp_fu_333_ce),
    .dout(grp_fu_333_p1)
);

SobelFilter_sitodFfa #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
SobelFilter_sitodFfa_U148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_336_p0),
    .ce(grp_fu_336_ce),
    .dout(grp_fu_336_p1)
);

SobelFilter_sitodFfa #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
SobelFilter_sitodFfa_U149(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_339_p0),
    .ce(grp_fu_339_ce),
    .dout(grp_fu_339_p1)
);

SobelFilter_sitodFfa #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
SobelFilter_sitodFfa_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_342_p0),
    .ce(grp_fu_342_ce),
    .dout(grp_fu_342_p1)
);

SobelFilter_sitodFfa #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
SobelFilter_sitodFfa_U151(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_345_p0),
    .ce(grp_fu_345_ce),
    .dout(grp_fu_345_p1)
);

SobelFilter_sitodFfa #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
SobelFilter_sitodFfa_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_348_p0),
    .ce(grp_fu_348_ce),
    .dout(grp_fu_348_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond4_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end else if (((exitcond4_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter30 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_reg_250 <= j_V_fu_369_p2;
    end else if (((exitcond4_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_250 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        t_V_reg_239 <= i_V_reg_403;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_239 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_408_pp0_iter28_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_val_0_reg_567 <= grp_operator_1_fu_261_ap_return;
        d_val_1_reg_572 <= grp_operator_1_fu_266_ap_return;
        tmp_10_reg_577 <= grp_operator_1_fu_271_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_408 <= exitcond_fu_363_p2;
        exitcond_reg_408_pp0_iter1_reg <= exitcond_reg_408;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_reg_408_pp0_iter10_reg <= exitcond_reg_408_pp0_iter9_reg;
        exitcond_reg_408_pp0_iter11_reg <= exitcond_reg_408_pp0_iter10_reg;
        exitcond_reg_408_pp0_iter12_reg <= exitcond_reg_408_pp0_iter11_reg;
        exitcond_reg_408_pp0_iter13_reg <= exitcond_reg_408_pp0_iter12_reg;
        exitcond_reg_408_pp0_iter14_reg <= exitcond_reg_408_pp0_iter13_reg;
        exitcond_reg_408_pp0_iter15_reg <= exitcond_reg_408_pp0_iter14_reg;
        exitcond_reg_408_pp0_iter16_reg <= exitcond_reg_408_pp0_iter15_reg;
        exitcond_reg_408_pp0_iter17_reg <= exitcond_reg_408_pp0_iter16_reg;
        exitcond_reg_408_pp0_iter18_reg <= exitcond_reg_408_pp0_iter17_reg;
        exitcond_reg_408_pp0_iter19_reg <= exitcond_reg_408_pp0_iter18_reg;
        exitcond_reg_408_pp0_iter20_reg <= exitcond_reg_408_pp0_iter19_reg;
        exitcond_reg_408_pp0_iter21_reg <= exitcond_reg_408_pp0_iter20_reg;
        exitcond_reg_408_pp0_iter22_reg <= exitcond_reg_408_pp0_iter21_reg;
        exitcond_reg_408_pp0_iter23_reg <= exitcond_reg_408_pp0_iter22_reg;
        exitcond_reg_408_pp0_iter24_reg <= exitcond_reg_408_pp0_iter23_reg;
        exitcond_reg_408_pp0_iter25_reg <= exitcond_reg_408_pp0_iter24_reg;
        exitcond_reg_408_pp0_iter26_reg <= exitcond_reg_408_pp0_iter25_reg;
        exitcond_reg_408_pp0_iter27_reg <= exitcond_reg_408_pp0_iter26_reg;
        exitcond_reg_408_pp0_iter28_reg <= exitcond_reg_408_pp0_iter27_reg;
        exitcond_reg_408_pp0_iter29_reg <= exitcond_reg_408_pp0_iter28_reg;
        exitcond_reg_408_pp0_iter2_reg <= exitcond_reg_408_pp0_iter1_reg;
        exitcond_reg_408_pp0_iter3_reg <= exitcond_reg_408_pp0_iter2_reg;
        exitcond_reg_408_pp0_iter4_reg <= exitcond_reg_408_pp0_iter3_reg;
        exitcond_reg_408_pp0_iter5_reg <= exitcond_reg_408_pp0_iter4_reg;
        exitcond_reg_408_pp0_iter6_reg <= exitcond_reg_408_pp0_iter5_reg;
        exitcond_reg_408_pp0_iter7_reg <= exitcond_reg_408_pp0_iter6_reg;
        exitcond_reg_408_pp0_iter8_reg <= exitcond_reg_408_pp0_iter7_reg;
        exitcond_reg_408_pp0_iter9_reg <= exitcond_reg_408_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_403 <= i_V_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_408_pp0_iter12_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t1_1_reg_517 <= grp_fu_313_p2;
        t1_2_reg_527 <= grp_fu_323_p2;
        t1_reg_507 <= grp_fu_303_p2;
        t2_1_reg_522 <= grp_fu_318_p2;
        t2_2_reg_532 <= grp_fu_328_p2;
        t2_reg_512 <= grp_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_408_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_27_reg_477 <= grp_fu_333_p1;
        tmp_297_1_reg_487 <= grp_fu_339_p1;
        tmp_297_2_reg_497 <= grp_fu_345_p1;
        tmp_299_1_reg_492 <= grp_fu_342_p1;
        tmp_299_2_reg_502 <= grp_fu_348_p1;
        tmp_29_reg_482 <= grp_fu_336_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_408_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_300_1_reg_542 <= grp_fu_280_p2;
        tmp_300_2_reg_547 <= grp_fu_284_p2;
        tmp_30_reg_537 <= grp_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_46_reg_417 <= src1_data_stream_0_V_dout;
        tmp_47_reg_422 <= src1_data_stream_1_V_dout;
        tmp_48_reg_427 <= src1_data_stream_2_V_dout;
        tmp_49_reg_432 <= src2_data_stream_0_V_dout;
        tmp_50_reg_437 <= src2_data_stream_1_V_dout;
        tmp_51_reg_442 <= src2_data_stream_2_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_408_pp0_iter24_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v_assign_1_reg_557 <= grp_fu_293_p2;
        v_assign_2_reg_562 <= grp_fu_298_p2;
        v_assign_reg_552 <= grp_fu_288_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_363_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond4_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (ap_enable_reg_pp0_iter30 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_276_ce = 1'b1;
    end else begin
        grp_fu_276_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_280_ce = 1'b1;
    end else begin
        grp_fu_280_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_284_ce = 1'b1;
    end else begin
        grp_fu_284_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_288_ce = 1'b1;
    end else begin
        grp_fu_288_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_293_ce = 1'b1;
    end else begin
        grp_fu_293_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_298_ce = 1'b1;
    end else begin
        grp_fu_298_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_303_ce = 1'b1;
    end else begin
        grp_fu_303_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_308_ce = 1'b1;
    end else begin
        grp_fu_308_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_313_ce = 1'b1;
    end else begin
        grp_fu_313_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_318_ce = 1'b1;
    end else begin
        grp_fu_318_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_323_ce = 1'b1;
    end else begin
        grp_fu_323_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_328_ce = 1'b1;
    end else begin
        grp_fu_328_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_333_ce = 1'b1;
    end else begin
        grp_fu_333_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_336_ce = 1'b1;
    end else begin
        grp_fu_336_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_339_ce = 1'b1;
    end else begin
        grp_fu_339_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_342_ce = 1'b1;
    end else begin
        grp_fu_342_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_345_ce = 1'b1;
    end else begin
        grp_fu_345_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_348_ce = 1'b1;
    end else begin
        grp_fu_348_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_operator_1_fu_261_ap_ce = 1'b1;
    end else begin
        grp_operator_1_fu_261_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_operator_1_fu_266_ap_ce = 1'b1;
    end else begin
        grp_operator_1_fu_266_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_operator_1_fu_271_ap_ce = 1'b1;
    end else begin
        grp_operator_1_fu_271_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src1_data_stream_0_V_blk_n = src1_data_stream_0_V_empty_n;
    end else begin
        src1_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src1_data_stream_0_V_read = 1'b1;
    end else begin
        src1_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src1_data_stream_1_V_blk_n = src1_data_stream_1_V_empty_n;
    end else begin
        src1_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src1_data_stream_1_V_read = 1'b1;
    end else begin
        src1_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src1_data_stream_2_V_blk_n = src1_data_stream_2_V_empty_n;
    end else begin
        src1_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src1_data_stream_2_V_read = 1'b1;
    end else begin
        src1_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src2_data_stream_0_V_blk_n = src2_data_stream_0_V_empty_n;
    end else begin
        src2_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src2_data_stream_0_V_read = 1'b1;
    end else begin
        src2_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src2_data_stream_1_V_blk_n = src2_data_stream_1_V_empty_n;
    end else begin
        src2_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src2_data_stream_1_V_read = 1'b1;
    end else begin
        src2_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src2_data_stream_2_V_blk_n = src2_data_stream_2_V_empty_n;
    end else begin
        src2_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src2_data_stream_2_V_read = 1'b1;
    end else begin
        src2_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_363_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter29 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter30 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter29 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter30 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_363_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter30 == 1'b1) & (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_408 == 1'd0) & (src2_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src2_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src2_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter30 == 1'b1) & (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_408 == 1'd0) & (src2_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src2_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src2_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter30 == 1'b1) & (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_408 == 1'd0) & (src2_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src2_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src2_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_0_V_empty_n == 1'b0)))));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_pp0_stage0_iter30 = (((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_408_pp0_iter29_reg == 1'd0) & (dst_data_stream_0_V_full_n == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_reg_408 == 1'd0) & (src2_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src2_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src2_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_408 == 1'd0) & (src1_data_stream_0_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_data_stream_0_V_din = d_val_0_reg_567;

assign dst_data_stream_1_V_din = d_val_1_reg_572;

assign dst_data_stream_2_V_din = tmp_10_reg_577;

assign exitcond4_fu_351_p2 = ((t_V_reg_239 == 11'd1080) ? 1'b1 : 1'b0);

assign exitcond_fu_363_p2 = ((t_V_1_reg_250 == 11'd1920) ? 1'b1 : 1'b0);

assign grp_fu_333_p0 = tmp_46_reg_417;

assign grp_fu_336_p0 = tmp_49_reg_432;

assign grp_fu_339_p0 = tmp_47_reg_422;

assign grp_fu_342_p0 = tmp_50_reg_437;

assign grp_fu_345_p0 = tmp_48_reg_427;

assign grp_fu_348_p0 = tmp_51_reg_442;

assign i_V_fu_357_p2 = (t_V_reg_239 + 11'd1);

assign j_V_fu_369_p2 = (t_V_1_reg_250 + 11'd1);

endmodule //arithm_pro
