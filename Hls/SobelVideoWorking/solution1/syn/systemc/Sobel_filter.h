// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Sobel_filter_HH_
#define _Sobel_filter_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_proc306.h"

namespace ap_rtl {

struct Sobel_filter : public sc_module {
    // Port declarations 25
    sc_in< sc_lv<24> > INPUT_STREAM_TDATA;
    sc_in< sc_lv<3> > INPUT_STREAM_TKEEP;
    sc_in< sc_lv<3> > INPUT_STREAM_TSTRB;
    sc_in< sc_lv<1> > INPUT_STREAM_TUSER;
    sc_in< sc_lv<1> > INPUT_STREAM_TLAST;
    sc_in< sc_lv<1> > INPUT_STREAM_TID;
    sc_in< sc_lv<1> > INPUT_STREAM_TDEST;
    sc_out< sc_lv<24> > OUTPUT_STREAM_TDATA;
    sc_out< sc_lv<3> > OUTPUT_STREAM_TKEEP;
    sc_out< sc_lv<3> > OUTPUT_STREAM_TSTRB;
    sc_out< sc_lv<1> > OUTPUT_STREAM_TUSER;
    sc_out< sc_lv<1> > OUTPUT_STREAM_TLAST;
    sc_out< sc_lv<1> > OUTPUT_STREAM_TID;
    sc_out< sc_lv<1> > OUTPUT_STREAM_TDEST;
    sc_in< sc_lv<1> > enable_V;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > INPUT_STREAM_TVALID;
    sc_out< sc_logic > INPUT_STREAM_TREADY;
    sc_out< sc_logic > OUTPUT_STREAM_TVALID;
    sc_in< sc_logic > OUTPUT_STREAM_TREADY;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;


    // Module declarations
    Sobel_filter(sc_module_name name);
    SC_HAS_PROCESS(Sobel_filter);

    ~Sobel_filter();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Block_proc306* Block_proc306_U0;
    sc_signal< sc_lv<24> > Block_proc306_U0_OUTPUT_STREAM_TDATA;
    sc_signal< sc_lv<3> > Block_proc306_U0_OUTPUT_STREAM_TKEEP;
    sc_signal< sc_lv<3> > Block_proc306_U0_OUTPUT_STREAM_TSTRB;
    sc_signal< sc_lv<1> > Block_proc306_U0_OUTPUT_STREAM_TUSER;
    sc_signal< sc_lv<1> > Block_proc306_U0_OUTPUT_STREAM_TLAST;
    sc_signal< sc_lv<1> > Block_proc306_U0_OUTPUT_STREAM_TID;
    sc_signal< sc_lv<1> > Block_proc306_U0_OUTPUT_STREAM_TDEST;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > Block_proc306_U0_ap_start;
    sc_signal< sc_logic > Block_proc306_U0_INPUT_STREAM_TREADY;
    sc_signal< sc_logic > Block_proc306_U0_OUTPUT_STREAM_TVALID;
    sc_signal< sc_logic > Block_proc306_U0_ap_done;
    sc_signal< sc_logic > Block_proc306_U0_ap_ready;
    sc_signal< sc_logic > Block_proc306_U0_ap_idle;
    sc_signal< sc_logic > Block_proc306_U0_ap_continue;
    sc_signal< sc_logic > Block_proc306_U0_enable_V_ap_vld;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > Block_proc306_U0_start_full_n;
    sc_signal< sc_logic > Block_proc306_U0_start_write;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_Block_proc306_U0_ap_continue();
    void thread_Block_proc306_U0_ap_start();
    void thread_Block_proc306_U0_enable_V_ap_vld();
    void thread_Block_proc306_U0_start_full_n();
    void thread_Block_proc306_U0_start_write();
    void thread_INPUT_STREAM_TREADY();
    void thread_OUTPUT_STREAM_TDATA();
    void thread_OUTPUT_STREAM_TDEST();
    void thread_OUTPUT_STREAM_TID();
    void thread_OUTPUT_STREAM_TKEEP();
    void thread_OUTPUT_STREAM_TLAST();
    void thread_OUTPUT_STREAM_TSTRB();
    void thread_OUTPUT_STREAM_TUSER();
    void thread_OUTPUT_STREAM_TVALID();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
