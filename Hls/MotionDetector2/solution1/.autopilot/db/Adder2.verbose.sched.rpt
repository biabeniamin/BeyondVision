

================================================================
== Vivado HLS Report for 'Adder2'
================================================================
* Date:           Fri Dec 21 12:39:11 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        MotionDetector2
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     5.852|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+---------+-----+---------+---------+
    |    Latency    |    Interval   | Pipeline|
    | min |   max   | min |   max   |   Type  |
    +-----+---------+-----+---------+---------+
    |    5|  8371204|    5|  8371204|   none  |
    +-----+---------+-----+---------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+---------+----------+-----------+-----------+-------------+----------+
        |          |    Latency    | Iteration|  Initiation Interval  |     Trip    |          |
        | Loop Name| min |   max   |  Latency |  achieved |   target  |    Count    | Pipelined|
        +----------+-----+---------+----------+-----------+-----------+-------------+----------+
        |- read_A  |    3|  8371202|         3|          1|          1| 1 ~ 8371200 |    yes   |
        +----------+-----+---------+----------+-----------+-----------+-------------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 2 3 4 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / (!tmp) | (tmp & tmp_last_V)
	2  / (tmp & !tmp_last_V)
5 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %agg_result_a), !map !77"   --->   Operation 6 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %agg_result_b), !map !81"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %agg_result_c), !map !85"   --->   Operation 8 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %agg_result_d), !map !89"   --->   Operation 9 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %agg_result_e), !map !93"   --->   Operation 10 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %agg_result_f), !map !97"   --->   Operation 11 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %INPUT_STREAM_V_data_V), !map !101"   --->   Operation 12 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i4* %INPUT_STREAM_V_keep_V), !map !105"   --->   Operation 13 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i4* %INPUT_STREAM_V_strb_V), !map !109"   --->   Operation 14 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i2* %INPUT_STREAM_V_user_V), !map !113"   --->   Operation 15 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %INPUT_STREAM_V_last_V), !map !117"   --->   Operation 16 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i5* %INPUT_STREAM_V_id_V), !map !121"   --->   Operation 17 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i6* %INPUT_STREAM_V_dest_V), !map !125"   --->   Operation 18 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %LAST_STREAM_V_data_V), !map !129"   --->   Operation 19 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i4* %LAST_STREAM_V_keep_V), !map !133"   --->   Operation 20 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i4* %LAST_STREAM_V_strb_V), !map !137"   --->   Operation 21 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i2* %LAST_STREAM_V_user_V), !map !141"   --->   Operation 22 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %LAST_STREAM_V_last_V), !map !145"   --->   Operation 23 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i5* %LAST_STREAM_V_id_V), !map !149"   --->   Operation 24 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i6* %LAST_STREAM_V_dest_V), !map !153"   --->   Operation 25 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %searched), !map !157"   --->   Operation 26 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @Adder2_str) nounwind"   --->   Operation 27 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %searched, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [12 x i8]* @p_str2, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [MotionDetector2/main.cpp:28]   --->   Operation 28 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [12 x i8]* @p_str2, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [MotionDetector2/main.cpp:29]   --->   Operation 29 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %agg_result_a, i32* %agg_result_b, i32* %agg_result_c, i32* %agg_result_d, i32* %agg_result_e, i32* %agg_result_f, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [12 x i8]* @p_str2, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [MotionDetector2/main.cpp:29]   --->   Operation 30 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %INPUT_STREAM_V_data_V, i4* %INPUT_STREAM_V_keep_V, i4* %INPUT_STREAM_V_strb_V, i2* %INPUT_STREAM_V_user_V, i1* %INPUT_STREAM_V_last_V, i5* %INPUT_STREAM_V_id_V, i6* %INPUT_STREAM_V_dest_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [13 x i8]* @p_str5, [1 x i8]* @p_str1) nounwind" [MotionDetector2/main.cpp:31]   --->   Operation 31 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %LAST_STREAM_V_data_V, i4* %LAST_STREAM_V_keep_V, i4* %LAST_STREAM_V_strb_V, i2* %LAST_STREAM_V_user_V, i1* %LAST_STREAM_V_last_V, i5* %LAST_STREAM_V_id_V, i6* %LAST_STREAM_V_dest_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [12 x i8]* @p_str6, [1 x i8]* @p_str1) nounwind" [MotionDetector2/main.cpp:32]   --->   Operation 32 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (1.76ns)   --->   "br label %0" [MotionDetector2/main.cpp:47]   --->   Operation 33 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 3.42>
ST_2 : Operation 34 [1/1] (0.00ns)   --->   "%in1Count = phi i23 [ 0, %arrayctor.loop1.preheader ], [ %in1Count_3, %1 ]"   --->   Operation 34 'phi' 'in1Count' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 35 [1/1] (2.44ns)   --->   "%tmp = icmp ult i23 %in1Count, -17408" [MotionDetector2/main.cpp:47]   --->   Operation 35 'icmp' 'tmp' <Predicate = true> <Delay = 2.44> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 36 [1/1] (2.28ns)   --->   "%in1Count_3 = add i23 %in1Count, 1" [MotionDetector2/main.cpp:81]   --->   Operation 36 'add' 'in1Count_3' <Predicate = true> <Delay = 2.28> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 37 [1/1] (0.00ns)   --->   "%empty_18 = call { i32, i4, i4, i2, i1, i5, i6 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i2P.i1P.i5P.i6P(i32* %INPUT_STREAM_V_data_V, i4* %INPUT_STREAM_V_keep_V, i4* %INPUT_STREAM_V_strb_V, i2* %INPUT_STREAM_V_user_V, i1* %INPUT_STREAM_V_last_V, i5* %INPUT_STREAM_V_id_V, i6* %INPUT_STREAM_V_dest_V)" [MotionDetector2/main.cpp:49]   --->   Operation 37 'read' 'empty_18' <Predicate = (tmp)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%tmp_data_V = extractvalue { i32, i4, i4, i2, i1, i5, i6 } %empty_18, 0" [MotionDetector2/main.cpp:49]   --->   Operation 38 'extractvalue' 'tmp_data_V' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%tmp_last_V = extractvalue { i32, i4, i4, i2, i1, i5, i6 } %empty_18, 4" [MotionDetector2/main.cpp:49]   --->   Operation 39 'extractvalue' 'tmp_last_V' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%tmp_2 = trunc i32 %tmp_data_V to i8" [MotionDetector2/main.cpp:76]   --->   Operation 40 'trunc' 'tmp_2' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 41 [2/2] (0.00ns)   --->   "%empty_19 = call { i32, i4, i4, i2, i1, i5, i6 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i2P.i1P.i5P.i6P(i32* %LAST_STREAM_V_data_V, i4* %LAST_STREAM_V_keep_V, i4* %LAST_STREAM_V_strb_V, i2* %LAST_STREAM_V_user_V, i1* %LAST_STREAM_V_last_V, i5* %LAST_STREAM_V_id_V, i6* %LAST_STREAM_V_dest_V)" [MotionDetector2/main.cpp:51]   --->   Operation 41 'read' 'empty_19' <Predicate = (tmp)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%tmp_8_1_cast = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_data_V, i32 8, i32 15)" [MotionDetector2/main.cpp:59]   --->   Operation 42 'partselect' 'tmp_8_1_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%tmp_8_2_cast = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_data_V, i32 16, i32 23)" [MotionDetector2/main.cpp:59]   --->   Operation 43 'partselect' 'tmp_8_2_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "%tmp_1 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_data_V, i32 24, i32 31)" [MotionDetector2/main.cpp:60]   --->   Operation 44 'partselect' 'tmp_1' <Predicate = (tmp)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 5.56>
ST_3 : Operation 45 [1/2] (0.00ns)   --->   "%empty_19 = call { i32, i4, i4, i2, i1, i5, i6 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i2P.i1P.i5P.i6P(i32* %LAST_STREAM_V_data_V, i4* %LAST_STREAM_V_keep_V, i4* %LAST_STREAM_V_strb_V, i2* %LAST_STREAM_V_user_V, i1* %LAST_STREAM_V_last_V, i5* %LAST_STREAM_V_id_V, i6* %LAST_STREAM_V_dest_V)" [MotionDetector2/main.cpp:51]   --->   Operation 45 'read' 'empty_19' <Predicate = (tmp)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 46 [1/1] (0.00ns)   --->   "%tmp_data_V_1 = extractvalue { i32, i4, i4, i2, i1, i5, i6 } %empty_19, 0" [MotionDetector2/main.cpp:51]   --->   Operation 46 'extractvalue' 'tmp_data_V_1' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (0.00ns)   --->   "%tmp_6 = trunc i32 %tmp_data_V_1 to i8" [MotionDetector2/main.cpp:77]   --->   Operation 47 'trunc' 'tmp_6' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 48 [1/1] (2.47ns)   --->   "%tmp_3 = icmp eq i32 %tmp_data_V, %tmp_data_V_1" [MotionDetector2/main.cpp:53]   --->   Operation 48 'icmp' 'tmp_3' <Predicate = (tmp)> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 49 [1/1] (0.00ns)   --->   "%phitmp1_cast = zext i8 %tmp_2 to i9" [MotionDetector2/main.cpp:59]   --->   Operation 49 'zext' 'phitmp1_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 50 [1/1] (0.00ns)   --->   "%phitmp2_cast = zext i8 %tmp_6 to i9" [MotionDetector2/main.cpp:60]   --->   Operation 50 'zext' 'phitmp2_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 51 [1/1] (1.91ns)   --->   "%diff = sub i9 %phitmp2_cast, %phitmp1_cast" [MotionDetector2/main.cpp:62]   --->   Operation 51 'sub' 'diff' <Predicate = (tmp)> <Delay = 1.91> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 52 [1/1] (0.00ns) (grouped into LUT with out node tmp5)   --->   "%tmp_7 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %diff, i32 8)" [MotionDetector2/main.cpp:63]   --->   Operation 52 'bitselect' 'tmp_7' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 53 [1/1] (1.82ns)   --->   "%diff_1 = sub i9 0, %diff" [MotionDetector2/main.cpp:65]   --->   Operation 53 'sub' 'diff_1' <Predicate = (tmp)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node tmp5)   --->   "%diff_2 = select i1 %tmp_7, i9 %diff_1, i9 %diff" [MotionDetector2/main.cpp:63]   --->   Operation 54 'select' 'diff_2' <Predicate = (tmp)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 55 [1/1] (0.00ns) (grouped into LUT with out node tmp5)   --->   "%diff_2_cast = sext i9 %diff_2 to i10" [MotionDetector2/main.cpp:63]   --->   Operation 55 'sext' 'diff_2_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 56 [1/1] (0.00ns)   --->   "%phitmp1_1_cast = zext i8 %tmp_8_1_cast to i9" [MotionDetector2/main.cpp:59]   --->   Operation 56 'zext' 'phitmp1_1_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 57 [1/1] (0.00ns)   --->   "%tmp_4_1_cast = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_data_V_1, i32 8, i32 15)" [MotionDetector2/main.cpp:60]   --->   Operation 57 'partselect' 'tmp_4_1_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 58 [1/1] (0.00ns)   --->   "%phitmp2_1_cast = zext i8 %tmp_4_1_cast to i9" [MotionDetector2/main.cpp:60]   --->   Operation 58 'zext' 'phitmp2_1_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 59 [1/1] (1.91ns)   --->   "%diff_s = sub i9 %phitmp2_1_cast, %phitmp1_1_cast" [MotionDetector2/main.cpp:62]   --->   Operation 59 'sub' 'diff_s' <Predicate = (tmp)> <Delay = 1.91> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 60 [1/1] (0.00ns) (grouped into LUT with out node tmp3)   --->   "%tmp_8 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %diff_s, i32 8)" [MotionDetector2/main.cpp:63]   --->   Operation 60 'bitselect' 'tmp_8' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 61 [1/1] (1.82ns)   --->   "%diff_1_1 = sub i9 0, %diff_s" [MotionDetector2/main.cpp:65]   --->   Operation 61 'sub' 'diff_1_1' <Predicate = (tmp)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 62 [1/1] (0.00ns) (grouped into LUT with out node tmp3)   --->   "%diff_2_1 = select i1 %tmp_8, i9 %diff_1_1, i9 %diff_s" [MotionDetector2/main.cpp:63]   --->   Operation 62 'select' 'diff_2_1' <Predicate = (tmp)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 63 [1/1] (0.00ns) (grouped into LUT with out node tmp3)   --->   "%diff_2_1_cast = sext i9 %diff_2_1 to i10" [MotionDetector2/main.cpp:63]   --->   Operation 63 'sext' 'diff_2_1_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 64 [1/1] (0.00ns)   --->   "%phitmp1_2_cast = zext i8 %tmp_8_2_cast to i9" [MotionDetector2/main.cpp:59]   --->   Operation 64 'zext' 'phitmp1_2_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 65 [1/1] (0.00ns)   --->   "%tmp_4_2_cast = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_data_V_1, i32 16, i32 23)" [MotionDetector2/main.cpp:60]   --->   Operation 65 'partselect' 'tmp_4_2_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 66 [1/1] (0.00ns)   --->   "%phitmp2_2_cast = zext i8 %tmp_4_2_cast to i9" [MotionDetector2/main.cpp:60]   --->   Operation 66 'zext' 'phitmp2_2_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 67 [1/1] (1.91ns)   --->   "%diff_4 = sub i9 %phitmp2_2_cast, %phitmp1_2_cast" [MotionDetector2/main.cpp:62]   --->   Operation 67 'sub' 'diff_4' <Predicate = (tmp)> <Delay = 1.91> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 68 [1/1] (0.00ns) (grouped into LUT with out node tmp3)   --->   "%tmp_9 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %diff_4, i32 8)" [MotionDetector2/main.cpp:63]   --->   Operation 68 'bitselect' 'tmp_9' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 69 [1/1] (1.82ns)   --->   "%diff_1_2 = sub i9 0, %diff_4" [MotionDetector2/main.cpp:65]   --->   Operation 69 'sub' 'diff_1_2' <Predicate = (tmp)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 70 [1/1] (0.00ns) (grouped into LUT with out node tmp3)   --->   "%diff_2_2 = select i1 %tmp_9, i9 %diff_1_2, i9 %diff_4" [MotionDetector2/main.cpp:63]   --->   Operation 70 'select' 'diff_2_2' <Predicate = (tmp)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 71 [1/1] (0.00ns) (grouped into LUT with out node tmp3)   --->   "%diff_2_2_cast = sext i9 %diff_2_2 to i10" [MotionDetector2/main.cpp:63]   --->   Operation 71 'sext' 'diff_2_2_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 72 [1/1] (0.00ns)   --->   "%tmp_8_3_cast = zext i8 %tmp_1 to i9" [MotionDetector2/main.cpp:60]   --->   Operation 72 'zext' 'tmp_8_3_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 73 [1/1] (0.00ns)   --->   "%tmp_5 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_data_V_1, i32 24, i32 31)" [MotionDetector2/main.cpp:62]   --->   Operation 73 'partselect' 'tmp_5' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 74 [1/1] (0.00ns)   --->   "%tmp_4_3_cast = zext i8 %tmp_5 to i9" [MotionDetector2/main.cpp:62]   --->   Operation 74 'zext' 'tmp_4_3_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 75 [1/1] (1.91ns)   --->   "%diff_3 = sub i9 %tmp_4_3_cast, %tmp_8_3_cast" [MotionDetector2/main.cpp:62]   --->   Operation 75 'sub' 'diff_3' <Predicate = (tmp)> <Delay = 1.91> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 76 [1/1] (0.00ns) (grouped into LUT with out node tmp5)   --->   "%tmp_10 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %diff_3, i32 8)" [MotionDetector2/main.cpp:63]   --->   Operation 76 'bitselect' 'tmp_10' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 77 [1/1] (1.82ns)   --->   "%diff_1_3 = sub i9 0, %diff_3" [MotionDetector2/main.cpp:65]   --->   Operation 77 'sub' 'diff_1_3' <Predicate = (tmp)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 78 [1/1] (0.00ns) (grouped into LUT with out node tmp5)   --->   "%diff_2_3 = select i1 %tmp_10, i9 %diff_1_3, i9 %diff_3" [MotionDetector2/main.cpp:63]   --->   Operation 78 'select' 'diff_2_3' <Predicate = (tmp)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 79 [1/1] (0.00ns) (grouped into LUT with out node tmp5)   --->   "%diff_2_3_cast = sext i9 %diff_2_3 to i10" [MotionDetector2/main.cpp:63]   --->   Operation 79 'sext' 'diff_2_3_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_3 : Operation 80 [1/1] (1.82ns) (out node of the LUT)   --->   "%tmp3 = add i10 %diff_2_2_cast, %diff_2_1_cast" [MotionDetector2/main.cpp:68]   --->   Operation 80 'add' 'tmp3' <Predicate = (tmp)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 81 [1/1] (1.82ns) (out node of the LUT)   --->   "%tmp5 = add i10 %diff_2_3_cast, %diff_2_cast" [MotionDetector2/main.cpp:68]   --->   Operation 81 'add' 'tmp5' <Predicate = (tmp)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 4 <SV = 3> <Delay = 5.85>
ST_4 : Operation 82 [1/1] (0.00ns)   --->   "%p_0 = phi i64 [ 0, %arrayctor.loop1.preheader ], [ %sum_V_1, %1 ]"   --->   Operation 82 'phi' 'p_0' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 83 [1/1] (0.00ns)   --->   "%differentBytes = phi i32 [ 0, %arrayctor.loop1.preheader ], [ %differentBytes_1, %1 ]"   --->   Operation 83 'phi' 'differentBytes' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 84 [1/1] (0.00ns)   --->   "%suma = phi i32 [ 0, %arrayctor.loop1.preheader ], [ %suma_2, %1 ]" [MotionDetector2/main.cpp:53]   --->   Operation 84 'phi' 'suma' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 85 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 8371200, i64 4185600)"   --->   Operation 85 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 86 [1/1] (1.76ns)   --->   "br i1 %tmp, label %_ifconv, label %.loopexit" [MotionDetector2/main.cpp:47]   --->   Operation 86 'br' <Predicate = true> <Delay = 1.76>
ST_4 : Operation 87 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([7 x i8]* @p_str7) nounwind" [MotionDetector2/main.cpp:47]   --->   Operation 87 'specloopname' <Predicate = (tmp)> <Delay = 0.00>
ST_4 : Operation 88 [1/1] (0.00ns)   --->   "%tmp_4 = call i32 (...)* @_ssdm_op_SpecRegionBegin([7 x i8]* @p_str7)" [MotionDetector2/main.cpp:47]   --->   Operation 88 'specregionbegin' 'tmp_4' <Predicate = (tmp)> <Delay = 0.00>
ST_4 : Operation 89 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind" [MotionDetector2/main.cpp:48]   --->   Operation 89 'specpipeline' <Predicate = (tmp)> <Delay = 0.00>
ST_4 : Operation 90 [1/1] (2.55ns)   --->   "%differentBytes_3 = add nsw i32 1, %differentBytes" [MotionDetector2/main.cpp:55]   --->   Operation 90 'add' 'differentBytes_3' <Predicate = (tmp & !tmp_3)> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 91 [1/1] (0.00ns)   --->   "%tmp3_cast = sext i10 %tmp3 to i32" [MotionDetector2/main.cpp:68]   --->   Operation 91 'sext' 'tmp3_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_4 : Operation 92 [1/1] (0.00ns)   --->   "%tmp5_cast = sext i10 %tmp5 to i32" [MotionDetector2/main.cpp:68]   --->   Operation 92 'sext' 'tmp5_cast' <Predicate = (tmp)> <Delay = 0.00>
ST_4 : Operation 93 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp4 = add i32 %suma, %tmp5_cast" [MotionDetector2/main.cpp:68]   --->   Operation 93 'add' 'tmp4' <Predicate = (tmp)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 94 [1/1] (4.37ns) (root node of TernaryAdder)   --->   "%suma_1_3 = add nsw i32 %tmp3_cast, %tmp4" [MotionDetector2/main.cpp:68]   --->   Operation 94 'add' 'suma_1_3' <Predicate = (tmp)> <Delay = 4.37> <Core = "TAddSub">   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 2.18> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 95 [1/1] (0.00ns)   --->   "%sum_V = sext i32 %suma_1_3 to i64" [MotionDetector2/main.cpp:71]   --->   Operation 95 'sext' 'sum_V' <Predicate = (tmp & !tmp_3)> <Delay = 0.00>
ST_4 : Operation 96 [1/1] (1.48ns)   --->   "%sum_V_1 = select i1 %tmp_3, i64 %p_0, i64 %sum_V" [MotionDetector2/main.cpp:53]   --->   Operation 96 'select' 'sum_V_1' <Predicate = (tmp)> <Delay = 1.48> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 97 [1/1] (0.69ns)   --->   "%differentBytes_1 = select i1 %tmp_3, i32 %differentBytes, i32 %differentBytes_3" [MotionDetector2/main.cpp:53]   --->   Operation 97 'select' 'differentBytes_1' <Predicate = (tmp)> <Delay = 0.69> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 98 [1/1] (0.69ns)   --->   "%suma_2 = select i1 %tmp_3, i32 %suma, i32 %suma_1_3" [MotionDetector2/main.cpp:53]   --->   Operation 98 'select' 'suma_2' <Predicate = (tmp)> <Delay = 0.69> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 99 [1/1] (1.76ns)   --->   "br i1 %tmp_last_V, label %.loopexit, label %1" [MotionDetector2/main.cpp:84]   --->   Operation 99 'br' <Predicate = (tmp)> <Delay = 1.76>
ST_4 : Operation 100 [1/1] (0.00ns)   --->   "%empty_20 = call i32 (...)* @_ssdm_op_SpecRegionEnd([7 x i8]* @p_str7, i32 %tmp_4)" [MotionDetector2/main.cpp:90]   --->   Operation 100 'specregionend' 'empty_20' <Predicate = (tmp & !tmp_last_V)> <Delay = 0.00>
ST_4 : Operation 101 [1/1] (0.00ns)   --->   "br label %0" [MotionDetector2/main.cpp:47]   --->   Operation 101 'br' <Predicate = (tmp & !tmp_last_V)> <Delay = 0.00>

State 5 <SV = 4> <Delay = 1.00>
ST_5 : Operation 102 [1/1] (0.00ns)   --->   "%lhs_V = phi i64 [ %p_0, %0 ], [ %sum_V_1, %_ifconv ]"   --->   Operation 102 'phi' 'lhs_V' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 103 [1/1] (0.00ns)   --->   "%differentBytes_2 = phi i32 [ %differentBytes, %0 ], [ %differentBytes_1, %_ifconv ]"   --->   Operation 103 'phi' 'differentBytes_2' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 104 [1/1] (0.00ns)   --->   "%in1Count_1 = phi i23 [ %in1Count, %0 ], [ %in1Count_3, %_ifconv ]"   --->   Operation 104 'phi' 'in1Count_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 105 [1/1] (0.00ns)   --->   "%in1Count_1_cast = zext i23 %in1Count_1 to i32" [MotionDetector2/main.cpp:93]   --->   Operation 105 'zext' 'in1Count_1_cast' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 106 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i32P(i32* %agg_result_a, i32 %differentBytes_2)" [MotionDetector2/main.cpp:94]   --->   Operation 106 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 107 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i32P(i32* %agg_result_b, i32 %in1Count_1_cast)" [MotionDetector2/main.cpp:95]   --->   Operation 107 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 108 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i32P(i32* %agg_result_c, i32 %in1Count_1_cast)" [MotionDetector2/main.cpp:96]   --->   Operation 108 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 109 [1/1] (0.00ns)   --->   "%phitmp = call i32 @_ssdm_op_PartSelect.i32.i64.i32.i32(i64 %lhs_V, i32 32, i32 63)" [MotionDetector2/main.cpp:97]   --->   Operation 109 'partselect' 'phitmp' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 110 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i32P(i32* %agg_result_d, i32 %phitmp)" [MotionDetector2/main.cpp:97]   --->   Operation 110 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 111 [1/1] (0.00ns)   --->   "%tmp_11 = trunc i64 %lhs_V to i32" [MotionDetector2/main.cpp:98]   --->   Operation 111 'trunc' 'tmp_11' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 112 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i32P(i32* %agg_result_e, i32 %tmp_11)" [MotionDetector2/main.cpp:98]   --->   Operation 112 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 113 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i32P(i32* %agg_result_f, i32 1936)" [MotionDetector2/main.cpp:99]   --->   Operation 113 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 114 [1/1] (0.00ns)   --->   "ret void" [MotionDetector2/main.cpp:100]   --->   Operation 114 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('sum.V') with incoming values : ('sum.V', MotionDetector2/main.cpp:53) [51]  (1.77 ns)

 <State 2>: 3.43ns
The critical path consists of the following:
	'icmp' operation ('tmp', MotionDetector2/main.cpp:47) [55]  (2.45 ns)
	blocking operation 0.978 ns on control path)

 <State 3>: 5.56ns
The critical path consists of the following:
	axis read on port 'LAST_STREAM_V_data_V' (MotionDetector2/main.cpp:51) [67]  (0 ns)
	'sub' operation ('diff_4', MotionDetector2/main.cpp:62) [92]  (1.92 ns)
	'sub' operation ('diff_1_2', MotionDetector2/main.cpp:65) [94]  (1.82 ns)
	'select' operation ('diff_2_2', MotionDetector2/main.cpp:63) [95]  (0 ns)
	'add' operation ('tmp3', MotionDetector2/main.cpp:68) [106]  (1.82 ns)

 <State 4>: 5.85ns
The critical path consists of the following:
	'phi' operation ('suma', MotionDetector2/main.cpp:53) with incoming values : ('suma_2', MotionDetector2/main.cpp:53) [54]  (0 ns)
	'add' operation ('tmp4', MotionDetector2/main.cpp:68) [110]  (0 ns)
	'add' operation ('suma_1_3', MotionDetector2/main.cpp:68) [111]  (4.37 ns)
	'select' operation ('sum.V', MotionDetector2/main.cpp:53) [113]  (1.48 ns)

 <State 5>: 1ns
The critical path consists of the following:
	'phi' operation ('sum.V') with incoming values : ('sum.V', MotionDetector2/main.cpp:53) [121]  (0 ns)
	s_axi write on port 'agg_result_d' (MotionDetector2/main.cpp:97) [129]  (1 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
