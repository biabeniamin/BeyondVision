// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Random_HH_
#define _Random_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Random_CONTROL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32>
struct Random : public sc_module {
    // Port declarations 33
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > INPUT_STREAM_TDATA;
    sc_in< sc_logic > INPUT_STREAM_TVALID;
    sc_out< sc_logic > INPUT_STREAM_TREADY;
    sc_in< sc_lv<4> > INPUT_STREAM_TKEEP;
    sc_in< sc_lv<4> > INPUT_STREAM_TSTRB;
    sc_in< sc_lv<2> > INPUT_STREAM_TUSER;
    sc_in< sc_lv<1> > INPUT_STREAM_TLAST;
    sc_in< sc_lv<5> > INPUT_STREAM_TID;
    sc_in< sc_lv<6> > INPUT_STREAM_TDEST;
    sc_in< sc_lv<12> > temperature_V;
    sc_in< sc_lv<64> > output_V_i;
    sc_out< sc_lv<64> > output_V_o;
    sc_out< sc_logic > output_V_o_ap_vld;
    sc_in< sc_logic > s_axi_CONTROL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CONTROL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH/8> > s_axi_CONTROL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CONTROL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CONTROL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CONTROL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Random(sc_module_name name);
    SC_HAS_PROCESS(Random);

    ~Random();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Random_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>* Random_CONTROL_BUS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > agg_result_a_ap_vld;
    sc_signal< sc_lv<32> > agg_result_b;
    sc_signal< sc_logic > agg_result_b_ap_vld;
    sc_signal< sc_logic > agg_result_c_ap_vld;
    sc_signal< sc_lv<32> > agg_result_d;
    sc_signal< sc_logic > agg_result_d_ap_vld;
    sc_signal< sc_lv<32> > agg_result_e;
    sc_signal< sc_logic > agg_result_e_ap_vld;
    sc_signal< sc_lv<32> > agg_result_f;
    sc_signal< sc_logic > agg_result_f_ap_vld;
    sc_signal< sc_lv<32> > INPUT_STREAM_V_data_V_0_data_out;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_vld_in;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_vld_out;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_ack_in;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_ack_out;
    sc_signal< sc_lv<32> > INPUT_STREAM_V_data_V_0_payload_A;
    sc_signal< sc_lv<32> > INPUT_STREAM_V_data_V_0_payload_B;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_sel_rd;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_sel_wr;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_sel;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_load_A;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > INPUT_STREAM_V_data_V_0_state;
    sc_signal< sc_logic > INPUT_STREAM_V_data_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > INPUT_STREAM_V_last_V_0_data_out;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_vld_in;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_vld_out;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_ack_in;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_ack_out;
    sc_signal< sc_lv<1> > INPUT_STREAM_V_last_V_0_payload_A;
    sc_signal< sc_lv<1> > INPUT_STREAM_V_last_V_0_payload_B;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_sel_rd;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_sel_wr;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_sel;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_load_A;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_load_B;
    sc_signal< sc_lv<2> > INPUT_STREAM_V_last_V_0_state;
    sc_signal< sc_logic > INPUT_STREAM_V_last_V_0_state_cmp_full;
    sc_signal< sc_logic > INPUT_STREAM_V_dest_V_0_vld_in;
    sc_signal< sc_logic > INPUT_STREAM_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > INPUT_STREAM_V_dest_V_0_state;
    sc_signal< sc_logic > INPUT_STREAM_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_fu_277_p2;
    sc_signal< sc_lv<55> > p_0_reg_185;
    sc_signal< sc_lv<23> > i_reg_195;
    sc_signal< sc_lv<32> > i_op_assign_reg_207;
    sc_signal< sc_lv<32> > first_s_reg_219;
    sc_signal< sc_lv<55> > sum_V_cast_fu_273_p1;
    sc_signal< sc_lv<1> > tmp_reg_422;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<23> > in1Count_fu_283_p2;
    sc_signal< sc_lv<23> > in1Count_reg_426;
    sc_signal< sc_lv<32> > tmp_data_V_reg_432;
    sc_signal< sc_lv<1> > tmp_last_V_reg_438;
    sc_signal< sc_lv<55> > sum_V_fu_301_p2;
    sc_signal< sc_lv<55> > sum_V_reg_442;
    sc_signal< sc_lv<32> > r_V_3_fu_358_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_predicate_tran3to4_state2;
    sc_signal< sc_lv<55> > ap_phi_mux_p_0_phi_fu_188_p4;
    sc_signal< sc_lv<23> > ap_phi_mux_i_phi_fu_199_p4;
    sc_signal< sc_lv<55> > lhs_V_reg_231;
    sc_signal< sc_lv<32> > value_1_reg_241;
    sc_signal< sc_lv<32> > first_2_reg_252;
    sc_signal< sc_lv<23> > in1Count_1_reg_263;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > r_V_4_fu_383_p2;
    sc_signal< sc_lv<55> > tmp_2_cast_fu_297_p1;
    sc_signal< sc_lv<56> > rhs_V_cast_fu_310_p1;
    sc_signal< sc_lv<56> > lhs_V_cast_fu_307_p1;
    sc_signal< sc_lv<56> > r_V_fu_314_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_332_p1;
    sc_signal< sc_lv<32> > tmp_6_fu_336_p3;
    sc_signal< sc_lv<1> > tmp_4_fu_328_p1;
    sc_signal< sc_lv<1> > tmp_2_fu_320_p3;
    sc_signal< sc_lv<32> > tmp_7_fu_344_p2;
    sc_signal< sc_lv<32> > tmp_8_fu_350_p3;
    sc_signal< sc_lv<64> > lhs_V_1_cast_fu_366_p1;
    sc_signal< sc_lv<32> > tmp_10_fu_379_p1;
    sc_signal< sc_lv<32> > tmp_9_fu_375_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_542;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<23> ap_const_lv23_7FBC00;
    static const sc_lv<23> ap_const_lv23_1;
    static const sc_lv<32> ap_const_lv32_37;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_INPUT_STREAM_TDATA_blk_n();
    void thread_INPUT_STREAM_TREADY();
    void thread_INPUT_STREAM_V_data_V_0_ack_in();
    void thread_INPUT_STREAM_V_data_V_0_ack_out();
    void thread_INPUT_STREAM_V_data_V_0_data_out();
    void thread_INPUT_STREAM_V_data_V_0_load_A();
    void thread_INPUT_STREAM_V_data_V_0_load_B();
    void thread_INPUT_STREAM_V_data_V_0_sel();
    void thread_INPUT_STREAM_V_data_V_0_state_cmp_full();
    void thread_INPUT_STREAM_V_data_V_0_vld_in();
    void thread_INPUT_STREAM_V_data_V_0_vld_out();
    void thread_INPUT_STREAM_V_dest_V_0_ack_out();
    void thread_INPUT_STREAM_V_dest_V_0_vld_in();
    void thread_INPUT_STREAM_V_last_V_0_ack_in();
    void thread_INPUT_STREAM_V_last_V_0_ack_out();
    void thread_INPUT_STREAM_V_last_V_0_data_out();
    void thread_INPUT_STREAM_V_last_V_0_load_A();
    void thread_INPUT_STREAM_V_last_V_0_load_B();
    void thread_INPUT_STREAM_V_last_V_0_sel();
    void thread_INPUT_STREAM_V_last_V_0_state_cmp_full();
    void thread_INPUT_STREAM_V_last_V_0_vld_in();
    void thread_INPUT_STREAM_V_last_V_0_vld_out();
    void thread_agg_result_a_ap_vld();
    void thread_agg_result_b();
    void thread_agg_result_b_ap_vld();
    void thread_agg_result_c_ap_vld();
    void thread_agg_result_d();
    void thread_agg_result_d_ap_vld();
    void thread_agg_result_e();
    void thread_agg_result_e_ap_vld();
    void thread_agg_result_f();
    void thread_agg_result_f_ap_vld();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_542();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_199_p4();
    void thread_ap_phi_mux_p_0_phi_fu_188_p4();
    void thread_ap_predicate_tran3to4_state2();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_in1Count_fu_283_p2();
    void thread_lhs_V_1_cast_fu_366_p1();
    void thread_lhs_V_cast_fu_307_p1();
    void thread_output_V_o();
    void thread_output_V_o_ap_vld();
    void thread_r_V_3_fu_358_p3();
    void thread_r_V_4_fu_383_p2();
    void thread_r_V_fu_314_p2();
    void thread_rhs_V_cast_fu_310_p1();
    void thread_sum_V_cast_fu_273_p1();
    void thread_sum_V_fu_301_p2();
    void thread_tmp_10_fu_379_p1();
    void thread_tmp_2_cast_fu_297_p1();
    void thread_tmp_2_fu_320_p3();
    void thread_tmp_4_fu_328_p1();
    void thread_tmp_5_fu_332_p1();
    void thread_tmp_6_fu_336_p3();
    void thread_tmp_7_fu_344_p2();
    void thread_tmp_8_fu_350_p3();
    void thread_tmp_9_fu_375_p1();
    void thread_tmp_fu_277_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
