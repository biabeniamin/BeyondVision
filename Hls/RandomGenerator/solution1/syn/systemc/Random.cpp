// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Random.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Random::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Random::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Random::ap_ST_fsm_state1 = "1";
const sc_lv<3> Random::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> Random::ap_ST_fsm_state4 = "100";
const sc_lv<32> Random::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Random::ap_const_boolean_1 = true;
const sc_lv<1> Random::ap_const_lv1_0 = "0";
const sc_lv<1> Random::ap_const_lv1_1 = "1";
const sc_lv<2> Random::ap_const_lv2_0 = "00";
const sc_lv<2> Random::ap_const_lv2_2 = "10";
const sc_lv<2> Random::ap_const_lv2_3 = "11";
const sc_lv<2> Random::ap_const_lv2_1 = "1";
const sc_lv<32> Random::ap_const_lv32_1 = "1";
const bool Random::ap_const_boolean_0 = false;
const int Random::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<23> Random::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> Random::ap_const_lv32_2 = "10";
const sc_lv<23> Random::ap_const_lv23_7FBC00 = "11111111011110000000000";
const sc_lv<23> Random::ap_const_lv23_1 = "1";
const sc_lv<32> Random::ap_const_lv32_37 = "110111";
const sc_lv<31> Random::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> Random::ap_const_lv32_20 = "100000";
const sc_lv<32> Random::ap_const_lv32_36 = "110110";

Random::Random(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Random_CONTROL_BUS_s_axi_U = new Random_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("Random_CONTROL_BUS_s_axi_U");
    Random_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    Random_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    Random_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    Random_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    Random_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    Random_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    Random_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    Random_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    Random_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    Random_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    Random_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    Random_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    Random_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    Random_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    Random_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    Random_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    Random_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    Random_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    Random_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    Random_CONTROL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    Random_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    Random_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    Random_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    Random_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    Random_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    Random_CONTROL_BUS_s_axi_U->agg_result_a(value_1_reg_222);
    Random_CONTROL_BUS_s_axi_U->agg_result_a_ap_vld(agg_result_a_ap_vld);
    Random_CONTROL_BUS_s_axi_U->agg_result_b(agg_result_b);
    Random_CONTROL_BUS_s_axi_U->agg_result_b_ap_vld(agg_result_b_ap_vld);
    Random_CONTROL_BUS_s_axi_U->agg_result_c(first_2_reg_233);
    Random_CONTROL_BUS_s_axi_U->agg_result_c_ap_vld(agg_result_c_ap_vld);
    Random_CONTROL_BUS_s_axi_U->agg_result_d(agg_result_d);
    Random_CONTROL_BUS_s_axi_U->agg_result_d_ap_vld(agg_result_d_ap_vld);
    Random_CONTROL_BUS_s_axi_U->agg_result_e(agg_result_e);
    Random_CONTROL_BUS_s_axi_U->agg_result_e_ap_vld(agg_result_e_ap_vld);
    Random_CONTROL_BUS_s_axi_U->agg_result_f(agg_result_f);
    Random_CONTROL_BUS_s_axi_U->agg_result_f_ap_vld(agg_result_f_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_INPUT_STREAM_TDATA_blk_n);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_fu_258_p2 );

    SC_METHOD(thread_INPUT_STREAM_TREADY);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_data_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_data_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_sel);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_last_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_last_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_last_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_last_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_last_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_last_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_sel);
    sensitive << ( INPUT_STREAM_V_last_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_last_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_last_V_0_state );

    SC_METHOD(thread_agg_result_a_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_agg_result_b);
    sensitive << ( in1Count_1_reg_244 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_agg_result_b_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_agg_result_c_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_agg_result_d);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_8_fu_352_p4 );

    SC_METHOD(thread_agg_result_d_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_agg_result_e);
    sensitive << ( lhs_V_reg_212 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_agg_result_e_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_agg_result_f);
    sensitive << ( temperature_V );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_agg_result_f_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_258_p2 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( tmp_fu_258_p2 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_539);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_180_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( i_reg_176 );
    sensitive << ( tmp_reg_386 );
    sensitive << ( in1Count_reg_390 );
    sensitive << ( tmp_last_V_reg_402 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_p_0_phi_fu_169_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( p_0_reg_166 );
    sensitive << ( tmp_reg_386 );
    sensitive << ( tmp_last_V_reg_402 );
    sensitive << ( sum_V_reg_406 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_tran3to4_state2);
    sensitive << ( INPUT_STREAM_V_last_V_0_data_out );
    sensitive << ( tmp_fu_258_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_in1Count_fu_264_p2);
    sensitive << ( ap_phi_mux_i_phi_fu_180_p4 );

    SC_METHOD(thread_lhs_V_cast_fu_288_p1);
    sensitive << ( sum_V_reg_406 );

    SC_METHOD(thread_r_V_2_fu_339_p3);
    sensitive << ( tmp_2_fu_301_p3 );
    sensitive << ( tmp_9_fu_325_p2 );
    sensitive << ( tmp_6_fu_331_p3 );

    SC_METHOD(thread_r_V_fu_295_p2);
    sensitive << ( rhs_V_cast_fu_291_p1 );
    sensitive << ( lhs_V_cast_fu_288_p1 );

    SC_METHOD(thread_rhs_V_cast_fu_291_p1);
    sensitive << ( i_op_assign_reg_188 );

    SC_METHOD(thread_sum_V_cast_fu_254_p1);
    sensitive << ( temperature_V );

    SC_METHOD(thread_sum_V_fu_282_p2);
    sensitive << ( ap_phi_mux_p_0_phi_fu_169_p4 );
    sensitive << ( tmp_2_cast_fu_278_p1 );

    SC_METHOD(thread_tmp_2_cast_fu_278_p1);
    sensitive << ( INPUT_STREAM_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_2_fu_301_p3);
    sensitive << ( r_V_fu_295_p2 );

    SC_METHOD(thread_tmp_4_fu_309_p1);
    sensitive << ( r_V_fu_295_p2 );

    SC_METHOD(thread_tmp_5_fu_313_p1);
    sensitive << ( r_V_fu_295_p2 );

    SC_METHOD(thread_tmp_6_fu_331_p3);
    sensitive << ( tmp_4_fu_309_p1 );

    SC_METHOD(thread_tmp_7_fu_317_p3);
    sensitive << ( tmp_5_fu_313_p1 );

    SC_METHOD(thread_tmp_8_fu_352_p4);
    sensitive << ( lhs_V_reg_212 );

    SC_METHOD(thread_tmp_9_fu_325_p2);
    sensitive << ( tmp_7_fu_317_p3 );

    SC_METHOD(thread_tmp_fu_258_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_phi_fu_180_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    INPUT_STREAM_V_data_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_data_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_data_V_0_state = "00";
    INPUT_STREAM_V_last_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_last_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_last_V_0_state = "00";
    INPUT_STREAM_V_dest_V_0_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Random_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA, "(port)INPUT_STREAM_TDATA");
    sc_trace(mVcdFile, INPUT_STREAM_TVALID, "(port)INPUT_STREAM_TVALID");
    sc_trace(mVcdFile, INPUT_STREAM_TREADY, "(port)INPUT_STREAM_TREADY");
    sc_trace(mVcdFile, INPUT_STREAM_TKEEP, "(port)INPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, INPUT_STREAM_TSTRB, "(port)INPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, INPUT_STREAM_TUSER, "(port)INPUT_STREAM_TUSER");
    sc_trace(mVcdFile, INPUT_STREAM_TLAST, "(port)INPUT_STREAM_TLAST");
    sc_trace(mVcdFile, INPUT_STREAM_TID, "(port)INPUT_STREAM_TID");
    sc_trace(mVcdFile, INPUT_STREAM_TDEST, "(port)INPUT_STREAM_TDEST");
    sc_trace(mVcdFile, temperature_V, "(port)temperature_V");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, agg_result_a_ap_vld, "agg_result_a_ap_vld");
    sc_trace(mVcdFile, agg_result_b, "agg_result_b");
    sc_trace(mVcdFile, agg_result_b_ap_vld, "agg_result_b_ap_vld");
    sc_trace(mVcdFile, agg_result_c_ap_vld, "agg_result_c_ap_vld");
    sc_trace(mVcdFile, agg_result_d, "agg_result_d");
    sc_trace(mVcdFile, agg_result_d_ap_vld, "agg_result_d_ap_vld");
    sc_trace(mVcdFile, agg_result_e, "agg_result_e");
    sc_trace(mVcdFile, agg_result_e_ap_vld, "agg_result_e_ap_vld");
    sc_trace(mVcdFile, agg_result_f, "agg_result_f");
    sc_trace(mVcdFile, agg_result_f_ap_vld, "agg_result_f_ap_vld");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_data_out, "INPUT_STREAM_V_data_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_vld_in, "INPUT_STREAM_V_data_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_vld_out, "INPUT_STREAM_V_data_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_ack_in, "INPUT_STREAM_V_data_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_ack_out, "INPUT_STREAM_V_data_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_payload_A, "INPUT_STREAM_V_data_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_payload_B, "INPUT_STREAM_V_data_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel_rd, "INPUT_STREAM_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel_wr, "INPUT_STREAM_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel, "INPUT_STREAM_V_data_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_load_A, "INPUT_STREAM_V_data_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_load_B, "INPUT_STREAM_V_data_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_state, "INPUT_STREAM_V_data_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_state_cmp_full, "INPUT_STREAM_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_data_out, "INPUT_STREAM_V_last_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_vld_in, "INPUT_STREAM_V_last_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_vld_out, "INPUT_STREAM_V_last_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_ack_in, "INPUT_STREAM_V_last_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_ack_out, "INPUT_STREAM_V_last_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_payload_A, "INPUT_STREAM_V_last_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_payload_B, "INPUT_STREAM_V_last_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_sel_rd, "INPUT_STREAM_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_sel_wr, "INPUT_STREAM_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_sel, "INPUT_STREAM_V_last_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_load_A, "INPUT_STREAM_V_last_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_load_B, "INPUT_STREAM_V_last_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_state, "INPUT_STREAM_V_last_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_state_cmp_full, "INPUT_STREAM_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_vld_in, "INPUT_STREAM_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_ack_out, "INPUT_STREAM_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_state, "INPUT_STREAM_V_dest_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA_blk_n, "INPUT_STREAM_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_fu_258_p2, "tmp_fu_258_p2");
    sc_trace(mVcdFile, p_0_reg_166, "p_0_reg_166");
    sc_trace(mVcdFile, i_reg_176, "i_reg_176");
    sc_trace(mVcdFile, i_op_assign_reg_188, "i_op_assign_reg_188");
    sc_trace(mVcdFile, first_s_reg_200, "first_s_reg_200");
    sc_trace(mVcdFile, sum_V_cast_fu_254_p1, "sum_V_cast_fu_254_p1");
    sc_trace(mVcdFile, tmp_reg_386, "tmp_reg_386");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, in1Count_fu_264_p2, "in1Count_fu_264_p2");
    sc_trace(mVcdFile, in1Count_reg_390, "in1Count_reg_390");
    sc_trace(mVcdFile, tmp_data_V_reg_396, "tmp_data_V_reg_396");
    sc_trace(mVcdFile, tmp_last_V_reg_402, "tmp_last_V_reg_402");
    sc_trace(mVcdFile, sum_V_fu_282_p2, "sum_V_fu_282_p2");
    sc_trace(mVcdFile, sum_V_reg_406, "sum_V_reg_406");
    sc_trace(mVcdFile, r_V_2_fu_339_p3, "r_V_2_fu_339_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_predicate_tran3to4_state2, "ap_predicate_tran3to4_state2");
    sc_trace(mVcdFile, ap_phi_mux_p_0_phi_fu_169_p4, "ap_phi_mux_p_0_phi_fu_169_p4");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_180_p4, "ap_phi_mux_i_phi_fu_180_p4");
    sc_trace(mVcdFile, lhs_V_reg_212, "lhs_V_reg_212");
    sc_trace(mVcdFile, value_1_reg_222, "value_1_reg_222");
    sc_trace(mVcdFile, first_2_reg_233, "first_2_reg_233");
    sc_trace(mVcdFile, in1Count_1_reg_244, "in1Count_1_reg_244");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_2_cast_fu_278_p1, "tmp_2_cast_fu_278_p1");
    sc_trace(mVcdFile, rhs_V_cast_fu_291_p1, "rhs_V_cast_fu_291_p1");
    sc_trace(mVcdFile, lhs_V_cast_fu_288_p1, "lhs_V_cast_fu_288_p1");
    sc_trace(mVcdFile, r_V_fu_295_p2, "r_V_fu_295_p2");
    sc_trace(mVcdFile, tmp_5_fu_313_p1, "tmp_5_fu_313_p1");
    sc_trace(mVcdFile, tmp_7_fu_317_p3, "tmp_7_fu_317_p3");
    sc_trace(mVcdFile, tmp_4_fu_309_p1, "tmp_4_fu_309_p1");
    sc_trace(mVcdFile, tmp_2_fu_301_p3, "tmp_2_fu_301_p3");
    sc_trace(mVcdFile, tmp_9_fu_325_p2, "tmp_9_fu_325_p2");
    sc_trace(mVcdFile, tmp_6_fu_331_p3, "tmp_6_fu_331_p3");
    sc_trace(mVcdFile, tmp_8_fu_352_p4, "tmp_8_fu_352_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_539, "ap_condition_539");
#endif

    }
    mHdltvinHandle.open("Random.hdltvin.dat");
    mHdltvoutHandle.open("Random.hdltvout.dat");
}

Random::~Random() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Random_CONTROL_BUS_s_axi_U;
}

void Random::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Random::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_out.read()))) {
            INPUT_STREAM_V_data_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_in.read()))) {
            INPUT_STREAM_V_data_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_dest_V_0_state.read())))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_dest_V_0_state.read())))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_out.read()))) {
            INPUT_STREAM_V_last_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_in.read()))) {
            INPUT_STREAM_V_last_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_last_V_0_state.read())))) {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_last_V_0_state.read())))) {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_predicate_tran3to4_state2.read(), ap_const_boolean_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_539.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_386.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_reg_402.read()))) {
            first_2_reg_233 = tmp_data_V_reg_396.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_386.read())) {
            first_2_reg_233 = first_s_reg_200.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_386.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_reg_402.read()))) {
        i_reg_176 = in1Count_reg_390.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_176 = ap_const_lv23_0;
    }
    if (esl_seteq<1,1,1>(ap_condition_539.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_386.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_reg_402.read()))) {
            in1Count_1_reg_244 = in1Count_reg_390.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_386.read())) {
            in1Count_1_reg_244 = i_reg_176.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_539.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_386.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_reg_402.read()))) {
            lhs_V_reg_212 = sum_V_reg_406.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_386.read())) {
            lhs_V_reg_212 = p_0_reg_166.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_386.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_reg_402.read()))) {
        p_0_reg_166 = sum_V_reg_406.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_0_reg_166 = sum_V_cast_fu_254_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_condition_539.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_386.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_reg_402.read()))) {
            value_1_reg_222 = r_V_2_fu_339_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_386.read())) {
            value_1_reg_222 = i_op_assign_reg_188.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_load_A.read())) {
        INPUT_STREAM_V_data_V_0_payload_A = INPUT_STREAM_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_load_B.read())) {
        INPUT_STREAM_V_data_V_0_payload_B = INPUT_STREAM_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_load_A.read())) {
        INPUT_STREAM_V_last_V_0_payload_A = INPUT_STREAM_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_load_B.read())) {
        INPUT_STREAM_V_last_V_0_payload_B = INPUT_STREAM_TLAST.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_386.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_reg_402.read()))) {
        first_s_reg_200 = tmp_data_V_reg_396.read();
        i_op_assign_reg_188 = r_V_2_fu_339_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in1Count_reg_390 = in1Count_fu_264_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        sum_V_reg_406 = sum_V_fu_282_p2.read();
        tmp_data_V_reg_396 = INPUT_STREAM_V_data_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_last_V_reg_402 = INPUT_STREAM_V_last_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_386 = tmp_fu_258_p2.read();
    }
}

void Random::thread_INPUT_STREAM_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()))) {
        INPUT_STREAM_TDATA_blk_n = INPUT_STREAM_V_data_V_0_state.read()[0];
    } else {
        INPUT_STREAM_TDATA_blk_n = ap_const_logic_1;
    }
}

void Random::thread_INPUT_STREAM_TREADY() {
    INPUT_STREAM_TREADY = INPUT_STREAM_V_dest_V_0_state.read()[1];
}

void Random::thread_INPUT_STREAM_V_data_V_0_ack_in() {
    INPUT_STREAM_V_data_V_0_ack_in = INPUT_STREAM_V_data_V_0_state.read()[1];
}

void Random::thread_INPUT_STREAM_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        INPUT_STREAM_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void Random::thread_INPUT_STREAM_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_sel.read())) {
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_A.read();
    }
}

void Random::thread_INPUT_STREAM_V_data_V_0_load_A() {
    INPUT_STREAM_V_data_V_0_load_A = (INPUT_STREAM_V_data_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_data_V_0_sel_wr.read());
}

void Random::thread_INPUT_STREAM_V_data_V_0_load_B() {
    INPUT_STREAM_V_data_V_0_load_B = (INPUT_STREAM_V_data_V_0_sel_wr.read() & INPUT_STREAM_V_data_V_0_state_cmp_full.read());
}

void Random::thread_INPUT_STREAM_V_data_V_0_sel() {
    INPUT_STREAM_V_data_V_0_sel = INPUT_STREAM_V_data_V_0_sel_rd.read();
}

void Random::thread_INPUT_STREAM_V_data_V_0_state_cmp_full() {
    INPUT_STREAM_V_data_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void Random::thread_INPUT_STREAM_V_data_V_0_vld_in() {
    INPUT_STREAM_V_data_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Random::thread_INPUT_STREAM_V_data_V_0_vld_out() {
    INPUT_STREAM_V_data_V_0_vld_out = INPUT_STREAM_V_data_V_0_state.read()[0];
}

void Random::thread_INPUT_STREAM_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        INPUT_STREAM_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void Random::thread_INPUT_STREAM_V_dest_V_0_vld_in() {
    INPUT_STREAM_V_dest_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Random::thread_INPUT_STREAM_V_last_V_0_ack_in() {
    INPUT_STREAM_V_last_V_0_ack_in = INPUT_STREAM_V_last_V_0_state.read()[1];
}

void Random::thread_INPUT_STREAM_V_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        INPUT_STREAM_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void Random::thread_INPUT_STREAM_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_sel.read())) {
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_A.read();
    }
}

void Random::thread_INPUT_STREAM_V_last_V_0_load_A() {
    INPUT_STREAM_V_last_V_0_load_A = (INPUT_STREAM_V_last_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_last_V_0_sel_wr.read());
}

void Random::thread_INPUT_STREAM_V_last_V_0_load_B() {
    INPUT_STREAM_V_last_V_0_load_B = (INPUT_STREAM_V_last_V_0_sel_wr.read() & INPUT_STREAM_V_last_V_0_state_cmp_full.read());
}

void Random::thread_INPUT_STREAM_V_last_V_0_sel() {
    INPUT_STREAM_V_last_V_0_sel = INPUT_STREAM_V_last_V_0_sel_rd.read();
}

void Random::thread_INPUT_STREAM_V_last_V_0_state_cmp_full() {
    INPUT_STREAM_V_last_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void Random::thread_INPUT_STREAM_V_last_V_0_vld_in() {
    INPUT_STREAM_V_last_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Random::thread_INPUT_STREAM_V_last_V_0_vld_out() {
    INPUT_STREAM_V_last_V_0_vld_out = INPUT_STREAM_V_last_V_0_state.read()[0];
}

void Random::thread_agg_result_a_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        agg_result_a_ap_vld = ap_const_logic_1;
    } else {
        agg_result_a_ap_vld = ap_const_logic_0;
    }
}

void Random::thread_agg_result_b() {
    agg_result_b = esl_zext<32,23>(in1Count_1_reg_244.read());
}

void Random::thread_agg_result_b_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        agg_result_b_ap_vld = ap_const_logic_1;
    } else {
        agg_result_b_ap_vld = ap_const_logic_0;
    }
}

void Random::thread_agg_result_c_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        agg_result_c_ap_vld = ap_const_logic_1;
    } else {
        agg_result_c_ap_vld = ap_const_logic_0;
    }
}

void Random::thread_agg_result_d() {
    agg_result_d = esl_zext<32,23>(tmp_8_fu_352_p4.read());
}

void Random::thread_agg_result_d_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        agg_result_d_ap_vld = ap_const_logic_1;
    } else {
        agg_result_d_ap_vld = ap_const_logic_0;
    }
}

void Random::thread_agg_result_e() {
    agg_result_e = lhs_V_reg_212.read().range(32-1, 0);
}

void Random::thread_agg_result_e_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        agg_result_e_ap_vld = ap_const_logic_1;
    } else {
        agg_result_e_ap_vld = ap_const_logic_0;
    }
}

void Random::thread_agg_result_f() {
    agg_result_f = esl_zext<32,12>(temperature_V.read());
}

void Random::thread_agg_result_f_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        agg_result_f_ap_vld = ap_const_logic_1;
    } else {
        agg_result_f_ap_vld = ap_const_logic_0;
    }
}

void Random::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void Random::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Random::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void Random::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Random::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()));
}

void Random::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()));
}

void Random::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()));
}

void Random::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Random::thread_ap_condition_539() {
    ap_condition_539 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1));
}

void Random::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Random::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Random::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Random::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Random::thread_ap_phi_mux_i_phi_fu_180_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_386.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_reg_402.read()))) {
        ap_phi_mux_i_phi_fu_180_p4 = in1Count_reg_390.read();
    } else {
        ap_phi_mux_i_phi_fu_180_p4 = i_reg_176.read();
    }
}

void Random::thread_ap_phi_mux_p_0_phi_fu_169_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_386.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_reg_402.read()))) {
        ap_phi_mux_p_0_phi_fu_169_p4 = sum_V_reg_406.read();
    } else {
        ap_phi_mux_p_0_phi_fu_169_p4 = p_0_reg_166.read();
    }
}

void Random::thread_ap_predicate_tran3to4_state2() {
    ap_predicate_tran3to4_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_258_p2.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_258_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, INPUT_STREAM_V_last_V_0_data_out.read())));
}

void Random::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Random::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Random::thread_in1Count_fu_264_p2() {
    in1Count_fu_264_p2 = (!ap_phi_mux_i_phi_fu_180_p4.read().is_01() || !ap_const_lv23_1.is_01())? sc_lv<23>(): (sc_biguint<23>(ap_phi_mux_i_phi_fu_180_p4.read()) + sc_biguint<23>(ap_const_lv23_1));
}

void Random::thread_lhs_V_cast_fu_288_p1() {
    lhs_V_cast_fu_288_p1 = esl_zext<56,55>(sum_V_reg_406.read());
}

void Random::thread_r_V_2_fu_339_p3() {
    r_V_2_fu_339_p3 = (!tmp_2_fu_301_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_2_fu_301_p3.read()[0].to_bool())? tmp_9_fu_325_p2.read(): tmp_6_fu_331_p3.read());
}

void Random::thread_r_V_fu_295_p2() {
    r_V_fu_295_p2 = (!rhs_V_cast_fu_291_p1.read().is_01() || !lhs_V_cast_fu_288_p1.read().is_01())? sc_lv<56>(): (sc_bigint<56>(rhs_V_cast_fu_291_p1.read()) + sc_biguint<56>(lhs_V_cast_fu_288_p1.read()));
}

void Random::thread_rhs_V_cast_fu_291_p1() {
    rhs_V_cast_fu_291_p1 = esl_sext<56,32>(i_op_assign_reg_188.read());
}

void Random::thread_sum_V_cast_fu_254_p1() {
    sum_V_cast_fu_254_p1 = esl_zext<55,12>(temperature_V.read());
}

void Random::thread_sum_V_fu_282_p2() {
    sum_V_fu_282_p2 = (!ap_phi_mux_p_0_phi_fu_169_p4.read().is_01() || !tmp_2_cast_fu_278_p1.read().is_01())? sc_lv<55>(): (sc_biguint<55>(ap_phi_mux_p_0_phi_fu_169_p4.read()) + sc_biguint<55>(tmp_2_cast_fu_278_p1.read()));
}

void Random::thread_tmp_2_cast_fu_278_p1() {
    tmp_2_cast_fu_278_p1 = esl_zext<55,32>(INPUT_STREAM_V_data_V_0_data_out.read());
}

void Random::thread_tmp_2_fu_301_p3() {
    tmp_2_fu_301_p3 = r_V_fu_295_p2.read().range(55, 55);
}

void Random::thread_tmp_4_fu_309_p1() {
    tmp_4_fu_309_p1 = r_V_fu_295_p2.read().range(1-1, 0);
}

void Random::thread_tmp_5_fu_313_p1() {
    tmp_5_fu_313_p1 = r_V_fu_295_p2.read().range(1-1, 0);
}

void Random::thread_tmp_6_fu_331_p3() {
    tmp_6_fu_331_p3 = esl_concat<31,1>(ap_const_lv31_0, tmp_4_fu_309_p1.read());
}

void Random::thread_tmp_7_fu_317_p3() {
    tmp_7_fu_317_p3 = esl_concat<31,1>(ap_const_lv31_0, tmp_5_fu_313_p1.read());
}

void Random::thread_tmp_8_fu_352_p4() {
    tmp_8_fu_352_p4 = lhs_V_reg_212.read().range(54, 32);
}

void Random::thread_tmp_9_fu_325_p2() {
    tmp_9_fu_325_p2 = (!ap_const_lv32_0.is_01() || !tmp_7_fu_317_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_7_fu_317_p3.read()));
}

void Random::thread_tmp_fu_258_p2() {
    tmp_fu_258_p2 = (!ap_phi_mux_i_phi_fu_180_p4.read().is_01() || !ap_const_lv23_7FBC00.is_01())? sc_lv<1>(): (sc_biguint<23>(ap_phi_mux_i_phi_fu_180_p4.read()) < sc_biguint<23>(ap_const_lv23_7FBC00));
}

void Random::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void Random::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDATA\" :  \"" << INPUT_STREAM_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TVALID\" :  \"" << INPUT_STREAM_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"INPUT_STREAM_TREADY\" :  \"" << INPUT_STREAM_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TKEEP\" :  \"" << INPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TSTRB\" :  \"" << INPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TUSER\" :  \"" << INPUT_STREAM_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TLAST\" :  \"" << INPUT_STREAM_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TID\" :  \"" << INPUT_STREAM_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDEST\" :  \"" << INPUT_STREAM_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"temperature_V\" :  \"" << temperature_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

