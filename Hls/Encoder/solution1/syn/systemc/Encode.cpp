// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Encode.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Encode::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Encode::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<73> Encode::ap_ST_fsm_state1 = "1";
const sc_lv<73> Encode::ap_ST_fsm_state2 = "10";
const sc_lv<73> Encode::ap_ST_fsm_state3 = "100";
const sc_lv<73> Encode::ap_ST_fsm_state4 = "1000";
const sc_lv<73> Encode::ap_ST_fsm_state5 = "10000";
const sc_lv<73> Encode::ap_ST_fsm_state6 = "100000";
const sc_lv<73> Encode::ap_ST_fsm_state7 = "1000000";
const sc_lv<73> Encode::ap_ST_fsm_state8 = "10000000";
const sc_lv<73> Encode::ap_ST_fsm_state9 = "100000000";
const sc_lv<73> Encode::ap_ST_fsm_state10 = "1000000000";
const sc_lv<73> Encode::ap_ST_fsm_state11 = "10000000000";
const sc_lv<73> Encode::ap_ST_fsm_state12 = "100000000000";
const sc_lv<73> Encode::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state67 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state68 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state69 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state70 = "1000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state71 = "10000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state72 = "100000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<73> Encode::ap_ST_fsm_state73 = "1000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> Encode::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Encode::ap_const_lv1_0 = "0";
const sc_lv<1> Encode::ap_const_lv1_1 = "1";
const sc_lv<2> Encode::ap_const_lv2_0 = "00";
const sc_lv<2> Encode::ap_const_lv2_2 = "10";
const sc_lv<2> Encode::ap_const_lv2_3 = "11";
const sc_lv<2> Encode::ap_const_lv2_1 = "1";
const sc_lv<32> Encode::ap_const_lv32_1 = "1";
const sc_lv<32> Encode::ap_const_lv32_2 = "10";
const sc_lv<32> Encode::ap_const_lv32_47 = "1000111";
const int Encode::C_S_AXI_DATA_WIDTH = "100000";
const bool Encode::ap_const_boolean_0 = false;
const sc_lv<32> Encode::ap_const_lv32_46 = "1000110";
const sc_lv<23> Encode::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<31> Encode::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> Encode::ap_const_lv32_48 = "1001000";
const sc_lv<32> Encode::ap_const_lv32_790 = "11110010000";
const sc_lv<23> Encode::ap_const_lv23_7FBC00 = "11111111011110000000000";
const sc_lv<23> Encode::ap_const_lv23_1 = "1";
const sc_lv<31> Encode::ap_const_lv31_1 = "1";
const sc_lv<32> Encode::ap_const_lv32_3 = "11";
const bool Encode::ap_const_boolean_1 = true;

Encode::Encode(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Encode_CONTROL_BUS_s_axi_U = new Encode_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("Encode_CONTROL_BUS_s_axi_U");
    Encode_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    Encode_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    Encode_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    Encode_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    Encode_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    Encode_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    Encode_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    Encode_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    Encode_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    Encode_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    Encode_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    Encode_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    Encode_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    Encode_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    Encode_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    Encode_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    Encode_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    Encode_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    Encode_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    Encode_CONTROL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    Encode_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    Encode_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    Encode_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    Encode_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    Encode_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    Encode_CONTROL_BUS_s_axi_U->agg_result_a(ap_var_for_const1);
    Encode_CONTROL_BUS_s_axi_U->agg_result_a_ap_vld(agg_result_a_ap_vld);
    Encode_CONTROL_BUS_s_axi_U->agg_result_b(in1Count_1_cast_fu_338_p1);
    Encode_CONTROL_BUS_s_axi_U->agg_result_b_ap_vld(agg_result_b_ap_vld);
    Encode_CONTROL_BUS_s_axi_U->agg_result_c(in1Count_1_cast_fu_338_p1);
    Encode_CONTROL_BUS_s_axi_U->agg_result_c_ap_vld(agg_result_c_ap_vld);
    Encode_CONTROL_BUS_s_axi_U->agg_result_d(searched_read_reg_349);
    Encode_CONTROL_BUS_s_axi_U->agg_result_d_ap_vld(agg_result_d_ap_vld);
    Encode_CONTROL_BUS_s_axi_U->agg_result_e(n_read_reg_344);
    Encode_CONTROL_BUS_s_axi_U->agg_result_e_ap_vld(agg_result_e_ap_vld);
    Encode_CONTROL_BUS_s_axi_U->agg_result_f(ap_var_for_const2);
    Encode_CONTROL_BUS_s_axi_U->agg_result_f_ap_vld(agg_result_f_ap_vld);
    Encode_CONTROL_BUS_s_axi_U->searched(searched);
    Encode_CONTROL_BUS_s_axi_U->n(n);
    Encode_urem_64ns_bkb_U1 = new Encode_urem_64ns_bkb<1,68,64,32,32>("Encode_urem_64ns_bkb_U1");
    Encode_urem_64ns_bkb_U1->clk(ap_clk);
    Encode_urem_64ns_bkb_U1->reset(ap_rst_n_inv);
    Encode_urem_64ns_bkb_U1->din0(r_V_reg_412);
    Encode_urem_64ns_bkb_U1->din1(grp_fu_330_p1);
    Encode_urem_64ns_bkb_U1->ce(ap_var_for_const0);
    Encode_urem_64ns_bkb_U1->dout(grp_fu_330_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_INPUT_STREAM_TDATA_blk_n);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );

    SC_METHOD(thread_INPUT_STREAM_TREADY);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_ack_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_data_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_data_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_sel);
    sensitive << ( INPUT_STREAM_V_data_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_data_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_ack_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_dest_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_dest_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_sel);
    sensitive << ( INPUT_STREAM_V_dest_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_dest_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_id_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_ack_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_id_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_id_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_id_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_id_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_id_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_sel);
    sensitive << ( INPUT_STREAM_V_id_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_id_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_id_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_id_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_ack_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_keep_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_keep_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_sel);
    sensitive << ( INPUT_STREAM_V_keep_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_keep_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_last_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_ack_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_last_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_last_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_last_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_last_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_last_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_sel);
    sensitive << ( INPUT_STREAM_V_last_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_last_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_last_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_last_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_ack_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_strb_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_strb_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_sel);
    sensitive << ( INPUT_STREAM_V_strb_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_strb_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_ack_in);
    sensitive << ( INPUT_STREAM_V_user_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_ack_out);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_data_out);
    sensitive << ( INPUT_STREAM_V_user_V_0_payload_A );
    sensitive << ( INPUT_STREAM_V_user_V_0_payload_B );
    sensitive << ( INPUT_STREAM_V_user_V_0_sel );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_load_A);
    sensitive << ( INPUT_STREAM_V_user_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_load_B);
    sensitive << ( INPUT_STREAM_V_user_V_0_sel_wr );
    sensitive << ( INPUT_STREAM_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_sel);
    sensitive << ( INPUT_STREAM_V_user_V_0_sel_rd );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_state_cmp_full);
    sensitive << ( INPUT_STREAM_V_user_V_0_state );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_vld_in);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_INPUT_STREAM_V_user_V_0_vld_out);
    sensitive << ( INPUT_STREAM_V_user_V_0_state );

    SC_METHOD(thread_OUTPUT_STREAM_TDATA);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TDATA_blk_n);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_310_p2 );
    sensitive << ( ap_CS_fsm_state72 );

    SC_METHOD(thread_OUTPUT_STREAM_TDEST);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TID);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TKEEP);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TLAST);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TSTRB);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TUSER);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_data_out );

    SC_METHOD(thread_OUTPUT_STREAM_TVALID);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_310_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_data_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_310_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_dest_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_310_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_id_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_310_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_keep_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_310_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_last_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_310_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_strb_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_ack_in);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_ack_out);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_data_out);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_payload_A );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_payload_B );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_load_A);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_load_B);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel_wr );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_sel);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_state_cmp_full);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_310_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_OUTPUT_STREAM_V_user_V_1_vld_out);
    sensitive << ( OUTPUT_STREAM_V_user_V_1_state );

    SC_METHOD(thread_agg_result_a_ap_vld);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state73 );

    SC_METHOD(thread_agg_result_b_ap_vld);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state73 );

    SC_METHOD(thread_agg_result_c_ap_vld);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state73 );

    SC_METHOD(thread_agg_result_d_ap_vld);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state73 );

    SC_METHOD(thread_agg_result_e_ap_vld);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state73 );

    SC_METHOD(thread_agg_result_f_ap_vld);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state73 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state71);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state72);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state73);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( tmp_1_fu_262_p2 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( tmp_4_fu_310_p2 );

    SC_METHOD(thread_ap_block_state73);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state73 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state73 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_330_p1);
    sensitive << ( tmp_reg_355 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in1Count_1_cast_fu_338_p1);
    sensitive << ( in1Count_1_reg_248 );

    SC_METHOD(thread_in1Count_3_fu_268_p2);
    sensitive << ( in1Count_reg_211 );

    SC_METHOD(thread_j_1_fu_315_p2);
    sensitive << ( j_reg_237 );

    SC_METHOD(thread_j_cast_fu_306_p1);
    sensitive << ( j_reg_237 );

    SC_METHOD(thread_r_V_2_fu_334_p1);
    sensitive << ( grp_fu_330_p2 );

    SC_METHOD(thread_r_V_fu_325_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( rhs_V_reg_399 );

    SC_METHOD(thread_r_V_fu_325_p1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( r_V_fu_325_p10 );

    SC_METHOD(thread_r_V_fu_325_p10);
    sensitive << ( first_reg_223 );

    SC_METHOD(thread_r_V_fu_325_p2);
    sensitive << ( r_V_fu_325_p0 );
    sensitive << ( r_V_fu_325_p1 );

    SC_METHOD(thread_rhs_V_fu_302_p1);
    sensitive << ( INPUT_STREAM_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_1_fu_262_p2);
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );
    sensitive << ( in1Count_reg_211 );

    SC_METHOD(thread_tmp_4_fu_310_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( searched_read_reg_349 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( j_cast_fu_306_p1 );

    SC_METHOD(thread_tmp_fu_258_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n );

    SC_METHOD(thread_tmp_fu_258_p1);
    sensitive << ( tmp_fu_258_p0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_STREAM_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_STREAM_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_keep_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_strb_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_user_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_last_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_id_V_1_ack_in );
    sensitive << ( OUTPUT_STREAM_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_262_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_fu_310_p2 );
    sensitive << ( ap_CS_fsm_state72 );
    sensitive << ( tmp_last_V_reg_384 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_fsm_state73 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000000000000000000000000000001";
    INPUT_STREAM_V_data_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_data_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_data_V_0_state = "00";
    INPUT_STREAM_V_keep_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_keep_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_keep_V_0_state = "00";
    INPUT_STREAM_V_strb_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_strb_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_strb_V_0_state = "00";
    INPUT_STREAM_V_user_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_user_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_user_V_0_state = "00";
    INPUT_STREAM_V_last_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_last_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_last_V_0_state = "00";
    INPUT_STREAM_V_id_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_id_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_id_V_0_state = "00";
    INPUT_STREAM_V_dest_V_0_sel_rd = SC_LOGIC_0;
    INPUT_STREAM_V_dest_V_0_sel_wr = SC_LOGIC_0;
    INPUT_STREAM_V_dest_V_0_state = "00";
    OUTPUT_STREAM_V_data_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_data_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_data_V_1_state = "00";
    OUTPUT_STREAM_V_keep_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_keep_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_keep_V_1_state = "00";
    OUTPUT_STREAM_V_strb_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_strb_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_strb_V_1_state = "00";
    OUTPUT_STREAM_V_user_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_user_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_user_V_1_state = "00";
    OUTPUT_STREAM_V_last_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_last_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_last_V_1_state = "00";
    OUTPUT_STREAM_V_id_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_id_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_id_V_1_state = "00";
    OUTPUT_STREAM_V_dest_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_STREAM_V_dest_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_STREAM_V_dest_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Encode_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA, "(port)INPUT_STREAM_TDATA");
    sc_trace(mVcdFile, INPUT_STREAM_TVALID, "(port)INPUT_STREAM_TVALID");
    sc_trace(mVcdFile, INPUT_STREAM_TREADY, "(port)INPUT_STREAM_TREADY");
    sc_trace(mVcdFile, INPUT_STREAM_TKEEP, "(port)INPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, INPUT_STREAM_TSTRB, "(port)INPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, INPUT_STREAM_TUSER, "(port)INPUT_STREAM_TUSER");
    sc_trace(mVcdFile, INPUT_STREAM_TLAST, "(port)INPUT_STREAM_TLAST");
    sc_trace(mVcdFile, INPUT_STREAM_TID, "(port)INPUT_STREAM_TID");
    sc_trace(mVcdFile, INPUT_STREAM_TDEST, "(port)INPUT_STREAM_TDEST");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDATA, "(port)OUTPUT_STREAM_TDATA");
    sc_trace(mVcdFile, OUTPUT_STREAM_TVALID, "(port)OUTPUT_STREAM_TVALID");
    sc_trace(mVcdFile, OUTPUT_STREAM_TREADY, "(port)OUTPUT_STREAM_TREADY");
    sc_trace(mVcdFile, OUTPUT_STREAM_TKEEP, "(port)OUTPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, OUTPUT_STREAM_TSTRB, "(port)OUTPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, OUTPUT_STREAM_TUSER, "(port)OUTPUT_STREAM_TUSER");
    sc_trace(mVcdFile, OUTPUT_STREAM_TLAST, "(port)OUTPUT_STREAM_TLAST");
    sc_trace(mVcdFile, OUTPUT_STREAM_TID, "(port)OUTPUT_STREAM_TID");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDEST, "(port)OUTPUT_STREAM_TDEST");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, agg_result_a_ap_vld, "agg_result_a_ap_vld");
    sc_trace(mVcdFile, agg_result_b_ap_vld, "agg_result_b_ap_vld");
    sc_trace(mVcdFile, agg_result_c_ap_vld, "agg_result_c_ap_vld");
    sc_trace(mVcdFile, agg_result_d_ap_vld, "agg_result_d_ap_vld");
    sc_trace(mVcdFile, agg_result_e_ap_vld, "agg_result_e_ap_vld");
    sc_trace(mVcdFile, agg_result_f_ap_vld, "agg_result_f_ap_vld");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_data_out, "INPUT_STREAM_V_data_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_vld_in, "INPUT_STREAM_V_data_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_vld_out, "INPUT_STREAM_V_data_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_ack_in, "INPUT_STREAM_V_data_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_ack_out, "INPUT_STREAM_V_data_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_payload_A, "INPUT_STREAM_V_data_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_payload_B, "INPUT_STREAM_V_data_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel_rd, "INPUT_STREAM_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel_wr, "INPUT_STREAM_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_sel, "INPUT_STREAM_V_data_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_load_A, "INPUT_STREAM_V_data_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_load_B, "INPUT_STREAM_V_data_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_state, "INPUT_STREAM_V_data_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_data_V_0_state_cmp_full, "INPUT_STREAM_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_data_out, "INPUT_STREAM_V_keep_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_vld_in, "INPUT_STREAM_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_vld_out, "INPUT_STREAM_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_ack_in, "INPUT_STREAM_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_ack_out, "INPUT_STREAM_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_payload_A, "INPUT_STREAM_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_payload_B, "INPUT_STREAM_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_sel_rd, "INPUT_STREAM_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_sel_wr, "INPUT_STREAM_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_sel, "INPUT_STREAM_V_keep_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_load_A, "INPUT_STREAM_V_keep_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_load_B, "INPUT_STREAM_V_keep_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_state, "INPUT_STREAM_V_keep_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_keep_V_0_state_cmp_full, "INPUT_STREAM_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_data_out, "INPUT_STREAM_V_strb_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_vld_in, "INPUT_STREAM_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_vld_out, "INPUT_STREAM_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_ack_in, "INPUT_STREAM_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_ack_out, "INPUT_STREAM_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_payload_A, "INPUT_STREAM_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_payload_B, "INPUT_STREAM_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_sel_rd, "INPUT_STREAM_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_sel_wr, "INPUT_STREAM_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_sel, "INPUT_STREAM_V_strb_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_load_A, "INPUT_STREAM_V_strb_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_load_B, "INPUT_STREAM_V_strb_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_state, "INPUT_STREAM_V_strb_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_strb_V_0_state_cmp_full, "INPUT_STREAM_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_data_out, "INPUT_STREAM_V_user_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_vld_in, "INPUT_STREAM_V_user_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_vld_out, "INPUT_STREAM_V_user_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_ack_in, "INPUT_STREAM_V_user_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_ack_out, "INPUT_STREAM_V_user_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_payload_A, "INPUT_STREAM_V_user_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_payload_B, "INPUT_STREAM_V_user_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_sel_rd, "INPUT_STREAM_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_sel_wr, "INPUT_STREAM_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_sel, "INPUT_STREAM_V_user_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_load_A, "INPUT_STREAM_V_user_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_load_B, "INPUT_STREAM_V_user_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_state, "INPUT_STREAM_V_user_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_user_V_0_state_cmp_full, "INPUT_STREAM_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_data_out, "INPUT_STREAM_V_last_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_vld_in, "INPUT_STREAM_V_last_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_vld_out, "INPUT_STREAM_V_last_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_ack_in, "INPUT_STREAM_V_last_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_ack_out, "INPUT_STREAM_V_last_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_payload_A, "INPUT_STREAM_V_last_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_payload_B, "INPUT_STREAM_V_last_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_sel_rd, "INPUT_STREAM_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_sel_wr, "INPUT_STREAM_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_sel, "INPUT_STREAM_V_last_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_load_A, "INPUT_STREAM_V_last_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_load_B, "INPUT_STREAM_V_last_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_state, "INPUT_STREAM_V_last_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_last_V_0_state_cmp_full, "INPUT_STREAM_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_data_out, "INPUT_STREAM_V_id_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_vld_in, "INPUT_STREAM_V_id_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_vld_out, "INPUT_STREAM_V_id_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_ack_in, "INPUT_STREAM_V_id_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_ack_out, "INPUT_STREAM_V_id_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_payload_A, "INPUT_STREAM_V_id_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_payload_B, "INPUT_STREAM_V_id_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_sel_rd, "INPUT_STREAM_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_sel_wr, "INPUT_STREAM_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_sel, "INPUT_STREAM_V_id_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_load_A, "INPUT_STREAM_V_id_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_load_B, "INPUT_STREAM_V_id_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_state, "INPUT_STREAM_V_id_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_id_V_0_state_cmp_full, "INPUT_STREAM_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_data_out, "INPUT_STREAM_V_dest_V_0_data_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_vld_in, "INPUT_STREAM_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_vld_out, "INPUT_STREAM_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_ack_in, "INPUT_STREAM_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_ack_out, "INPUT_STREAM_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_payload_A, "INPUT_STREAM_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_payload_B, "INPUT_STREAM_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_sel_rd, "INPUT_STREAM_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_sel_wr, "INPUT_STREAM_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_sel, "INPUT_STREAM_V_dest_V_0_sel");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_load_A, "INPUT_STREAM_V_dest_V_0_load_A");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_load_B, "INPUT_STREAM_V_dest_V_0_load_B");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_state, "INPUT_STREAM_V_dest_V_0_state");
    sc_trace(mVcdFile, INPUT_STREAM_V_dest_V_0_state_cmp_full, "INPUT_STREAM_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, searched, "searched");
    sc_trace(mVcdFile, n, "n");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_data_out, "OUTPUT_STREAM_V_data_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_vld_in, "OUTPUT_STREAM_V_data_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_vld_out, "OUTPUT_STREAM_V_data_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_ack_in, "OUTPUT_STREAM_V_data_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_ack_out, "OUTPUT_STREAM_V_data_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_payload_A, "OUTPUT_STREAM_V_data_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_payload_B, "OUTPUT_STREAM_V_data_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_sel_rd, "OUTPUT_STREAM_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_sel_wr, "OUTPUT_STREAM_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_sel, "OUTPUT_STREAM_V_data_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_load_A, "OUTPUT_STREAM_V_data_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_load_B, "OUTPUT_STREAM_V_data_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_state, "OUTPUT_STREAM_V_data_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_data_V_1_state_cmp_full, "OUTPUT_STREAM_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_data_out, "OUTPUT_STREAM_V_keep_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_vld_in, "OUTPUT_STREAM_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_vld_out, "OUTPUT_STREAM_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_ack_in, "OUTPUT_STREAM_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_ack_out, "OUTPUT_STREAM_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_payload_A, "OUTPUT_STREAM_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_payload_B, "OUTPUT_STREAM_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_sel_rd, "OUTPUT_STREAM_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_sel_wr, "OUTPUT_STREAM_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_sel, "OUTPUT_STREAM_V_keep_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_load_A, "OUTPUT_STREAM_V_keep_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_load_B, "OUTPUT_STREAM_V_keep_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_state, "OUTPUT_STREAM_V_keep_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_keep_V_1_state_cmp_full, "OUTPUT_STREAM_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_data_out, "OUTPUT_STREAM_V_strb_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_vld_in, "OUTPUT_STREAM_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_vld_out, "OUTPUT_STREAM_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_ack_in, "OUTPUT_STREAM_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_ack_out, "OUTPUT_STREAM_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_payload_A, "OUTPUT_STREAM_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_payload_B, "OUTPUT_STREAM_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_sel_rd, "OUTPUT_STREAM_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_sel_wr, "OUTPUT_STREAM_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_sel, "OUTPUT_STREAM_V_strb_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_load_A, "OUTPUT_STREAM_V_strb_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_load_B, "OUTPUT_STREAM_V_strb_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_state, "OUTPUT_STREAM_V_strb_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_strb_V_1_state_cmp_full, "OUTPUT_STREAM_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_data_out, "OUTPUT_STREAM_V_user_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_vld_in, "OUTPUT_STREAM_V_user_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_vld_out, "OUTPUT_STREAM_V_user_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_ack_in, "OUTPUT_STREAM_V_user_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_ack_out, "OUTPUT_STREAM_V_user_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_payload_A, "OUTPUT_STREAM_V_user_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_payload_B, "OUTPUT_STREAM_V_user_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_sel_rd, "OUTPUT_STREAM_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_sel_wr, "OUTPUT_STREAM_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_sel, "OUTPUT_STREAM_V_user_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_load_A, "OUTPUT_STREAM_V_user_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_load_B, "OUTPUT_STREAM_V_user_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_state, "OUTPUT_STREAM_V_user_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_user_V_1_state_cmp_full, "OUTPUT_STREAM_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_data_out, "OUTPUT_STREAM_V_last_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_vld_in, "OUTPUT_STREAM_V_last_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_vld_out, "OUTPUT_STREAM_V_last_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_ack_in, "OUTPUT_STREAM_V_last_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_ack_out, "OUTPUT_STREAM_V_last_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_payload_A, "OUTPUT_STREAM_V_last_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_payload_B, "OUTPUT_STREAM_V_last_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_sel_rd, "OUTPUT_STREAM_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_sel_wr, "OUTPUT_STREAM_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_sel, "OUTPUT_STREAM_V_last_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_load_A, "OUTPUT_STREAM_V_last_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_load_B, "OUTPUT_STREAM_V_last_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_state, "OUTPUT_STREAM_V_last_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_last_V_1_state_cmp_full, "OUTPUT_STREAM_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_data_out, "OUTPUT_STREAM_V_id_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_vld_in, "OUTPUT_STREAM_V_id_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_vld_out, "OUTPUT_STREAM_V_id_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_ack_in, "OUTPUT_STREAM_V_id_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_ack_out, "OUTPUT_STREAM_V_id_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_payload_A, "OUTPUT_STREAM_V_id_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_payload_B, "OUTPUT_STREAM_V_id_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_sel_rd, "OUTPUT_STREAM_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_sel_wr, "OUTPUT_STREAM_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_sel, "OUTPUT_STREAM_V_id_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_load_A, "OUTPUT_STREAM_V_id_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_load_B, "OUTPUT_STREAM_V_id_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_state, "OUTPUT_STREAM_V_id_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_id_V_1_state_cmp_full, "OUTPUT_STREAM_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_data_out, "OUTPUT_STREAM_V_dest_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_vld_in, "OUTPUT_STREAM_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_vld_out, "OUTPUT_STREAM_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_ack_in, "OUTPUT_STREAM_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_ack_out, "OUTPUT_STREAM_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_payload_A, "OUTPUT_STREAM_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_payload_B, "OUTPUT_STREAM_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_sel_rd, "OUTPUT_STREAM_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_sel_wr, "OUTPUT_STREAM_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_sel, "OUTPUT_STREAM_V_dest_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_load_A, "OUTPUT_STREAM_V_dest_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_load_B, "OUTPUT_STREAM_V_dest_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_state, "OUTPUT_STREAM_V_dest_V_1_state");
    sc_trace(mVcdFile, OUTPUT_STREAM_V_dest_V_1_state_cmp_full, "OUTPUT_STREAM_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA_blk_n, "INPUT_STREAM_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_fu_262_p2, "tmp_1_fu_262_p2");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDATA_blk_n, "OUTPUT_STREAM_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_4_fu_310_p2, "tmp_4_fu_310_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state72, "ap_CS_fsm_state72");
    sc_trace(mVcdFile, n_read_reg_344, "n_read_reg_344");
    sc_trace(mVcdFile, searched_read_reg_349, "searched_read_reg_349");
    sc_trace(mVcdFile, tmp_fu_258_p1, "tmp_fu_258_p1");
    sc_trace(mVcdFile, tmp_reg_355, "tmp_reg_355");
    sc_trace(mVcdFile, in1Count_3_fu_268_p2, "in1Count_3_fu_268_p2");
    sc_trace(mVcdFile, in1Count_3_reg_363, "in1Count_3_reg_363");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, tmp_keep_V_reg_369, "tmp_keep_V_reg_369");
    sc_trace(mVcdFile, tmp_strb_V_reg_374, "tmp_strb_V_reg_374");
    sc_trace(mVcdFile, tmp_user_V_reg_379, "tmp_user_V_reg_379");
    sc_trace(mVcdFile, tmp_last_V_reg_384, "tmp_last_V_reg_384");
    sc_trace(mVcdFile, tmp_id_V_reg_389, "tmp_id_V_reg_389");
    sc_trace(mVcdFile, tmp_dest_V_reg_394, "tmp_dest_V_reg_394");
    sc_trace(mVcdFile, rhs_V_fu_302_p1, "rhs_V_fu_302_p1");
    sc_trace(mVcdFile, rhs_V_reg_399, "rhs_V_reg_399");
    sc_trace(mVcdFile, j_1_fu_315_p2, "j_1_fu_315_p2");
    sc_trace(mVcdFile, j_1_reg_407, "j_1_reg_407");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, r_V_fu_325_p2, "r_V_fu_325_p2");
    sc_trace(mVcdFile, r_V_reg_412, "r_V_reg_412");
    sc_trace(mVcdFile, r_V_2_fu_334_p1, "r_V_2_fu_334_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state71, "ap_CS_fsm_state71");
    sc_trace(mVcdFile, in1Count_reg_211, "in1Count_reg_211");
    sc_trace(mVcdFile, first_reg_223, "first_reg_223");
    sc_trace(mVcdFile, j_reg_237, "j_reg_237");
    sc_trace(mVcdFile, in1Count_1_reg_248, "in1Count_1_reg_248");
    sc_trace(mVcdFile, ap_CS_fsm_state73, "ap_CS_fsm_state73");
    sc_trace(mVcdFile, ap_block_state73, "ap_block_state73");
    sc_trace(mVcdFile, in1Count_1_cast_fu_338_p1, "in1Count_1_cast_fu_338_p1");
    sc_trace(mVcdFile, tmp_fu_258_p0, "tmp_fu_258_p0");
    sc_trace(mVcdFile, j_cast_fu_306_p1, "j_cast_fu_306_p1");
    sc_trace(mVcdFile, r_V_fu_325_p0, "r_V_fu_325_p0");
    sc_trace(mVcdFile, r_V_fu_325_p1, "r_V_fu_325_p1");
    sc_trace(mVcdFile, grp_fu_330_p1, "grp_fu_330_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_330_p2, "grp_fu_330_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, r_V_fu_325_p10, "r_V_fu_325_p10");
#endif

    }
    mHdltvinHandle.open("Encode.hdltvin.dat");
    mHdltvoutHandle.open("Encode.hdltvout.dat");
}

Encode::~Encode() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Encode_CONTROL_BUS_s_axi_U;
    delete Encode_urem_64ns_bkb_U1;
}

void Encode::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Encode::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void Encode::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_790;
}

void Encode::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_out.read()))) {
            INPUT_STREAM_V_data_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_in.read()))) {
            INPUT_STREAM_V_data_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(INPUT_STREAM_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_out.read()))) {
            INPUT_STREAM_V_dest_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_in.read()))) {
            INPUT_STREAM_V_dest_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_dest_V_0_state.read())))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_dest_V_0_state.read())))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_out.read()))) {
            INPUT_STREAM_V_id_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_in.read()))) {
            INPUT_STREAM_V_id_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_id_V_0_state.read())))) {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_id_V_0_state.read())))) {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_out.read()))) {
            INPUT_STREAM_V_keep_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_in.read()))) {
            INPUT_STREAM_V_keep_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_keep_V_0_state.read())))) {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_keep_V_0_state.read())))) {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_out.read()))) {
            INPUT_STREAM_V_last_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_in.read()))) {
            INPUT_STREAM_V_last_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_last_V_0_state.read())))) {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_last_V_0_state.read())))) {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_out.read()))) {
            INPUT_STREAM_V_strb_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_in.read()))) {
            INPUT_STREAM_V_strb_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_strb_V_0_state.read())))) {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_strb_V_0_state.read())))) {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_out.read()))) {
            INPUT_STREAM_V_user_V_0_sel_rd =  (sc_logic) (~INPUT_STREAM_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_in.read()))) {
            INPUT_STREAM_V_user_V_0_sel_wr =  (sc_logic) (~INPUT_STREAM_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_STREAM_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_user_V_0_state.read())))) {
            INPUT_STREAM_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_user_V_0_state.read())))) {
            INPUT_STREAM_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_STREAM_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_STREAM_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_STREAM_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_ack_out.read()))))) {
            INPUT_STREAM_V_user_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_STREAM_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_data_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_data_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_data_V_1_state.read())))) {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_data_V_1_state.read())))) {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_dest_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_dest_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_dest_V_1_state.read())))) {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_dest_V_1_state.read())))) {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_id_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_id_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_id_V_1_state.read())))) {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_id_V_1_state.read())))) {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_keep_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_keep_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_keep_V_1_state.read())))) {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_keep_V_1_state.read())))) {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_last_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_last_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_last_V_1_state.read())))) {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_last_V_1_state.read())))) {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_strb_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_strb_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_strb_V_1_state.read())))) {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_strb_V_1_state.read())))) {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_out.read()))) {
            OUTPUT_STREAM_V_user_V_1_sel_rd =  (sc_logic) (~OUTPUT_STREAM_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_in.read()))) {
            OUTPUT_STREAM_V_user_V_1_sel_wr =  (sc_logic) (~OUTPUT_STREAM_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_user_V_1_state.read())))) {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_user_V_1_state.read())))) {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_STREAM_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_STREAM_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_STREAM_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_ack_out.read()))))) {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_STREAM_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read())) {
        first_reg_223 = r_V_2_fu_334_p1.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        first_reg_223 = ap_const_lv32_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_in.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read()) && 
         esl_seteq<1,1,1>(tmp_last_V_reg_384.read(), ap_const_lv1_1))) {
        in1Count_1_reg_248 = in1Count_3_reg_363.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_0))) {
        in1Count_1_reg_248 = in1Count_reg_211.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_in.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read()) && 
         esl_seteq<1,1,1>(tmp_last_V_reg_384.read(), ap_const_lv1_0))) {
        in1Count_reg_211 = in1Count_3_reg_363.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        in1Count_reg_211 = ap_const_lv23_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read())) {
        j_reg_237 = j_1_reg_407.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        j_reg_237 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_load_A.read())) {
        INPUT_STREAM_V_data_V_0_payload_A = INPUT_STREAM_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_load_B.read())) {
        INPUT_STREAM_V_data_V_0_payload_B = INPUT_STREAM_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_load_A.read())) {
        INPUT_STREAM_V_dest_V_0_payload_A = INPUT_STREAM_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_load_B.read())) {
        INPUT_STREAM_V_dest_V_0_payload_B = INPUT_STREAM_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_load_A.read())) {
        INPUT_STREAM_V_id_V_0_payload_A = INPUT_STREAM_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_load_B.read())) {
        INPUT_STREAM_V_id_V_0_payload_B = INPUT_STREAM_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_load_A.read())) {
        INPUT_STREAM_V_keep_V_0_payload_A = INPUT_STREAM_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_load_B.read())) {
        INPUT_STREAM_V_keep_V_0_payload_B = INPUT_STREAM_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_load_A.read())) {
        INPUT_STREAM_V_last_V_0_payload_A = INPUT_STREAM_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_load_B.read())) {
        INPUT_STREAM_V_last_V_0_payload_B = INPUT_STREAM_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_load_A.read())) {
        INPUT_STREAM_V_strb_V_0_payload_A = INPUT_STREAM_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_load_B.read())) {
        INPUT_STREAM_V_strb_V_0_payload_B = INPUT_STREAM_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_load_A.read())) {
        INPUT_STREAM_V_user_V_0_payload_A = INPUT_STREAM_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_load_B.read())) {
        INPUT_STREAM_V_user_V_0_payload_B = INPUT_STREAM_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_load_A.read())) {
        OUTPUT_STREAM_V_data_V_1_payload_A = first_reg_223.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_load_B.read())) {
        OUTPUT_STREAM_V_data_V_1_payload_B = first_reg_223.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_load_A.read())) {
        OUTPUT_STREAM_V_dest_V_1_payload_A = tmp_dest_V_reg_394.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_load_B.read())) {
        OUTPUT_STREAM_V_dest_V_1_payload_B = tmp_dest_V_reg_394.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_load_A.read())) {
        OUTPUT_STREAM_V_id_V_1_payload_A = tmp_id_V_reg_389.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_load_B.read())) {
        OUTPUT_STREAM_V_id_V_1_payload_B = tmp_id_V_reg_389.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_load_A.read())) {
        OUTPUT_STREAM_V_keep_V_1_payload_A = tmp_keep_V_reg_369.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_load_B.read())) {
        OUTPUT_STREAM_V_keep_V_1_payload_B = tmp_keep_V_reg_369.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_load_A.read())) {
        OUTPUT_STREAM_V_last_V_1_payload_A = tmp_last_V_reg_384.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_load_B.read())) {
        OUTPUT_STREAM_V_last_V_1_payload_B = tmp_last_V_reg_384.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_load_A.read())) {
        OUTPUT_STREAM_V_strb_V_1_payload_A = tmp_strb_V_reg_374.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_load_B.read())) {
        OUTPUT_STREAM_V_strb_V_1_payload_B = tmp_strb_V_reg_374.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_load_A.read())) {
        OUTPUT_STREAM_V_user_V_1_payload_A = tmp_user_V_reg_379.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_load_B.read())) {
        OUTPUT_STREAM_V_user_V_1_payload_B = tmp_user_V_reg_379.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)))) {
        in1Count_3_reg_363 = in1Count_3_fu_268_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        j_1_reg_407 = j_1_fu_315_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        n_read_reg_344 = n.read();
        searched_read_reg_349 = searched.read();
        tmp_reg_355 = tmp_fu_258_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        r_V_reg_412 = r_V_fu_325_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        rhs_V_reg_399 = rhs_V_fu_302_p1.read();
        tmp_dest_V_reg_394 = INPUT_STREAM_V_dest_V_0_data_out.read();
        tmp_id_V_reg_389 = INPUT_STREAM_V_id_V_0_data_out.read();
        tmp_keep_V_reg_369 = INPUT_STREAM_V_keep_V_0_data_out.read();
        tmp_last_V_reg_384 = INPUT_STREAM_V_last_V_0_data_out.read();
        tmp_strb_V_reg_374 = INPUT_STREAM_V_strb_V_0_data_out.read();
        tmp_user_V_reg_379 = INPUT_STREAM_V_user_V_0_data_out.read();
    }
}

void Encode::thread_INPUT_STREAM_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        INPUT_STREAM_TDATA_blk_n = INPUT_STREAM_V_data_V_0_state.read()[0];
    } else {
        INPUT_STREAM_TDATA_blk_n = ap_const_logic_1;
    }
}

void Encode::thread_INPUT_STREAM_TREADY() {
    INPUT_STREAM_TREADY = INPUT_STREAM_V_dest_V_0_state.read()[1];
}

void Encode::thread_INPUT_STREAM_V_data_V_0_ack_in() {
    INPUT_STREAM_V_data_V_0_ack_in = INPUT_STREAM_V_data_V_0_state.read()[1];
}

void Encode::thread_INPUT_STREAM_V_data_V_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        INPUT_STREAM_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void Encode::thread_INPUT_STREAM_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_data_V_0_sel.read())) {
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_A.read();
    }
}

void Encode::thread_INPUT_STREAM_V_data_V_0_load_A() {
    INPUT_STREAM_V_data_V_0_load_A = (INPUT_STREAM_V_data_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_data_V_0_sel_wr.read());
}

void Encode::thread_INPUT_STREAM_V_data_V_0_load_B() {
    INPUT_STREAM_V_data_V_0_load_B = (INPUT_STREAM_V_data_V_0_sel_wr.read() & INPUT_STREAM_V_data_V_0_state_cmp_full.read());
}

void Encode::thread_INPUT_STREAM_V_data_V_0_sel() {
    INPUT_STREAM_V_data_V_0_sel = INPUT_STREAM_V_data_V_0_sel_rd.read();
}

void Encode::thread_INPUT_STREAM_V_data_V_0_state_cmp_full() {
    INPUT_STREAM_V_data_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_INPUT_STREAM_V_data_V_0_vld_in() {
    INPUT_STREAM_V_data_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Encode::thread_INPUT_STREAM_V_data_V_0_vld_out() {
    INPUT_STREAM_V_data_V_0_vld_out = INPUT_STREAM_V_data_V_0_state.read()[0];
}

void Encode::thread_INPUT_STREAM_V_dest_V_0_ack_in() {
    INPUT_STREAM_V_dest_V_0_ack_in = INPUT_STREAM_V_dest_V_0_state.read()[1];
}

void Encode::thread_INPUT_STREAM_V_dest_V_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        INPUT_STREAM_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void Encode::thread_INPUT_STREAM_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_dest_V_0_sel.read())) {
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_A.read();
    }
}

void Encode::thread_INPUT_STREAM_V_dest_V_0_load_A() {
    INPUT_STREAM_V_dest_V_0_load_A = (INPUT_STREAM_V_dest_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_dest_V_0_sel_wr.read());
}

void Encode::thread_INPUT_STREAM_V_dest_V_0_load_B() {
    INPUT_STREAM_V_dest_V_0_load_B = (INPUT_STREAM_V_dest_V_0_sel_wr.read() & INPUT_STREAM_V_dest_V_0_state_cmp_full.read());
}

void Encode::thread_INPUT_STREAM_V_dest_V_0_sel() {
    INPUT_STREAM_V_dest_V_0_sel = INPUT_STREAM_V_dest_V_0_sel_rd.read();
}

void Encode::thread_INPUT_STREAM_V_dest_V_0_state_cmp_full() {
    INPUT_STREAM_V_dest_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_INPUT_STREAM_V_dest_V_0_vld_in() {
    INPUT_STREAM_V_dest_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Encode::thread_INPUT_STREAM_V_dest_V_0_vld_out() {
    INPUT_STREAM_V_dest_V_0_vld_out = INPUT_STREAM_V_dest_V_0_state.read()[0];
}

void Encode::thread_INPUT_STREAM_V_id_V_0_ack_in() {
    INPUT_STREAM_V_id_V_0_ack_in = INPUT_STREAM_V_id_V_0_state.read()[1];
}

void Encode::thread_INPUT_STREAM_V_id_V_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        INPUT_STREAM_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void Encode::thread_INPUT_STREAM_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_id_V_0_sel.read())) {
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_A.read();
    }
}

void Encode::thread_INPUT_STREAM_V_id_V_0_load_A() {
    INPUT_STREAM_V_id_V_0_load_A = (INPUT_STREAM_V_id_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_id_V_0_sel_wr.read());
}

void Encode::thread_INPUT_STREAM_V_id_V_0_load_B() {
    INPUT_STREAM_V_id_V_0_load_B = (INPUT_STREAM_V_id_V_0_sel_wr.read() & INPUT_STREAM_V_id_V_0_state_cmp_full.read());
}

void Encode::thread_INPUT_STREAM_V_id_V_0_sel() {
    INPUT_STREAM_V_id_V_0_sel = INPUT_STREAM_V_id_V_0_sel_rd.read();
}

void Encode::thread_INPUT_STREAM_V_id_V_0_state_cmp_full() {
    INPUT_STREAM_V_id_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_INPUT_STREAM_V_id_V_0_vld_in() {
    INPUT_STREAM_V_id_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Encode::thread_INPUT_STREAM_V_id_V_0_vld_out() {
    INPUT_STREAM_V_id_V_0_vld_out = INPUT_STREAM_V_id_V_0_state.read()[0];
}

void Encode::thread_INPUT_STREAM_V_keep_V_0_ack_in() {
    INPUT_STREAM_V_keep_V_0_ack_in = INPUT_STREAM_V_keep_V_0_state.read()[1];
}

void Encode::thread_INPUT_STREAM_V_keep_V_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        INPUT_STREAM_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void Encode::thread_INPUT_STREAM_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_keep_V_0_sel.read())) {
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_A.read();
    }
}

void Encode::thread_INPUT_STREAM_V_keep_V_0_load_A() {
    INPUT_STREAM_V_keep_V_0_load_A = (INPUT_STREAM_V_keep_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_keep_V_0_sel_wr.read());
}

void Encode::thread_INPUT_STREAM_V_keep_V_0_load_B() {
    INPUT_STREAM_V_keep_V_0_load_B = (INPUT_STREAM_V_keep_V_0_sel_wr.read() & INPUT_STREAM_V_keep_V_0_state_cmp_full.read());
}

void Encode::thread_INPUT_STREAM_V_keep_V_0_sel() {
    INPUT_STREAM_V_keep_V_0_sel = INPUT_STREAM_V_keep_V_0_sel_rd.read();
}

void Encode::thread_INPUT_STREAM_V_keep_V_0_state_cmp_full() {
    INPUT_STREAM_V_keep_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_INPUT_STREAM_V_keep_V_0_vld_in() {
    INPUT_STREAM_V_keep_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Encode::thread_INPUT_STREAM_V_keep_V_0_vld_out() {
    INPUT_STREAM_V_keep_V_0_vld_out = INPUT_STREAM_V_keep_V_0_state.read()[0];
}

void Encode::thread_INPUT_STREAM_V_last_V_0_ack_in() {
    INPUT_STREAM_V_last_V_0_ack_in = INPUT_STREAM_V_last_V_0_state.read()[1];
}

void Encode::thread_INPUT_STREAM_V_last_V_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        INPUT_STREAM_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void Encode::thread_INPUT_STREAM_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_last_V_0_sel.read())) {
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_A.read();
    }
}

void Encode::thread_INPUT_STREAM_V_last_V_0_load_A() {
    INPUT_STREAM_V_last_V_0_load_A = (INPUT_STREAM_V_last_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_last_V_0_sel_wr.read());
}

void Encode::thread_INPUT_STREAM_V_last_V_0_load_B() {
    INPUT_STREAM_V_last_V_0_load_B = (INPUT_STREAM_V_last_V_0_sel_wr.read() & INPUT_STREAM_V_last_V_0_state_cmp_full.read());
}

void Encode::thread_INPUT_STREAM_V_last_V_0_sel() {
    INPUT_STREAM_V_last_V_0_sel = INPUT_STREAM_V_last_V_0_sel_rd.read();
}

void Encode::thread_INPUT_STREAM_V_last_V_0_state_cmp_full() {
    INPUT_STREAM_V_last_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_INPUT_STREAM_V_last_V_0_vld_in() {
    INPUT_STREAM_V_last_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Encode::thread_INPUT_STREAM_V_last_V_0_vld_out() {
    INPUT_STREAM_V_last_V_0_vld_out = INPUT_STREAM_V_last_V_0_state.read()[0];
}

void Encode::thread_INPUT_STREAM_V_strb_V_0_ack_in() {
    INPUT_STREAM_V_strb_V_0_ack_in = INPUT_STREAM_V_strb_V_0_state.read()[1];
}

void Encode::thread_INPUT_STREAM_V_strb_V_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        INPUT_STREAM_V_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void Encode::thread_INPUT_STREAM_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_strb_V_0_sel.read())) {
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_A.read();
    }
}

void Encode::thread_INPUT_STREAM_V_strb_V_0_load_A() {
    INPUT_STREAM_V_strb_V_0_load_A = (INPUT_STREAM_V_strb_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_strb_V_0_sel_wr.read());
}

void Encode::thread_INPUT_STREAM_V_strb_V_0_load_B() {
    INPUT_STREAM_V_strb_V_0_load_B = (INPUT_STREAM_V_strb_V_0_sel_wr.read() & INPUT_STREAM_V_strb_V_0_state_cmp_full.read());
}

void Encode::thread_INPUT_STREAM_V_strb_V_0_sel() {
    INPUT_STREAM_V_strb_V_0_sel = INPUT_STREAM_V_strb_V_0_sel_rd.read();
}

void Encode::thread_INPUT_STREAM_V_strb_V_0_state_cmp_full() {
    INPUT_STREAM_V_strb_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_INPUT_STREAM_V_strb_V_0_vld_in() {
    INPUT_STREAM_V_strb_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Encode::thread_INPUT_STREAM_V_strb_V_0_vld_out() {
    INPUT_STREAM_V_strb_V_0_vld_out = INPUT_STREAM_V_strb_V_0_state.read()[0];
}

void Encode::thread_INPUT_STREAM_V_user_V_0_ack_in() {
    INPUT_STREAM_V_user_V_0_ack_in = INPUT_STREAM_V_user_V_0_state.read()[1];
}

void Encode::thread_INPUT_STREAM_V_user_V_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
        INPUT_STREAM_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_STREAM_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void Encode::thread_INPUT_STREAM_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_STREAM_V_user_V_0_sel.read())) {
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_B.read();
    } else {
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_A.read();
    }
}

void Encode::thread_INPUT_STREAM_V_user_V_0_load_A() {
    INPUT_STREAM_V_user_V_0_load_A = (INPUT_STREAM_V_user_V_0_state_cmp_full.read() & ~INPUT_STREAM_V_user_V_0_sel_wr.read());
}

void Encode::thread_INPUT_STREAM_V_user_V_0_load_B() {
    INPUT_STREAM_V_user_V_0_load_B = (INPUT_STREAM_V_user_V_0_sel_wr.read() & INPUT_STREAM_V_user_V_0_state_cmp_full.read());
}

void Encode::thread_INPUT_STREAM_V_user_V_0_sel() {
    INPUT_STREAM_V_user_V_0_sel = INPUT_STREAM_V_user_V_0_sel_rd.read();
}

void Encode::thread_INPUT_STREAM_V_user_V_0_state_cmp_full() {
    INPUT_STREAM_V_user_V_0_state_cmp_full =  (sc_logic) ((!INPUT_STREAM_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_STREAM_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_INPUT_STREAM_V_user_V_0_vld_in() {
    INPUT_STREAM_V_user_V_0_vld_in = INPUT_STREAM_TVALID.read();
}

void Encode::thread_INPUT_STREAM_V_user_V_0_vld_out() {
    INPUT_STREAM_V_user_V_0_vld_out = INPUT_STREAM_V_user_V_0_state.read()[0];
}

void Encode::thread_OUTPUT_STREAM_TDATA() {
    OUTPUT_STREAM_TDATA = OUTPUT_STREAM_V_data_V_1_data_out.read();
}

void Encode::thread_OUTPUT_STREAM_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read()))) {
        OUTPUT_STREAM_TDATA_blk_n = OUTPUT_STREAM_V_data_V_1_state.read()[1];
    } else {
        OUTPUT_STREAM_TDATA_blk_n = ap_const_logic_1;
    }
}

void Encode::thread_OUTPUT_STREAM_TDEST() {
    OUTPUT_STREAM_TDEST = OUTPUT_STREAM_V_dest_V_1_data_out.read();
}

void Encode::thread_OUTPUT_STREAM_TID() {
    OUTPUT_STREAM_TID = OUTPUT_STREAM_V_id_V_1_data_out.read();
}

void Encode::thread_OUTPUT_STREAM_TKEEP() {
    OUTPUT_STREAM_TKEEP = OUTPUT_STREAM_V_keep_V_1_data_out.read();
}

void Encode::thread_OUTPUT_STREAM_TLAST() {
    OUTPUT_STREAM_TLAST = OUTPUT_STREAM_V_last_V_1_data_out.read();
}

void Encode::thread_OUTPUT_STREAM_TSTRB() {
    OUTPUT_STREAM_TSTRB = OUTPUT_STREAM_V_strb_V_1_data_out.read();
}

void Encode::thread_OUTPUT_STREAM_TUSER() {
    OUTPUT_STREAM_TUSER = OUTPUT_STREAM_V_user_V_1_data_out.read();
}

void Encode::thread_OUTPUT_STREAM_TVALID() {
    OUTPUT_STREAM_TVALID = OUTPUT_STREAM_V_dest_V_1_state.read()[0];
}

void Encode::thread_OUTPUT_STREAM_V_data_V_1_ack_in() {
    OUTPUT_STREAM_V_data_V_1_ack_in = OUTPUT_STREAM_V_data_V_1_state.read()[1];
}

void Encode::thread_OUTPUT_STREAM_V_data_V_1_ack_out() {
    OUTPUT_STREAM_V_data_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void Encode::thread_OUTPUT_STREAM_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_sel.read())) {
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_A.read();
    }
}

void Encode::thread_OUTPUT_STREAM_V_data_V_1_load_A() {
    OUTPUT_STREAM_V_data_V_1_load_A = (OUTPUT_STREAM_V_data_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_data_V_1_sel_wr.read());
}

void Encode::thread_OUTPUT_STREAM_V_data_V_1_load_B() {
    OUTPUT_STREAM_V_data_V_1_load_B = (OUTPUT_STREAM_V_data_V_1_sel_wr.read() & OUTPUT_STREAM_V_data_V_1_state_cmp_full.read());
}

void Encode::thread_OUTPUT_STREAM_V_data_V_1_sel() {
    OUTPUT_STREAM_V_data_V_1_sel = OUTPUT_STREAM_V_data_V_1_sel_rd.read();
}

void Encode::thread_OUTPUT_STREAM_V_data_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_data_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_OUTPUT_STREAM_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        OUTPUT_STREAM_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void Encode::thread_OUTPUT_STREAM_V_data_V_1_vld_out() {
    OUTPUT_STREAM_V_data_V_1_vld_out = OUTPUT_STREAM_V_data_V_1_state.read()[0];
}

void Encode::thread_OUTPUT_STREAM_V_dest_V_1_ack_in() {
    OUTPUT_STREAM_V_dest_V_1_ack_in = OUTPUT_STREAM_V_dest_V_1_state.read()[1];
}

void Encode::thread_OUTPUT_STREAM_V_dest_V_1_ack_out() {
    OUTPUT_STREAM_V_dest_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void Encode::thread_OUTPUT_STREAM_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_dest_V_1_sel.read())) {
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_A.read();
    }
}

void Encode::thread_OUTPUT_STREAM_V_dest_V_1_load_A() {
    OUTPUT_STREAM_V_dest_V_1_load_A = (OUTPUT_STREAM_V_dest_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_dest_V_1_sel_wr.read());
}

void Encode::thread_OUTPUT_STREAM_V_dest_V_1_load_B() {
    OUTPUT_STREAM_V_dest_V_1_load_B = (OUTPUT_STREAM_V_dest_V_1_sel_wr.read() & OUTPUT_STREAM_V_dest_V_1_state_cmp_full.read());
}

void Encode::thread_OUTPUT_STREAM_V_dest_V_1_sel() {
    OUTPUT_STREAM_V_dest_V_1_sel = OUTPUT_STREAM_V_dest_V_1_sel_rd.read();
}

void Encode::thread_OUTPUT_STREAM_V_dest_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_dest_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_OUTPUT_STREAM_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        OUTPUT_STREAM_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void Encode::thread_OUTPUT_STREAM_V_dest_V_1_vld_out() {
    OUTPUT_STREAM_V_dest_V_1_vld_out = OUTPUT_STREAM_V_dest_V_1_state.read()[0];
}

void Encode::thread_OUTPUT_STREAM_V_id_V_1_ack_in() {
    OUTPUT_STREAM_V_id_V_1_ack_in = OUTPUT_STREAM_V_id_V_1_state.read()[1];
}

void Encode::thread_OUTPUT_STREAM_V_id_V_1_ack_out() {
    OUTPUT_STREAM_V_id_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void Encode::thread_OUTPUT_STREAM_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_id_V_1_sel.read())) {
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_A.read();
    }
}

void Encode::thread_OUTPUT_STREAM_V_id_V_1_load_A() {
    OUTPUT_STREAM_V_id_V_1_load_A = (OUTPUT_STREAM_V_id_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_id_V_1_sel_wr.read());
}

void Encode::thread_OUTPUT_STREAM_V_id_V_1_load_B() {
    OUTPUT_STREAM_V_id_V_1_load_B = (OUTPUT_STREAM_V_id_V_1_sel_wr.read() & OUTPUT_STREAM_V_id_V_1_state_cmp_full.read());
}

void Encode::thread_OUTPUT_STREAM_V_id_V_1_sel() {
    OUTPUT_STREAM_V_id_V_1_sel = OUTPUT_STREAM_V_id_V_1_sel_rd.read();
}

void Encode::thread_OUTPUT_STREAM_V_id_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_id_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_OUTPUT_STREAM_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        OUTPUT_STREAM_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void Encode::thread_OUTPUT_STREAM_V_id_V_1_vld_out() {
    OUTPUT_STREAM_V_id_V_1_vld_out = OUTPUT_STREAM_V_id_V_1_state.read()[0];
}

void Encode::thread_OUTPUT_STREAM_V_keep_V_1_ack_in() {
    OUTPUT_STREAM_V_keep_V_1_ack_in = OUTPUT_STREAM_V_keep_V_1_state.read()[1];
}

void Encode::thread_OUTPUT_STREAM_V_keep_V_1_ack_out() {
    OUTPUT_STREAM_V_keep_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void Encode::thread_OUTPUT_STREAM_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_keep_V_1_sel.read())) {
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_A.read();
    }
}

void Encode::thread_OUTPUT_STREAM_V_keep_V_1_load_A() {
    OUTPUT_STREAM_V_keep_V_1_load_A = (OUTPUT_STREAM_V_keep_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_keep_V_1_sel_wr.read());
}

void Encode::thread_OUTPUT_STREAM_V_keep_V_1_load_B() {
    OUTPUT_STREAM_V_keep_V_1_load_B = (OUTPUT_STREAM_V_keep_V_1_sel_wr.read() & OUTPUT_STREAM_V_keep_V_1_state_cmp_full.read());
}

void Encode::thread_OUTPUT_STREAM_V_keep_V_1_sel() {
    OUTPUT_STREAM_V_keep_V_1_sel = OUTPUT_STREAM_V_keep_V_1_sel_rd.read();
}

void Encode::thread_OUTPUT_STREAM_V_keep_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_keep_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_OUTPUT_STREAM_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        OUTPUT_STREAM_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void Encode::thread_OUTPUT_STREAM_V_keep_V_1_vld_out() {
    OUTPUT_STREAM_V_keep_V_1_vld_out = OUTPUT_STREAM_V_keep_V_1_state.read()[0];
}

void Encode::thread_OUTPUT_STREAM_V_last_V_1_ack_in() {
    OUTPUT_STREAM_V_last_V_1_ack_in = OUTPUT_STREAM_V_last_V_1_state.read()[1];
}

void Encode::thread_OUTPUT_STREAM_V_last_V_1_ack_out() {
    OUTPUT_STREAM_V_last_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void Encode::thread_OUTPUT_STREAM_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_last_V_1_sel.read())) {
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_A.read();
    }
}

void Encode::thread_OUTPUT_STREAM_V_last_V_1_load_A() {
    OUTPUT_STREAM_V_last_V_1_load_A = (OUTPUT_STREAM_V_last_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_last_V_1_sel_wr.read());
}

void Encode::thread_OUTPUT_STREAM_V_last_V_1_load_B() {
    OUTPUT_STREAM_V_last_V_1_load_B = (OUTPUT_STREAM_V_last_V_1_sel_wr.read() & OUTPUT_STREAM_V_last_V_1_state_cmp_full.read());
}

void Encode::thread_OUTPUT_STREAM_V_last_V_1_sel() {
    OUTPUT_STREAM_V_last_V_1_sel = OUTPUT_STREAM_V_last_V_1_sel_rd.read();
}

void Encode::thread_OUTPUT_STREAM_V_last_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_last_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_OUTPUT_STREAM_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        OUTPUT_STREAM_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void Encode::thread_OUTPUT_STREAM_V_last_V_1_vld_out() {
    OUTPUT_STREAM_V_last_V_1_vld_out = OUTPUT_STREAM_V_last_V_1_state.read()[0];
}

void Encode::thread_OUTPUT_STREAM_V_strb_V_1_ack_in() {
    OUTPUT_STREAM_V_strb_V_1_ack_in = OUTPUT_STREAM_V_strb_V_1_state.read()[1];
}

void Encode::thread_OUTPUT_STREAM_V_strb_V_1_ack_out() {
    OUTPUT_STREAM_V_strb_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void Encode::thread_OUTPUT_STREAM_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_strb_V_1_sel.read())) {
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_A.read();
    }
}

void Encode::thread_OUTPUT_STREAM_V_strb_V_1_load_A() {
    OUTPUT_STREAM_V_strb_V_1_load_A = (OUTPUT_STREAM_V_strb_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_strb_V_1_sel_wr.read());
}

void Encode::thread_OUTPUT_STREAM_V_strb_V_1_load_B() {
    OUTPUT_STREAM_V_strb_V_1_load_B = (OUTPUT_STREAM_V_strb_V_1_sel_wr.read() & OUTPUT_STREAM_V_strb_V_1_state_cmp_full.read());
}

void Encode::thread_OUTPUT_STREAM_V_strb_V_1_sel() {
    OUTPUT_STREAM_V_strb_V_1_sel = OUTPUT_STREAM_V_strb_V_1_sel_rd.read();
}

void Encode::thread_OUTPUT_STREAM_V_strb_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_strb_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_OUTPUT_STREAM_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        OUTPUT_STREAM_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void Encode::thread_OUTPUT_STREAM_V_strb_V_1_vld_out() {
    OUTPUT_STREAM_V_strb_V_1_vld_out = OUTPUT_STREAM_V_strb_V_1_state.read()[0];
}

void Encode::thread_OUTPUT_STREAM_V_user_V_1_ack_in() {
    OUTPUT_STREAM_V_user_V_1_ack_in = OUTPUT_STREAM_V_user_V_1_state.read()[1];
}

void Encode::thread_OUTPUT_STREAM_V_user_V_1_ack_out() {
    OUTPUT_STREAM_V_user_V_1_ack_out = OUTPUT_STREAM_TREADY.read();
}

void Encode::thread_OUTPUT_STREAM_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_user_V_1_sel.read())) {
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_B.read();
    } else {
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_A.read();
    }
}

void Encode::thread_OUTPUT_STREAM_V_user_V_1_load_A() {
    OUTPUT_STREAM_V_user_V_1_load_A = (OUTPUT_STREAM_V_user_V_1_state_cmp_full.read() & ~OUTPUT_STREAM_V_user_V_1_sel_wr.read());
}

void Encode::thread_OUTPUT_STREAM_V_user_V_1_load_B() {
    OUTPUT_STREAM_V_user_V_1_load_B = (OUTPUT_STREAM_V_user_V_1_sel_wr.read() & OUTPUT_STREAM_V_user_V_1_state_cmp_full.read());
}

void Encode::thread_OUTPUT_STREAM_V_user_V_1_sel() {
    OUTPUT_STREAM_V_user_V_1_sel = OUTPUT_STREAM_V_user_V_1_sel_rd.read();
}

void Encode::thread_OUTPUT_STREAM_V_user_V_1_state_cmp_full() {
    OUTPUT_STREAM_V_user_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_STREAM_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_STREAM_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void Encode::thread_OUTPUT_STREAM_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        OUTPUT_STREAM_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_STREAM_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void Encode::thread_OUTPUT_STREAM_V_user_V_1_vld_out() {
    OUTPUT_STREAM_V_user_V_1_vld_out = OUTPUT_STREAM_V_user_V_1_state.read()[0];
}

void Encode::thread_agg_result_a_ap_vld() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()))) {
        agg_result_a_ap_vld = ap_const_logic_1;
    } else {
        agg_result_a_ap_vld = ap_const_logic_0;
    }
}

void Encode::thread_agg_result_b_ap_vld() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()))) {
        agg_result_b_ap_vld = ap_const_logic_1;
    } else {
        agg_result_b_ap_vld = ap_const_logic_0;
    }
}

void Encode::thread_agg_result_c_ap_vld() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()))) {
        agg_result_c_ap_vld = ap_const_logic_1;
    } else {
        agg_result_c_ap_vld = ap_const_logic_0;
    }
}

void Encode::thread_agg_result_d_ap_vld() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()))) {
        agg_result_d_ap_vld = ap_const_logic_1;
    } else {
        agg_result_d_ap_vld = ap_const_logic_0;
    }
}

void Encode::thread_agg_result_e_ap_vld() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()))) {
        agg_result_e_ap_vld = ap_const_logic_1;
    } else {
        agg_result_e_ap_vld = ap_const_logic_0;
    }
}

void Encode::thread_agg_result_f_ap_vld() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()))) {
        agg_result_f_ap_vld = ap_const_logic_1;
    } else {
        agg_result_f_ap_vld = ap_const_logic_0;
    }
}

void Encode::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Encode::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Encode::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Encode::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Encode::thread_ap_CS_fsm_state71() {
    ap_CS_fsm_state71 = ap_CS_fsm.read()[70];
}

void Encode::thread_ap_CS_fsm_state72() {
    ap_CS_fsm_state72 = ap_CS_fsm.read()[71];
}

void Encode::thread_ap_CS_fsm_state73() {
    ap_CS_fsm_state73 = ap_CS_fsm.read()[72];
}

void Encode::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1));
}

void Encode::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()));
}

void Encode::thread_ap_block_state73() {
    ap_block_state73 = (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read()));
}

void Encode::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Encode::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Encode::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Encode::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Encode::thread_grp_fu_330_p1() {
    grp_fu_330_p1 =  (sc_lv<32>) (tmp_reg_355.read());
}

void Encode::thread_in1Count_1_cast_fu_338_p1() {
    in1Count_1_cast_fu_338_p1 = esl_zext<32,23>(in1Count_1_reg_248.read());
}

void Encode::thread_in1Count_3_fu_268_p2() {
    in1Count_3_fu_268_p2 = (!in1Count_reg_211.read().is_01() || !ap_const_lv23_1.is_01())? sc_lv<23>(): (sc_biguint<23>(in1Count_reg_211.read()) + sc_biguint<23>(ap_const_lv23_1));
}

void Encode::thread_j_1_fu_315_p2() {
    j_1_fu_315_p2 = (!j_reg_237.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_reg_237.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void Encode::thread_j_cast_fu_306_p1() {
    j_cast_fu_306_p1 = esl_zext<32,31>(j_reg_237.read());
}

void Encode::thread_r_V_2_fu_334_p1() {
    r_V_2_fu_334_p1 = grp_fu_330_p2.read().range(32-1, 0);
}

void Encode::thread_r_V_fu_325_p0() {
    r_V_fu_325_p0 =  (sc_lv<32>) (rhs_V_reg_399.read());
}

void Encode::thread_r_V_fu_325_p1() {
    r_V_fu_325_p1 =  (sc_lv<32>) (r_V_fu_325_p10.read());
}

void Encode::thread_r_V_fu_325_p10() {
    r_V_fu_325_p10 = esl_zext<64,32>(first_reg_223.read());
}

void Encode::thread_r_V_fu_325_p2() {
    r_V_fu_325_p2 = (!r_V_fu_325_p0.read().is_01() || !r_V_fu_325_p1.read().is_01())? sc_lv<64>(): sc_biguint<32>(r_V_fu_325_p0.read()) * sc_biguint<32>(r_V_fu_325_p1.read());
}

void Encode::thread_rhs_V_fu_302_p1() {
    rhs_V_fu_302_p1 = esl_zext<64,32>(INPUT_STREAM_V_data_V_0_data_out.read());
}

void Encode::thread_tmp_1_fu_262_p2() {
    tmp_1_fu_262_p2 = (!in1Count_reg_211.read().is_01() || !ap_const_lv23_7FBC00.is_01())? sc_lv<1>(): (sc_biguint<23>(in1Count_reg_211.read()) < sc_biguint<23>(ap_const_lv23_7FBC00));
}

void Encode::thread_tmp_4_fu_310_p2() {
    tmp_4_fu_310_p2 = (!j_cast_fu_306_p1.read().is_01() || !searched_read_reg_349.read().is_01())? sc_lv<1>(): (sc_bigint<32>(j_cast_fu_306_p1.read()) < sc_bigint<32>(searched_read_reg_349.read()));
}

void Encode::thread_tmp_fu_258_p0() {
    tmp_fu_258_p0 = n.read();
}

void Encode::thread_tmp_fu_258_p1() {
    tmp_fu_258_p1 = esl_sext<64,32>(tmp_fu_258_p0.read());
}

void Encode::thread_ap_NS_fsm() {
    if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state3;
        } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_STREAM_V_data_V_0_vld_out.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_1_fu_262_p2.read(), ap_const_lv1_0))) {
            ap_NS_fsm = ap_ST_fsm_state73;
        } else {
            ap_NS_fsm = ap_ST_fsm_state2;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
            ap_NS_fsm = ap_ST_fsm_state72;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_4_fu_310_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
            ap_NS_fsm = ap_ST_fsm_state4;
        } else {
            ap_NS_fsm = ap_ST_fsm_state3;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        ap_NS_fsm = ap_ST_fsm_state10;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        ap_NS_fsm = ap_ST_fsm_state12;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        ap_NS_fsm = ap_ST_fsm_state18;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        ap_NS_fsm = ap_ST_fsm_state19;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        ap_NS_fsm = ap_ST_fsm_state24;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        ap_NS_fsm = ap_ST_fsm_state44;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        ap_NS_fsm = ap_ST_fsm_state46;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        ap_NS_fsm = ap_ST_fsm_state47;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state48;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        ap_NS_fsm = ap_ST_fsm_state50;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        ap_NS_fsm = ap_ST_fsm_state52;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        ap_NS_fsm = ap_ST_fsm_state54;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        ap_NS_fsm = ap_ST_fsm_state56;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        ap_NS_fsm = ap_ST_fsm_state58;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        ap_NS_fsm = ap_ST_fsm_state60;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        ap_NS_fsm = ap_ST_fsm_state61;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        ap_NS_fsm = ap_ST_fsm_state62;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        ap_NS_fsm = ap_ST_fsm_state68;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        ap_NS_fsm = ap_ST_fsm_state69;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        ap_NS_fsm = ap_ST_fsm_state70;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state70))
    {
        ap_NS_fsm = ap_ST_fsm_state71;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state71))
    {
        ap_NS_fsm = ap_ST_fsm_state3;
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state72))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read()) && esl_seteq<1,1,1>(tmp_last_V_reg_384.read(), ap_const_lv1_0))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_STREAM_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read()) && esl_seteq<1,1,1>(tmp_last_V_reg_384.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state73;
        } else {
            ap_NS_fsm = ap_ST_fsm_state72;
        }
    }
    else if (esl_seteq<1,73,73>(ap_CS_fsm.read(), ap_ST_fsm_state73))
    {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_dest_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_STREAM_V_data_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()))) {
            ap_NS_fsm = ap_ST_fsm_state1;
        } else {
            ap_NS_fsm = ap_ST_fsm_state73;
        }
    }
    else
    {
        ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}
void Encode::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDATA\" :  \"" << INPUT_STREAM_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TVALID\" :  \"" << INPUT_STREAM_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"INPUT_STREAM_TREADY\" :  \"" << INPUT_STREAM_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TKEEP\" :  \"" << INPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TSTRB\" :  \"" << INPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TUSER\" :  \"" << INPUT_STREAM_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TLAST\" :  \"" << INPUT_STREAM_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TID\" :  \"" << INPUT_STREAM_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDEST\" :  \"" << INPUT_STREAM_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TDATA\" :  \"" << OUTPUT_STREAM_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TVALID\" :  \"" << OUTPUT_STREAM_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"OUTPUT_STREAM_TREADY\" :  \"" << OUTPUT_STREAM_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TKEEP\" :  \"" << OUTPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TSTRB\" :  \"" << OUTPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TUSER\" :  \"" << OUTPUT_STREAM_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TLAST\" :  \"" << OUTPUT_STREAM_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TID\" :  \"" << OUTPUT_STREAM_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TDEST\" :  \"" << OUTPUT_STREAM_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

