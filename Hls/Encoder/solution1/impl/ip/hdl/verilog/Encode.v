// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Encode,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=9745,HLS_SYN_LUT=8176,HLS_VERSION=2018_2}" *)

module Encode (
        ap_clk,
        ap_rst_n,
        INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST,
        INPUT_STREAM_TID,
        INPUT_STREAM_TDEST,
        OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_state2 = 73'd2;
parameter    ap_ST_fsm_state3 = 73'd4;
parameter    ap_ST_fsm_state4 = 73'd8;
parameter    ap_ST_fsm_state5 = 73'd16;
parameter    ap_ST_fsm_state6 = 73'd32;
parameter    ap_ST_fsm_state7 = 73'd64;
parameter    ap_ST_fsm_state8 = 73'd128;
parameter    ap_ST_fsm_state9 = 73'd256;
parameter    ap_ST_fsm_state10 = 73'd512;
parameter    ap_ST_fsm_state11 = 73'd1024;
parameter    ap_ST_fsm_state12 = 73'd2048;
parameter    ap_ST_fsm_state13 = 73'd4096;
parameter    ap_ST_fsm_state14 = 73'd8192;
parameter    ap_ST_fsm_state15 = 73'd16384;
parameter    ap_ST_fsm_state16 = 73'd32768;
parameter    ap_ST_fsm_state17 = 73'd65536;
parameter    ap_ST_fsm_state18 = 73'd131072;
parameter    ap_ST_fsm_state19 = 73'd262144;
parameter    ap_ST_fsm_state20 = 73'd524288;
parameter    ap_ST_fsm_state21 = 73'd1048576;
parameter    ap_ST_fsm_state22 = 73'd2097152;
parameter    ap_ST_fsm_state23 = 73'd4194304;
parameter    ap_ST_fsm_state24 = 73'd8388608;
parameter    ap_ST_fsm_state25 = 73'd16777216;
parameter    ap_ST_fsm_state26 = 73'd33554432;
parameter    ap_ST_fsm_state27 = 73'd67108864;
parameter    ap_ST_fsm_state28 = 73'd134217728;
parameter    ap_ST_fsm_state29 = 73'd268435456;
parameter    ap_ST_fsm_state30 = 73'd536870912;
parameter    ap_ST_fsm_state31 = 73'd1073741824;
parameter    ap_ST_fsm_state32 = 73'd2147483648;
parameter    ap_ST_fsm_state33 = 73'd4294967296;
parameter    ap_ST_fsm_state34 = 73'd8589934592;
parameter    ap_ST_fsm_state35 = 73'd17179869184;
parameter    ap_ST_fsm_state36 = 73'd34359738368;
parameter    ap_ST_fsm_state37 = 73'd68719476736;
parameter    ap_ST_fsm_state38 = 73'd137438953472;
parameter    ap_ST_fsm_state39 = 73'd274877906944;
parameter    ap_ST_fsm_state40 = 73'd549755813888;
parameter    ap_ST_fsm_state41 = 73'd1099511627776;
parameter    ap_ST_fsm_state42 = 73'd2199023255552;
parameter    ap_ST_fsm_state43 = 73'd4398046511104;
parameter    ap_ST_fsm_state44 = 73'd8796093022208;
parameter    ap_ST_fsm_state45 = 73'd17592186044416;
parameter    ap_ST_fsm_state46 = 73'd35184372088832;
parameter    ap_ST_fsm_state47 = 73'd70368744177664;
parameter    ap_ST_fsm_state48 = 73'd140737488355328;
parameter    ap_ST_fsm_state49 = 73'd281474976710656;
parameter    ap_ST_fsm_state50 = 73'd562949953421312;
parameter    ap_ST_fsm_state51 = 73'd1125899906842624;
parameter    ap_ST_fsm_state52 = 73'd2251799813685248;
parameter    ap_ST_fsm_state53 = 73'd4503599627370496;
parameter    ap_ST_fsm_state54 = 73'd9007199254740992;
parameter    ap_ST_fsm_state55 = 73'd18014398509481984;
parameter    ap_ST_fsm_state56 = 73'd36028797018963968;
parameter    ap_ST_fsm_state57 = 73'd72057594037927936;
parameter    ap_ST_fsm_state58 = 73'd144115188075855872;
parameter    ap_ST_fsm_state59 = 73'd288230376151711744;
parameter    ap_ST_fsm_state60 = 73'd576460752303423488;
parameter    ap_ST_fsm_state61 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 73'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 73'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 73'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 73'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 73'd4722366482869645213696;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] INPUT_STREAM_TDATA;
input   INPUT_STREAM_TVALID;
output   INPUT_STREAM_TREADY;
input  [3:0] INPUT_STREAM_TKEEP;
input  [3:0] INPUT_STREAM_TSTRB;
input  [1:0] INPUT_STREAM_TUSER;
input  [0:0] INPUT_STREAM_TLAST;
input  [4:0] INPUT_STREAM_TID;
input  [5:0] INPUT_STREAM_TDEST;
output  [31:0] OUTPUT_STREAM_TDATA;
output   OUTPUT_STREAM_TVALID;
input   OUTPUT_STREAM_TREADY;
output  [3:0] OUTPUT_STREAM_TKEEP;
output  [3:0] OUTPUT_STREAM_TSTRB;
output  [1:0] OUTPUT_STREAM_TUSER;
output  [0:0] OUTPUT_STREAM_TLAST;
output  [4:0] OUTPUT_STREAM_TID;
output  [5:0] OUTPUT_STREAM_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    agg_result_a_ap_vld;
reg    agg_result_b_ap_vld;
reg    agg_result_c_ap_vld;
reg    agg_result_d_ap_vld;
reg    agg_result_e_ap_vld;
reg    agg_result_f_ap_vld;
reg   [31:0] INPUT_STREAM_V_data_V_0_data_out;
wire    INPUT_STREAM_V_data_V_0_vld_in;
wire    INPUT_STREAM_V_data_V_0_vld_out;
wire    INPUT_STREAM_V_data_V_0_ack_in;
reg    INPUT_STREAM_V_data_V_0_ack_out;
reg   [31:0] INPUT_STREAM_V_data_V_0_payload_A;
reg   [31:0] INPUT_STREAM_V_data_V_0_payload_B;
reg    INPUT_STREAM_V_data_V_0_sel_rd;
reg    INPUT_STREAM_V_data_V_0_sel_wr;
wire    INPUT_STREAM_V_data_V_0_sel;
wire    INPUT_STREAM_V_data_V_0_load_A;
wire    INPUT_STREAM_V_data_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_data_V_0_state;
wire    INPUT_STREAM_V_data_V_0_state_cmp_full;
reg   [3:0] INPUT_STREAM_V_keep_V_0_data_out;
wire    INPUT_STREAM_V_keep_V_0_vld_in;
wire    INPUT_STREAM_V_keep_V_0_vld_out;
wire    INPUT_STREAM_V_keep_V_0_ack_in;
reg    INPUT_STREAM_V_keep_V_0_ack_out;
reg   [3:0] INPUT_STREAM_V_keep_V_0_payload_A;
reg   [3:0] INPUT_STREAM_V_keep_V_0_payload_B;
reg    INPUT_STREAM_V_keep_V_0_sel_rd;
reg    INPUT_STREAM_V_keep_V_0_sel_wr;
wire    INPUT_STREAM_V_keep_V_0_sel;
wire    INPUT_STREAM_V_keep_V_0_load_A;
wire    INPUT_STREAM_V_keep_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_keep_V_0_state;
wire    INPUT_STREAM_V_keep_V_0_state_cmp_full;
reg   [3:0] INPUT_STREAM_V_strb_V_0_data_out;
wire    INPUT_STREAM_V_strb_V_0_vld_in;
wire    INPUT_STREAM_V_strb_V_0_vld_out;
wire    INPUT_STREAM_V_strb_V_0_ack_in;
reg    INPUT_STREAM_V_strb_V_0_ack_out;
reg   [3:0] INPUT_STREAM_V_strb_V_0_payload_A;
reg   [3:0] INPUT_STREAM_V_strb_V_0_payload_B;
reg    INPUT_STREAM_V_strb_V_0_sel_rd;
reg    INPUT_STREAM_V_strb_V_0_sel_wr;
wire    INPUT_STREAM_V_strb_V_0_sel;
wire    INPUT_STREAM_V_strb_V_0_load_A;
wire    INPUT_STREAM_V_strb_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_strb_V_0_state;
wire    INPUT_STREAM_V_strb_V_0_state_cmp_full;
reg   [1:0] INPUT_STREAM_V_user_V_0_data_out;
wire    INPUT_STREAM_V_user_V_0_vld_in;
wire    INPUT_STREAM_V_user_V_0_vld_out;
wire    INPUT_STREAM_V_user_V_0_ack_in;
reg    INPUT_STREAM_V_user_V_0_ack_out;
reg   [1:0] INPUT_STREAM_V_user_V_0_payload_A;
reg   [1:0] INPUT_STREAM_V_user_V_0_payload_B;
reg    INPUT_STREAM_V_user_V_0_sel_rd;
reg    INPUT_STREAM_V_user_V_0_sel_wr;
wire    INPUT_STREAM_V_user_V_0_sel;
wire    INPUT_STREAM_V_user_V_0_load_A;
wire    INPUT_STREAM_V_user_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_user_V_0_state;
wire    INPUT_STREAM_V_user_V_0_state_cmp_full;
reg   [0:0] INPUT_STREAM_V_last_V_0_data_out;
wire    INPUT_STREAM_V_last_V_0_vld_in;
wire    INPUT_STREAM_V_last_V_0_vld_out;
wire    INPUT_STREAM_V_last_V_0_ack_in;
reg    INPUT_STREAM_V_last_V_0_ack_out;
reg   [0:0] INPUT_STREAM_V_last_V_0_payload_A;
reg   [0:0] INPUT_STREAM_V_last_V_0_payload_B;
reg    INPUT_STREAM_V_last_V_0_sel_rd;
reg    INPUT_STREAM_V_last_V_0_sel_wr;
wire    INPUT_STREAM_V_last_V_0_sel;
wire    INPUT_STREAM_V_last_V_0_load_A;
wire    INPUT_STREAM_V_last_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_last_V_0_state;
wire    INPUT_STREAM_V_last_V_0_state_cmp_full;
reg   [4:0] INPUT_STREAM_V_id_V_0_data_out;
wire    INPUT_STREAM_V_id_V_0_vld_in;
wire    INPUT_STREAM_V_id_V_0_vld_out;
wire    INPUT_STREAM_V_id_V_0_ack_in;
reg    INPUT_STREAM_V_id_V_0_ack_out;
reg   [4:0] INPUT_STREAM_V_id_V_0_payload_A;
reg   [4:0] INPUT_STREAM_V_id_V_0_payload_B;
reg    INPUT_STREAM_V_id_V_0_sel_rd;
reg    INPUT_STREAM_V_id_V_0_sel_wr;
wire    INPUT_STREAM_V_id_V_0_sel;
wire    INPUT_STREAM_V_id_V_0_load_A;
wire    INPUT_STREAM_V_id_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_id_V_0_state;
wire    INPUT_STREAM_V_id_V_0_state_cmp_full;
reg   [5:0] INPUT_STREAM_V_dest_V_0_data_out;
wire    INPUT_STREAM_V_dest_V_0_vld_in;
wire    INPUT_STREAM_V_dest_V_0_vld_out;
wire    INPUT_STREAM_V_dest_V_0_ack_in;
reg    INPUT_STREAM_V_dest_V_0_ack_out;
reg   [5:0] INPUT_STREAM_V_dest_V_0_payload_A;
reg   [5:0] INPUT_STREAM_V_dest_V_0_payload_B;
reg    INPUT_STREAM_V_dest_V_0_sel_rd;
reg    INPUT_STREAM_V_dest_V_0_sel_wr;
wire    INPUT_STREAM_V_dest_V_0_sel;
wire    INPUT_STREAM_V_dest_V_0_load_A;
wire    INPUT_STREAM_V_dest_V_0_load_B;
reg   [1:0] INPUT_STREAM_V_dest_V_0_state;
wire    INPUT_STREAM_V_dest_V_0_state_cmp_full;
wire   [31:0] searched;
wire   [31:0] n;
reg   [31:0] OUTPUT_STREAM_V_data_V_1_data_out;
reg    OUTPUT_STREAM_V_data_V_1_vld_in;
wire    OUTPUT_STREAM_V_data_V_1_vld_out;
wire    OUTPUT_STREAM_V_data_V_1_ack_in;
wire    OUTPUT_STREAM_V_data_V_1_ack_out;
reg   [31:0] OUTPUT_STREAM_V_data_V_1_payload_A;
reg   [31:0] OUTPUT_STREAM_V_data_V_1_payload_B;
reg    OUTPUT_STREAM_V_data_V_1_sel_rd;
reg    OUTPUT_STREAM_V_data_V_1_sel_wr;
wire    OUTPUT_STREAM_V_data_V_1_sel;
wire    OUTPUT_STREAM_V_data_V_1_load_A;
wire    OUTPUT_STREAM_V_data_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_data_V_1_state;
wire    OUTPUT_STREAM_V_data_V_1_state_cmp_full;
reg   [3:0] OUTPUT_STREAM_V_keep_V_1_data_out;
reg    OUTPUT_STREAM_V_keep_V_1_vld_in;
wire    OUTPUT_STREAM_V_keep_V_1_vld_out;
wire    OUTPUT_STREAM_V_keep_V_1_ack_in;
wire    OUTPUT_STREAM_V_keep_V_1_ack_out;
reg   [3:0] OUTPUT_STREAM_V_keep_V_1_payload_A;
reg   [3:0] OUTPUT_STREAM_V_keep_V_1_payload_B;
reg    OUTPUT_STREAM_V_keep_V_1_sel_rd;
reg    OUTPUT_STREAM_V_keep_V_1_sel_wr;
wire    OUTPUT_STREAM_V_keep_V_1_sel;
wire    OUTPUT_STREAM_V_keep_V_1_load_A;
wire    OUTPUT_STREAM_V_keep_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_keep_V_1_state;
wire    OUTPUT_STREAM_V_keep_V_1_state_cmp_full;
reg   [3:0] OUTPUT_STREAM_V_strb_V_1_data_out;
reg    OUTPUT_STREAM_V_strb_V_1_vld_in;
wire    OUTPUT_STREAM_V_strb_V_1_vld_out;
wire    OUTPUT_STREAM_V_strb_V_1_ack_in;
wire    OUTPUT_STREAM_V_strb_V_1_ack_out;
reg   [3:0] OUTPUT_STREAM_V_strb_V_1_payload_A;
reg   [3:0] OUTPUT_STREAM_V_strb_V_1_payload_B;
reg    OUTPUT_STREAM_V_strb_V_1_sel_rd;
reg    OUTPUT_STREAM_V_strb_V_1_sel_wr;
wire    OUTPUT_STREAM_V_strb_V_1_sel;
wire    OUTPUT_STREAM_V_strb_V_1_load_A;
wire    OUTPUT_STREAM_V_strb_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_strb_V_1_state;
wire    OUTPUT_STREAM_V_strb_V_1_state_cmp_full;
reg   [1:0] OUTPUT_STREAM_V_user_V_1_data_out;
reg    OUTPUT_STREAM_V_user_V_1_vld_in;
wire    OUTPUT_STREAM_V_user_V_1_vld_out;
wire    OUTPUT_STREAM_V_user_V_1_ack_in;
wire    OUTPUT_STREAM_V_user_V_1_ack_out;
reg   [1:0] OUTPUT_STREAM_V_user_V_1_payload_A;
reg   [1:0] OUTPUT_STREAM_V_user_V_1_payload_B;
reg    OUTPUT_STREAM_V_user_V_1_sel_rd;
reg    OUTPUT_STREAM_V_user_V_1_sel_wr;
wire    OUTPUT_STREAM_V_user_V_1_sel;
wire    OUTPUT_STREAM_V_user_V_1_load_A;
wire    OUTPUT_STREAM_V_user_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_user_V_1_state;
wire    OUTPUT_STREAM_V_user_V_1_state_cmp_full;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_data_out;
reg    OUTPUT_STREAM_V_last_V_1_vld_in;
wire    OUTPUT_STREAM_V_last_V_1_vld_out;
wire    OUTPUT_STREAM_V_last_V_1_ack_in;
wire    OUTPUT_STREAM_V_last_V_1_ack_out;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_payload_A;
reg   [0:0] OUTPUT_STREAM_V_last_V_1_payload_B;
reg    OUTPUT_STREAM_V_last_V_1_sel_rd;
reg    OUTPUT_STREAM_V_last_V_1_sel_wr;
wire    OUTPUT_STREAM_V_last_V_1_sel;
wire    OUTPUT_STREAM_V_last_V_1_load_A;
wire    OUTPUT_STREAM_V_last_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_last_V_1_state;
wire    OUTPUT_STREAM_V_last_V_1_state_cmp_full;
reg   [4:0] OUTPUT_STREAM_V_id_V_1_data_out;
reg    OUTPUT_STREAM_V_id_V_1_vld_in;
wire    OUTPUT_STREAM_V_id_V_1_vld_out;
wire    OUTPUT_STREAM_V_id_V_1_ack_in;
wire    OUTPUT_STREAM_V_id_V_1_ack_out;
reg   [4:0] OUTPUT_STREAM_V_id_V_1_payload_A;
reg   [4:0] OUTPUT_STREAM_V_id_V_1_payload_B;
reg    OUTPUT_STREAM_V_id_V_1_sel_rd;
reg    OUTPUT_STREAM_V_id_V_1_sel_wr;
wire    OUTPUT_STREAM_V_id_V_1_sel;
wire    OUTPUT_STREAM_V_id_V_1_load_A;
wire    OUTPUT_STREAM_V_id_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_id_V_1_state;
wire    OUTPUT_STREAM_V_id_V_1_state_cmp_full;
reg   [5:0] OUTPUT_STREAM_V_dest_V_1_data_out;
reg    OUTPUT_STREAM_V_dest_V_1_vld_in;
wire    OUTPUT_STREAM_V_dest_V_1_vld_out;
wire    OUTPUT_STREAM_V_dest_V_1_ack_in;
wire    OUTPUT_STREAM_V_dest_V_1_ack_out;
reg   [5:0] OUTPUT_STREAM_V_dest_V_1_payload_A;
reg   [5:0] OUTPUT_STREAM_V_dest_V_1_payload_B;
reg    OUTPUT_STREAM_V_dest_V_1_sel_rd;
reg    OUTPUT_STREAM_V_dest_V_1_sel_wr;
wire    OUTPUT_STREAM_V_dest_V_1_sel;
wire    OUTPUT_STREAM_V_dest_V_1_load_A;
wire    OUTPUT_STREAM_V_dest_V_1_load_B;
reg   [1:0] OUTPUT_STREAM_V_dest_V_1_state;
wire    OUTPUT_STREAM_V_dest_V_1_state_cmp_full;
reg    INPUT_STREAM_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_262_p2;
reg    OUTPUT_STREAM_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_4_fu_310_p2;
wire    ap_CS_fsm_state72;
reg   [31:0] n_read_reg_344;
reg   [31:0] searched_read_reg_349;
wire  signed [63:0] tmp_fu_258_p1;
reg  signed [63:0] tmp_reg_355;
wire   [22:0] in1Count_3_fu_268_p2;
reg   [22:0] in1Count_3_reg_363;
reg    ap_block_state2;
reg   [3:0] tmp_keep_V_reg_369;
reg   [3:0] tmp_strb_V_reg_374;
reg   [1:0] tmp_user_V_reg_379;
reg   [0:0] tmp_last_V_reg_384;
reg   [4:0] tmp_id_V_reg_389;
reg   [5:0] tmp_dest_V_reg_394;
wire   [63:0] rhs_V_fu_302_p1;
reg   [63:0] rhs_V_reg_399;
wire   [30:0] j_1_fu_315_p2;
reg   [30:0] j_1_reg_407;
reg    ap_block_state3_io;
wire   [63:0] r_V_fu_325_p2;
reg   [63:0] r_V_reg_412;
wire   [31:0] r_V_2_fu_334_p1;
wire    ap_CS_fsm_state71;
reg   [22:0] in1Count_reg_211;
reg   [31:0] first_reg_223;
reg   [30:0] j_reg_237;
reg   [22:0] in1Count_1_reg_248;
wire    ap_CS_fsm_state73;
reg    ap_block_state73;
wire   [31:0] in1Count_1_cast_fu_338_p1;
wire  signed [31:0] tmp_fu_258_p0;
wire   [31:0] j_cast_fu_306_p1;
wire   [31:0] r_V_fu_325_p0;
wire   [31:0] r_V_fu_325_p1;
wire  signed [31:0] grp_fu_330_p1;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_330_p2;
reg   [72:0] ap_NS_fsm;
wire   [63:0] r_V_fu_325_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 73'd1;
#0 INPUT_STREAM_V_data_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_data_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_data_V_0_state = 2'd0;
#0 INPUT_STREAM_V_keep_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_keep_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_keep_V_0_state = 2'd0;
#0 INPUT_STREAM_V_strb_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_strb_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_strb_V_0_state = 2'd0;
#0 INPUT_STREAM_V_user_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_user_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_user_V_0_state = 2'd0;
#0 INPUT_STREAM_V_last_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_last_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_last_V_0_state = 2'd0;
#0 INPUT_STREAM_V_id_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_id_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_id_V_0_state = 2'd0;
#0 INPUT_STREAM_V_dest_V_0_sel_rd = 1'b0;
#0 INPUT_STREAM_V_dest_V_0_sel_wr = 1'b0;
#0 INPUT_STREAM_V_dest_V_0_state = 2'd0;
#0 OUTPUT_STREAM_V_data_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_data_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_data_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_keep_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_keep_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_keep_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_strb_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_strb_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_strb_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_user_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_user_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_user_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_last_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_last_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_last_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_id_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_id_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_id_V_1_state = 2'd0;
#0 OUTPUT_STREAM_V_dest_V_1_sel_rd = 1'b0;
#0 OUTPUT_STREAM_V_dest_V_1_sel_wr = 1'b0;
#0 OUTPUT_STREAM_V_dest_V_1_state = 2'd0;
end

Encode_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
Encode_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .agg_result_a(32'd0),
    .agg_result_a_ap_vld(agg_result_a_ap_vld),
    .agg_result_b(in1Count_1_cast_fu_338_p1),
    .agg_result_b_ap_vld(agg_result_b_ap_vld),
    .agg_result_c(in1Count_1_cast_fu_338_p1),
    .agg_result_c_ap_vld(agg_result_c_ap_vld),
    .agg_result_d(searched_read_reg_349),
    .agg_result_d_ap_vld(agg_result_d_ap_vld),
    .agg_result_e(n_read_reg_344),
    .agg_result_e_ap_vld(agg_result_e_ap_vld),
    .agg_result_f(32'd1936),
    .agg_result_f_ap_vld(agg_result_f_ap_vld),
    .searched(searched),
    .n(n)
);

Encode_urem_64ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Encode_urem_64ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(r_V_reg_412),
    .din1(grp_fu_330_p1),
    .ce(1'b1),
    .dout(grp_fu_330_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_out))) begin
            INPUT_STREAM_V_data_V_0_sel_rd <= ~INPUT_STREAM_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_data_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in))) begin
            INPUT_STREAM_V_data_V_0_sel_wr <= ~INPUT_STREAM_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_data_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_data_V_0_state)) | ((1'b0 == INPUT_STREAM_V_data_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_data_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_data_V_0_state)))) begin
            INPUT_STREAM_V_data_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_data_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_data_V_0_state)) | ((1'b0 == INPUT_STREAM_V_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_data_V_0_state)))) begin
            INPUT_STREAM_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_data_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_data_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_data_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_data_V_0_state)) | ((1'b1 == INPUT_STREAM_V_data_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_data_V_0_state)) | ((1'b1 == INPUT_STREAM_V_data_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_data_V_0_state)))) begin
            INPUT_STREAM_V_data_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_dest_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_out))) begin
            INPUT_STREAM_V_dest_V_0_sel_rd <= ~INPUT_STREAM_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_dest_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in))) begin
            INPUT_STREAM_V_dest_V_0_sel_wr <= ~INPUT_STREAM_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_dest_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_dest_V_0_state)) | ((1'b0 == INPUT_STREAM_V_dest_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_dest_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_dest_V_0_state)))) begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_dest_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_dest_V_0_state)) | ((1'b0 == INPUT_STREAM_V_dest_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_dest_V_0_state)))) begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_dest_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_dest_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_dest_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_dest_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_dest_V_0_state)) | ((1'b1 == INPUT_STREAM_V_dest_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_dest_V_0_state)) | ((1'b1 == INPUT_STREAM_V_dest_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_dest_V_0_state)))) begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_id_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_out))) begin
            INPUT_STREAM_V_id_V_0_sel_rd <= ~INPUT_STREAM_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_id_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in))) begin
            INPUT_STREAM_V_id_V_0_sel_wr <= ~INPUT_STREAM_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_id_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_id_V_0_state)) | ((1'b0 == INPUT_STREAM_V_id_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_id_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_id_V_0_state)))) begin
            INPUT_STREAM_V_id_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_id_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_id_V_0_state)) | ((1'b0 == INPUT_STREAM_V_id_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_id_V_0_state)))) begin
            INPUT_STREAM_V_id_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_id_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_id_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_id_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_id_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_id_V_0_state)) | ((1'b1 == INPUT_STREAM_V_id_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_id_V_0_state)) | ((1'b1 == INPUT_STREAM_V_id_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_id_V_0_state)))) begin
            INPUT_STREAM_V_id_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_keep_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_out))) begin
            INPUT_STREAM_V_keep_V_0_sel_rd <= ~INPUT_STREAM_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_keep_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in))) begin
            INPUT_STREAM_V_keep_V_0_sel_wr <= ~INPUT_STREAM_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_keep_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_keep_V_0_state)) | ((1'b0 == INPUT_STREAM_V_keep_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_keep_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_keep_V_0_state)))) begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_keep_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_keep_V_0_state)) | ((1'b0 == INPUT_STREAM_V_keep_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_keep_V_0_state)))) begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_keep_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_keep_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_keep_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_keep_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_keep_V_0_state)) | ((1'b1 == INPUT_STREAM_V_keep_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_keep_V_0_state)) | ((1'b1 == INPUT_STREAM_V_keep_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_keep_V_0_state)))) begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_last_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_out))) begin
            INPUT_STREAM_V_last_V_0_sel_rd <= ~INPUT_STREAM_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_last_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in))) begin
            INPUT_STREAM_V_last_V_0_sel_wr <= ~INPUT_STREAM_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_last_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_last_V_0_state)) | ((1'b0 == INPUT_STREAM_V_last_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_last_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_last_V_0_state)))) begin
            INPUT_STREAM_V_last_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_last_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_last_V_0_state)) | ((1'b0 == INPUT_STREAM_V_last_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_last_V_0_state)))) begin
            INPUT_STREAM_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_last_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_last_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_last_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_last_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_last_V_0_state)) | ((1'b1 == INPUT_STREAM_V_last_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_last_V_0_state)) | ((1'b1 == INPUT_STREAM_V_last_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_last_V_0_state)))) begin
            INPUT_STREAM_V_last_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_strb_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_out))) begin
            INPUT_STREAM_V_strb_V_0_sel_rd <= ~INPUT_STREAM_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_strb_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in))) begin
            INPUT_STREAM_V_strb_V_0_sel_wr <= ~INPUT_STREAM_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_strb_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_strb_V_0_state)) | ((1'b0 == INPUT_STREAM_V_strb_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_strb_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_strb_V_0_state)))) begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_strb_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_strb_V_0_state)) | ((1'b0 == INPUT_STREAM_V_strb_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_strb_V_0_state)))) begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_strb_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_strb_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_strb_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_strb_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_strb_V_0_state)) | ((1'b1 == INPUT_STREAM_V_strb_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_strb_V_0_state)) | ((1'b1 == INPUT_STREAM_V_strb_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_strb_V_0_state)))) begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_user_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_out))) begin
            INPUT_STREAM_V_user_V_0_sel_rd <= ~INPUT_STREAM_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_STREAM_V_user_V_0_ack_in) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in))) begin
            INPUT_STREAM_V_user_V_0_sel_wr <= ~INPUT_STREAM_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_STREAM_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_STREAM_V_user_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_user_V_0_state)) | ((1'b0 == INPUT_STREAM_V_user_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_user_V_0_ack_out) & (2'd3 == INPUT_STREAM_V_user_V_0_state)))) begin
            INPUT_STREAM_V_user_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_STREAM_V_user_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_user_V_0_state)) | ((1'b0 == INPUT_STREAM_V_user_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in) & (2'd3 == INPUT_STREAM_V_user_V_0_state)))) begin
            INPUT_STREAM_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_STREAM_V_user_V_0_vld_in) & (1'b1 == INPUT_STREAM_V_user_V_0_ack_out)) & ~((1'b0 == INPUT_STREAM_V_user_V_0_ack_out) & (1'b1 == INPUT_STREAM_V_user_V_0_vld_in)) & (2'd3 == INPUT_STREAM_V_user_V_0_state)) | ((1'b1 == INPUT_STREAM_V_user_V_0_ack_out) & (2'd1 == INPUT_STREAM_V_user_V_0_state)) | ((1'b1 == INPUT_STREAM_V_user_V_0_vld_in) & (2'd2 == INPUT_STREAM_V_user_V_0_state)))) begin
            INPUT_STREAM_V_user_V_0_state <= 2'd3;
        end else begin
            INPUT_STREAM_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_out))) begin
            OUTPUT_STREAM_V_data_V_1_sel_rd <= ~OUTPUT_STREAM_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in))) begin
            OUTPUT_STREAM_V_data_V_1_sel_wr <= ~OUTPUT_STREAM_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_data_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_data_V_1_state)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_data_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_data_V_1_state)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_data_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_data_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_data_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_data_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_data_V_1_state)))) begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_out))) begin
            OUTPUT_STREAM_V_dest_V_1_sel_rd <= ~OUTPUT_STREAM_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in))) begin
            OUTPUT_STREAM_V_dest_V_1_sel_wr <= ~OUTPUT_STREAM_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_dest_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_dest_V_1_state)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_dest_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_dest_V_1_state)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_dest_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_dest_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_dest_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_dest_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_dest_V_1_state)))) begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_out))) begin
            OUTPUT_STREAM_V_id_V_1_sel_rd <= ~OUTPUT_STREAM_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in))) begin
            OUTPUT_STREAM_V_id_V_1_sel_wr <= ~OUTPUT_STREAM_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_id_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_id_V_1_state)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_id_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_id_V_1_state)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_id_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_id_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_id_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_id_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_id_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_id_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_id_V_1_state)))) begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_out))) begin
            OUTPUT_STREAM_V_keep_V_1_sel_rd <= ~OUTPUT_STREAM_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in))) begin
            OUTPUT_STREAM_V_keep_V_1_sel_wr <= ~OUTPUT_STREAM_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_keep_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_keep_V_1_state)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_keep_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_keep_V_1_state)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_keep_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_keep_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_keep_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_keep_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_keep_V_1_state)))) begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_out))) begin
            OUTPUT_STREAM_V_last_V_1_sel_rd <= ~OUTPUT_STREAM_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in))) begin
            OUTPUT_STREAM_V_last_V_1_sel_wr <= ~OUTPUT_STREAM_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_last_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_last_V_1_state)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_last_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_last_V_1_state)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_last_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_last_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_last_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_last_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_last_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_last_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_last_V_1_state)))) begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_out))) begin
            OUTPUT_STREAM_V_strb_V_1_sel_rd <= ~OUTPUT_STREAM_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in))) begin
            OUTPUT_STREAM_V_strb_V_1_sel_wr <= ~OUTPUT_STREAM_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_strb_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_strb_V_1_state)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_strb_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_strb_V_1_state)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_strb_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_strb_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_strb_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_strb_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_strb_V_1_state)))) begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_out))) begin
            OUTPUT_STREAM_V_user_V_1_sel_rd <= ~OUTPUT_STREAM_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in))) begin
            OUTPUT_STREAM_V_user_V_1_sel_wr <= ~OUTPUT_STREAM_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_STREAM_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_user_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out) & (2'd3 == OUTPUT_STREAM_V_user_V_1_state)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_user_V_1_state)) | ((1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in) & (2'd3 == OUTPUT_STREAM_V_user_V_1_state)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_STREAM_V_user_V_1_vld_in) & (1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out)) & ~((1'b0 == OUTPUT_STREAM_V_user_V_1_ack_out) & (1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in)) & (2'd3 == OUTPUT_STREAM_V_user_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_user_V_1_ack_out) & (2'd1 == OUTPUT_STREAM_V_user_V_1_state)) | ((1'b1 == OUTPUT_STREAM_V_user_V_1_vld_in) & (2'd2 == OUTPUT_STREAM_V_user_V_1_state)))) begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd3;
        end else begin
            OUTPUT_STREAM_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        first_reg_223 <= r_V_2_fu_334_p1;
    end else if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        first_reg_223 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state72) & (tmp_last_V_reg_384 == 1'd1))) begin
        in1Count_1_reg_248 <= in1Count_3_reg_363;
    end else if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd0))) begin
        in1Count_1_reg_248 <= in1Count_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state72) & (tmp_last_V_reg_384 == 1'd0))) begin
        in1Count_reg_211 <= in1Count_3_reg_363;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in1Count_reg_211 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        j_reg_237 <= j_1_reg_407;
    end else if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        j_reg_237 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_data_V_0_load_A)) begin
        INPUT_STREAM_V_data_V_0_payload_A <= INPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_data_V_0_load_B)) begin
        INPUT_STREAM_V_data_V_0_payload_B <= INPUT_STREAM_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_dest_V_0_load_A)) begin
        INPUT_STREAM_V_dest_V_0_payload_A <= INPUT_STREAM_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_dest_V_0_load_B)) begin
        INPUT_STREAM_V_dest_V_0_payload_B <= INPUT_STREAM_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_id_V_0_load_A)) begin
        INPUT_STREAM_V_id_V_0_payload_A <= INPUT_STREAM_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_id_V_0_load_B)) begin
        INPUT_STREAM_V_id_V_0_payload_B <= INPUT_STREAM_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_keep_V_0_load_A)) begin
        INPUT_STREAM_V_keep_V_0_payload_A <= INPUT_STREAM_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_keep_V_0_load_B)) begin
        INPUT_STREAM_V_keep_V_0_payload_B <= INPUT_STREAM_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_last_V_0_load_A)) begin
        INPUT_STREAM_V_last_V_0_payload_A <= INPUT_STREAM_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_last_V_0_load_B)) begin
        INPUT_STREAM_V_last_V_0_payload_B <= INPUT_STREAM_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_strb_V_0_load_A)) begin
        INPUT_STREAM_V_strb_V_0_payload_A <= INPUT_STREAM_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_strb_V_0_load_B)) begin
        INPUT_STREAM_V_strb_V_0_payload_B <= INPUT_STREAM_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_user_V_0_load_A)) begin
        INPUT_STREAM_V_user_V_0_payload_A <= INPUT_STREAM_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_STREAM_V_user_V_0_load_B)) begin
        INPUT_STREAM_V_user_V_0_payload_B <= INPUT_STREAM_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_load_A)) begin
        OUTPUT_STREAM_V_data_V_1_payload_A <= first_reg_223;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_load_B)) begin
        OUTPUT_STREAM_V_data_V_1_payload_B <= first_reg_223;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_load_A)) begin
        OUTPUT_STREAM_V_dest_V_1_payload_A <= tmp_dest_V_reg_394;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_load_B)) begin
        OUTPUT_STREAM_V_dest_V_1_payload_B <= tmp_dest_V_reg_394;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_load_A)) begin
        OUTPUT_STREAM_V_id_V_1_payload_A <= tmp_id_V_reg_389;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_load_B)) begin
        OUTPUT_STREAM_V_id_V_1_payload_B <= tmp_id_V_reg_389;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_load_A)) begin
        OUTPUT_STREAM_V_keep_V_1_payload_A <= tmp_keep_V_reg_369;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_load_B)) begin
        OUTPUT_STREAM_V_keep_V_1_payload_B <= tmp_keep_V_reg_369;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_load_A)) begin
        OUTPUT_STREAM_V_last_V_1_payload_A <= tmp_last_V_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_load_B)) begin
        OUTPUT_STREAM_V_last_V_1_payload_B <= tmp_last_V_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_load_A)) begin
        OUTPUT_STREAM_V_strb_V_1_payload_A <= tmp_strb_V_reg_374;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_load_B)) begin
        OUTPUT_STREAM_V_strb_V_1_payload_B <= tmp_strb_V_reg_374;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_load_A)) begin
        OUTPUT_STREAM_V_user_V_1_payload_A <= tmp_user_V_reg_379;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_load_B)) begin
        OUTPUT_STREAM_V_user_V_1_payload_B <= tmp_user_V_reg_379;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2))) begin
        in1Count_3_reg_363 <= in1Count_3_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_io))) begin
        j_1_reg_407 <= j_1_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_read_reg_344 <= n;
        searched_read_reg_349 <= searched;
        tmp_reg_355 <= tmp_fu_258_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd1) & (1'b0 == ap_block_state3_io))) begin
        r_V_reg_412 <= r_V_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        rhs_V_reg_399[31 : 0] <= rhs_V_fu_302_p1[31 : 0];
        tmp_dest_V_reg_394 <= INPUT_STREAM_V_dest_V_0_data_out;
        tmp_id_V_reg_389 <= INPUT_STREAM_V_id_V_0_data_out;
        tmp_keep_V_reg_369 <= INPUT_STREAM_V_keep_V_0_data_out;
        tmp_last_V_reg_384 <= INPUT_STREAM_V_last_V_0_data_out;
        tmp_strb_V_reg_374 <= INPUT_STREAM_V_strb_V_0_data_out;
        tmp_user_V_reg_379 <= INPUT_STREAM_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        INPUT_STREAM_TDATA_blk_n = INPUT_STREAM_V_data_V_0_state[1'd0];
    end else begin
        INPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        INPUT_STREAM_V_data_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_data_V_0_sel)) begin
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_data_V_0_data_out = INPUT_STREAM_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        INPUT_STREAM_V_dest_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_dest_V_0_sel)) begin
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_dest_V_0_data_out = INPUT_STREAM_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        INPUT_STREAM_V_id_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_id_V_0_sel)) begin
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_id_V_0_data_out = INPUT_STREAM_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        INPUT_STREAM_V_keep_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_keep_V_0_sel)) begin
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_keep_V_0_data_out = INPUT_STREAM_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        INPUT_STREAM_V_last_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_last_V_0_sel)) begin
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_last_V_0_data_out = INPUT_STREAM_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        INPUT_STREAM_V_strb_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_strb_V_0_sel)) begin
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_strb_V_0_data_out = INPUT_STREAM_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
        INPUT_STREAM_V_user_V_0_ack_out = 1'b1;
    end else begin
        INPUT_STREAM_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_STREAM_V_user_V_0_sel)) begin
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_B;
    end else begin
        INPUT_STREAM_V_user_V_0_data_out = INPUT_STREAM_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | ((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd0)))) begin
        OUTPUT_STREAM_TDATA_blk_n = OUTPUT_STREAM_V_data_V_1_state[1'd1];
    end else begin
        OUTPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_data_V_1_sel)) begin
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_data_V_1_data_out = OUTPUT_STREAM_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd0) & (1'b0 == ap_block_state3_io))) begin
        OUTPUT_STREAM_V_data_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_dest_V_1_sel)) begin
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_dest_V_1_data_out = OUTPUT_STREAM_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd0) & (1'b0 == ap_block_state3_io))) begin
        OUTPUT_STREAM_V_dest_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_id_V_1_sel)) begin
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_id_V_1_data_out = OUTPUT_STREAM_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd0) & (1'b0 == ap_block_state3_io))) begin
        OUTPUT_STREAM_V_id_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_keep_V_1_sel)) begin
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_keep_V_1_data_out = OUTPUT_STREAM_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd0) & (1'b0 == ap_block_state3_io))) begin
        OUTPUT_STREAM_V_keep_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_last_V_1_sel)) begin
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_last_V_1_data_out = OUTPUT_STREAM_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd0) & (1'b0 == ap_block_state3_io))) begin
        OUTPUT_STREAM_V_last_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_strb_V_1_sel)) begin
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_strb_V_1_data_out = OUTPUT_STREAM_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd0) & (1'b0 == ap_block_state3_io))) begin
        OUTPUT_STREAM_V_strb_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_STREAM_V_user_V_1_sel)) begin
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_B;
    end else begin
        OUTPUT_STREAM_V_user_V_1_data_out = OUTPUT_STREAM_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd0) & (1'b0 == ap_block_state3_io))) begin
        OUTPUT_STREAM_V_user_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_STREAM_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state73))) begin
        agg_result_a_ap_vld = 1'b1;
    end else begin
        agg_result_a_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state73))) begin
        agg_result_b_ap_vld = 1'b1;
    end else begin
        agg_result_b_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state73))) begin
        agg_result_c_ap_vld = 1'b1;
    end else begin
        agg_result_c_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state73))) begin
        agg_result_d_ap_vld = 1'b1;
    end else begin
        agg_result_d_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state73))) begin
        agg_result_e_ap_vld = 1'b1;
    end else begin
        agg_result_e_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state73))) begin
        agg_result_f_ap_vld = 1'b1;
    end else begin
        agg_result_f_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state73))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state73))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_262_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd0) & (1'b0 == ap_block_state3_io))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_310_p2 == 1'd1) & (1'b0 == ap_block_state3_io))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state72) & (tmp_last_V_reg_384 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == OUTPUT_STREAM_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state72) & (tmp_last_V_reg_384 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if ((~((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_STREAM_TREADY = INPUT_STREAM_V_dest_V_0_state[1'd1];

assign INPUT_STREAM_V_data_V_0_ack_in = INPUT_STREAM_V_data_V_0_state[1'd1];

assign INPUT_STREAM_V_data_V_0_load_A = (~INPUT_STREAM_V_data_V_0_sel_wr & INPUT_STREAM_V_data_V_0_state_cmp_full);

assign INPUT_STREAM_V_data_V_0_load_B = (INPUT_STREAM_V_data_V_0_state_cmp_full & INPUT_STREAM_V_data_V_0_sel_wr);

assign INPUT_STREAM_V_data_V_0_sel = INPUT_STREAM_V_data_V_0_sel_rd;

assign INPUT_STREAM_V_data_V_0_state_cmp_full = ((INPUT_STREAM_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_data_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_data_V_0_vld_out = INPUT_STREAM_V_data_V_0_state[1'd0];

assign INPUT_STREAM_V_dest_V_0_ack_in = INPUT_STREAM_V_dest_V_0_state[1'd1];

assign INPUT_STREAM_V_dest_V_0_load_A = (~INPUT_STREAM_V_dest_V_0_sel_wr & INPUT_STREAM_V_dest_V_0_state_cmp_full);

assign INPUT_STREAM_V_dest_V_0_load_B = (INPUT_STREAM_V_dest_V_0_state_cmp_full & INPUT_STREAM_V_dest_V_0_sel_wr);

assign INPUT_STREAM_V_dest_V_0_sel = INPUT_STREAM_V_dest_V_0_sel_rd;

assign INPUT_STREAM_V_dest_V_0_state_cmp_full = ((INPUT_STREAM_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_dest_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_dest_V_0_vld_out = INPUT_STREAM_V_dest_V_0_state[1'd0];

assign INPUT_STREAM_V_id_V_0_ack_in = INPUT_STREAM_V_id_V_0_state[1'd1];

assign INPUT_STREAM_V_id_V_0_load_A = (~INPUT_STREAM_V_id_V_0_sel_wr & INPUT_STREAM_V_id_V_0_state_cmp_full);

assign INPUT_STREAM_V_id_V_0_load_B = (INPUT_STREAM_V_id_V_0_state_cmp_full & INPUT_STREAM_V_id_V_0_sel_wr);

assign INPUT_STREAM_V_id_V_0_sel = INPUT_STREAM_V_id_V_0_sel_rd;

assign INPUT_STREAM_V_id_V_0_state_cmp_full = ((INPUT_STREAM_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_id_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_id_V_0_vld_out = INPUT_STREAM_V_id_V_0_state[1'd0];

assign INPUT_STREAM_V_keep_V_0_ack_in = INPUT_STREAM_V_keep_V_0_state[1'd1];

assign INPUT_STREAM_V_keep_V_0_load_A = (~INPUT_STREAM_V_keep_V_0_sel_wr & INPUT_STREAM_V_keep_V_0_state_cmp_full);

assign INPUT_STREAM_V_keep_V_0_load_B = (INPUT_STREAM_V_keep_V_0_state_cmp_full & INPUT_STREAM_V_keep_V_0_sel_wr);

assign INPUT_STREAM_V_keep_V_0_sel = INPUT_STREAM_V_keep_V_0_sel_rd;

assign INPUT_STREAM_V_keep_V_0_state_cmp_full = ((INPUT_STREAM_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_keep_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_keep_V_0_vld_out = INPUT_STREAM_V_keep_V_0_state[1'd0];

assign INPUT_STREAM_V_last_V_0_ack_in = INPUT_STREAM_V_last_V_0_state[1'd1];

assign INPUT_STREAM_V_last_V_0_load_A = (~INPUT_STREAM_V_last_V_0_sel_wr & INPUT_STREAM_V_last_V_0_state_cmp_full);

assign INPUT_STREAM_V_last_V_0_load_B = (INPUT_STREAM_V_last_V_0_state_cmp_full & INPUT_STREAM_V_last_V_0_sel_wr);

assign INPUT_STREAM_V_last_V_0_sel = INPUT_STREAM_V_last_V_0_sel_rd;

assign INPUT_STREAM_V_last_V_0_state_cmp_full = ((INPUT_STREAM_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_last_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_last_V_0_vld_out = INPUT_STREAM_V_last_V_0_state[1'd0];

assign INPUT_STREAM_V_strb_V_0_ack_in = INPUT_STREAM_V_strb_V_0_state[1'd1];

assign INPUT_STREAM_V_strb_V_0_load_A = (~INPUT_STREAM_V_strb_V_0_sel_wr & INPUT_STREAM_V_strb_V_0_state_cmp_full);

assign INPUT_STREAM_V_strb_V_0_load_B = (INPUT_STREAM_V_strb_V_0_state_cmp_full & INPUT_STREAM_V_strb_V_0_sel_wr);

assign INPUT_STREAM_V_strb_V_0_sel = INPUT_STREAM_V_strb_V_0_sel_rd;

assign INPUT_STREAM_V_strb_V_0_state_cmp_full = ((INPUT_STREAM_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_strb_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_strb_V_0_vld_out = INPUT_STREAM_V_strb_V_0_state[1'd0];

assign INPUT_STREAM_V_user_V_0_ack_in = INPUT_STREAM_V_user_V_0_state[1'd1];

assign INPUT_STREAM_V_user_V_0_load_A = (~INPUT_STREAM_V_user_V_0_sel_wr & INPUT_STREAM_V_user_V_0_state_cmp_full);

assign INPUT_STREAM_V_user_V_0_load_B = (INPUT_STREAM_V_user_V_0_state_cmp_full & INPUT_STREAM_V_user_V_0_sel_wr);

assign INPUT_STREAM_V_user_V_0_sel = INPUT_STREAM_V_user_V_0_sel_rd;

assign INPUT_STREAM_V_user_V_0_state_cmp_full = ((INPUT_STREAM_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_STREAM_V_user_V_0_vld_in = INPUT_STREAM_TVALID;

assign INPUT_STREAM_V_user_V_0_vld_out = INPUT_STREAM_V_user_V_0_state[1'd0];

assign OUTPUT_STREAM_TDATA = OUTPUT_STREAM_V_data_V_1_data_out;

assign OUTPUT_STREAM_TDEST = OUTPUT_STREAM_V_dest_V_1_data_out;

assign OUTPUT_STREAM_TID = OUTPUT_STREAM_V_id_V_1_data_out;

assign OUTPUT_STREAM_TKEEP = OUTPUT_STREAM_V_keep_V_1_data_out;

assign OUTPUT_STREAM_TLAST = OUTPUT_STREAM_V_last_V_1_data_out;

assign OUTPUT_STREAM_TSTRB = OUTPUT_STREAM_V_strb_V_1_data_out;

assign OUTPUT_STREAM_TUSER = OUTPUT_STREAM_V_user_V_1_data_out;

assign OUTPUT_STREAM_TVALID = OUTPUT_STREAM_V_dest_V_1_state[1'd0];

assign OUTPUT_STREAM_V_data_V_1_ack_in = OUTPUT_STREAM_V_data_V_1_state[1'd1];

assign OUTPUT_STREAM_V_data_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_data_V_1_load_A = (~OUTPUT_STREAM_V_data_V_1_sel_wr & OUTPUT_STREAM_V_data_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_data_V_1_load_B = (OUTPUT_STREAM_V_data_V_1_state_cmp_full & OUTPUT_STREAM_V_data_V_1_sel_wr);

assign OUTPUT_STREAM_V_data_V_1_sel = OUTPUT_STREAM_V_data_V_1_sel_rd;

assign OUTPUT_STREAM_V_data_V_1_state_cmp_full = ((OUTPUT_STREAM_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_data_V_1_vld_out = OUTPUT_STREAM_V_data_V_1_state[1'd0];

assign OUTPUT_STREAM_V_dest_V_1_ack_in = OUTPUT_STREAM_V_dest_V_1_state[1'd1];

assign OUTPUT_STREAM_V_dest_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_dest_V_1_load_A = (~OUTPUT_STREAM_V_dest_V_1_sel_wr & OUTPUT_STREAM_V_dest_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_dest_V_1_load_B = (OUTPUT_STREAM_V_dest_V_1_state_cmp_full & OUTPUT_STREAM_V_dest_V_1_sel_wr);

assign OUTPUT_STREAM_V_dest_V_1_sel = OUTPUT_STREAM_V_dest_V_1_sel_rd;

assign OUTPUT_STREAM_V_dest_V_1_state_cmp_full = ((OUTPUT_STREAM_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_dest_V_1_vld_out = OUTPUT_STREAM_V_dest_V_1_state[1'd0];

assign OUTPUT_STREAM_V_id_V_1_ack_in = OUTPUT_STREAM_V_id_V_1_state[1'd1];

assign OUTPUT_STREAM_V_id_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_id_V_1_load_A = (~OUTPUT_STREAM_V_id_V_1_sel_wr & OUTPUT_STREAM_V_id_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_id_V_1_load_B = (OUTPUT_STREAM_V_id_V_1_state_cmp_full & OUTPUT_STREAM_V_id_V_1_sel_wr);

assign OUTPUT_STREAM_V_id_V_1_sel = OUTPUT_STREAM_V_id_V_1_sel_rd;

assign OUTPUT_STREAM_V_id_V_1_state_cmp_full = ((OUTPUT_STREAM_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_id_V_1_vld_out = OUTPUT_STREAM_V_id_V_1_state[1'd0];

assign OUTPUT_STREAM_V_keep_V_1_ack_in = OUTPUT_STREAM_V_keep_V_1_state[1'd1];

assign OUTPUT_STREAM_V_keep_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_keep_V_1_load_A = (~OUTPUT_STREAM_V_keep_V_1_sel_wr & OUTPUT_STREAM_V_keep_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_keep_V_1_load_B = (OUTPUT_STREAM_V_keep_V_1_state_cmp_full & OUTPUT_STREAM_V_keep_V_1_sel_wr);

assign OUTPUT_STREAM_V_keep_V_1_sel = OUTPUT_STREAM_V_keep_V_1_sel_rd;

assign OUTPUT_STREAM_V_keep_V_1_state_cmp_full = ((OUTPUT_STREAM_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_keep_V_1_vld_out = OUTPUT_STREAM_V_keep_V_1_state[1'd0];

assign OUTPUT_STREAM_V_last_V_1_ack_in = OUTPUT_STREAM_V_last_V_1_state[1'd1];

assign OUTPUT_STREAM_V_last_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_last_V_1_load_A = (~OUTPUT_STREAM_V_last_V_1_sel_wr & OUTPUT_STREAM_V_last_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_last_V_1_load_B = (OUTPUT_STREAM_V_last_V_1_state_cmp_full & OUTPUT_STREAM_V_last_V_1_sel_wr);

assign OUTPUT_STREAM_V_last_V_1_sel = OUTPUT_STREAM_V_last_V_1_sel_rd;

assign OUTPUT_STREAM_V_last_V_1_state_cmp_full = ((OUTPUT_STREAM_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_last_V_1_vld_out = OUTPUT_STREAM_V_last_V_1_state[1'd0];

assign OUTPUT_STREAM_V_strb_V_1_ack_in = OUTPUT_STREAM_V_strb_V_1_state[1'd1];

assign OUTPUT_STREAM_V_strb_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_strb_V_1_load_A = (~OUTPUT_STREAM_V_strb_V_1_sel_wr & OUTPUT_STREAM_V_strb_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_strb_V_1_load_B = (OUTPUT_STREAM_V_strb_V_1_state_cmp_full & OUTPUT_STREAM_V_strb_V_1_sel_wr);

assign OUTPUT_STREAM_V_strb_V_1_sel = OUTPUT_STREAM_V_strb_V_1_sel_rd;

assign OUTPUT_STREAM_V_strb_V_1_state_cmp_full = ((OUTPUT_STREAM_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_strb_V_1_vld_out = OUTPUT_STREAM_V_strb_V_1_state[1'd0];

assign OUTPUT_STREAM_V_user_V_1_ack_in = OUTPUT_STREAM_V_user_V_1_state[1'd1];

assign OUTPUT_STREAM_V_user_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUTPUT_STREAM_V_user_V_1_load_A = (~OUTPUT_STREAM_V_user_V_1_sel_wr & OUTPUT_STREAM_V_user_V_1_state_cmp_full);

assign OUTPUT_STREAM_V_user_V_1_load_B = (OUTPUT_STREAM_V_user_V_1_state_cmp_full & OUTPUT_STREAM_V_user_V_1_sel_wr);

assign OUTPUT_STREAM_V_user_V_1_sel = OUTPUT_STREAM_V_user_V_1_sel_rd;

assign OUTPUT_STREAM_V_user_V_1_state_cmp_full = ((OUTPUT_STREAM_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_STREAM_V_user_V_1_vld_out = OUTPUT_STREAM_V_user_V_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

always @ (*) begin
    ap_block_state2 = ((1'b0 == INPUT_STREAM_V_data_V_0_vld_out) & (tmp_1_fu_262_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state3_io = ((1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in) & (tmp_4_fu_310_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state73 = ((1'b0 == OUTPUT_STREAM_V_dest_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_id_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_last_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_user_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_strb_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_keep_V_1_ack_in) | (1'b0 == OUTPUT_STREAM_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_330_p1 = tmp_reg_355;

assign in1Count_1_cast_fu_338_p1 = in1Count_1_reg_248;

assign in1Count_3_fu_268_p2 = (in1Count_reg_211 + 23'd1);

assign j_1_fu_315_p2 = (j_reg_237 + 31'd1);

assign j_cast_fu_306_p1 = j_reg_237;

assign r_V_2_fu_334_p1 = grp_fu_330_p2[31:0];

assign r_V_fu_325_p0 = rhs_V_reg_399;

assign r_V_fu_325_p1 = r_V_fu_325_p10;

assign r_V_fu_325_p10 = first_reg_223;

assign r_V_fu_325_p2 = (r_V_fu_325_p0 * r_V_fu_325_p1);

assign rhs_V_fu_302_p1 = INPUT_STREAM_V_data_V_0_data_out;

assign tmp_1_fu_262_p2 = ((in1Count_reg_211 < 23'd8371200) ? 1'b1 : 1'b0);

assign tmp_4_fu_310_p2 = (($signed(j_cast_fu_306_p1) < $signed(searched_read_reg_349)) ? 1'b1 : 1'b0);

assign tmp_fu_258_p0 = n;

assign tmp_fu_258_p1 = tmp_fu_258_p0;

always @ (posedge ap_clk) begin
    rhs_V_reg_399[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //Encode
