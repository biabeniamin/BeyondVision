// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XSTREAMGENERATOR_H
#define XSTREAMGENERATOR_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xstreamgenerator_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_bus_BaseAddress;
} XStreamgenerator_Config;
#endif

typedef struct {
    u32 Control_bus_BaseAddress;
    u32 IsReady;
} XStreamgenerator;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XStreamgenerator_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XStreamgenerator_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XStreamgenerator_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XStreamgenerator_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XStreamgenerator_Initialize(XStreamgenerator *InstancePtr, u16 DeviceId);
XStreamgenerator_Config* XStreamgenerator_LookupConfig(u16 DeviceId);
int XStreamgenerator_CfgInitialize(XStreamgenerator *InstancePtr, XStreamgenerator_Config *ConfigPtr);
#else
int XStreamgenerator_Initialize(XStreamgenerator *InstancePtr, const char* InstanceName);
int XStreamgenerator_Release(XStreamgenerator *InstancePtr);
#endif

void XStreamgenerator_Start(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_IsDone(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_IsIdle(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_IsReady(XStreamgenerator *InstancePtr);
void XStreamgenerator_EnableAutoRestart(XStreamgenerator *InstancePtr);
void XStreamgenerator_DisableAutoRestart(XStreamgenerator *InstancePtr);

u32 XStreamgenerator_Get_agg_result_a(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_a_vld(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_b(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_b_vld(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_c(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_c_vld(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_d(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_d_vld(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_e(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_e_vld(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_f(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_Get_agg_result_f_vld(XStreamgenerator *InstancePtr);
void XStreamgenerator_Set_searched(XStreamgenerator *InstancePtr, u32 Data);
u32 XStreamgenerator_Get_searched(XStreamgenerator *InstancePtr);

void XStreamgenerator_InterruptGlobalEnable(XStreamgenerator *InstancePtr);
void XStreamgenerator_InterruptGlobalDisable(XStreamgenerator *InstancePtr);
void XStreamgenerator_InterruptEnable(XStreamgenerator *InstancePtr, u32 Mask);
void XStreamgenerator_InterruptDisable(XStreamgenerator *InstancePtr, u32 Mask);
void XStreamgenerator_InterruptClear(XStreamgenerator *InstancePtr, u32 Mask);
u32 XStreamgenerator_InterruptGetEnabled(XStreamgenerator *InstancePtr);
u32 XStreamgenerator_InterruptGetStatus(XStreamgenerator *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
